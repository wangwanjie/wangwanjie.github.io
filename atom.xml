<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CoderJay的博客</title>
  <subtitle>Code life， code to live.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangwanjie.github.io/"/>
  <updated>2017-03-17T07:16:13.000Z</updated>
  <id>https://wangwanjie.github.io/</id>
  
  <author>
    <name>CoderJay</name>
    <email>wangwanjie1993@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态加载javascript</title>
    <link href="https://wangwanjie.github.io/2017/03/09/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjavascript/"/>
    <id>https://wangwanjie.github.io/2017/03/09/动态加载javascript/</id>
    <published>2017-03-09T02:50:55.000Z</published>
    <updated>2017-03-17T07:16:13.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 另外一个独立的动态加载js的函数</div><div class="line">function loadJs(jsurl, head, callback) &#123;</div><div class="line">	var script = document.createElement(script);</div><div class="line">	script.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;);</div><div class="line"></div><div class="line">	if(callback) &#123;</div><div class="line">		if(script.readyState) &#123; //IE</div><div class="line">			script.onreadystatechange = function() &#123;</div><div class="line">				if(script.readyState == &quot;loaded&quot; ||</div><div class="line">					script.readyState == &quot;complete&quot;) &#123;</div><div class="line">					script.onreadystatechange = null;</div><div class="line">					callback();</div><div class="line">				&#125;</div><div class="line">			&#125;;</div><div class="line">		&#125; else &#123; //Others</div><div class="line">			script.onload = function() &#123;</div><div class="line">				callback();</div><div class="line">			&#125;;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	script.setAttribute(&quot;src&quot;, jsurl);</div><div class="line"></div><div class="line">	if(head)</div><div class="line">		document.getElementsByTagName(head)[0].appendChild(script);</div><div class="line">	else &#123;</div><div class="line">		document.body.appendChild(script);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/di
    
    </summary>
    
      <category term="javascript" scheme="https://wangwanjie.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://wangwanjie.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用 dumpdecrypted 砸壳</title>
    <link href="https://wangwanjie.github.io/2017/02/08/%E5%88%A9%E7%94%A8dumpdecrypted%E7%A0%B8%E5%A3%B3/"/>
    <id>https://wangwanjie.github.io/2017/02/08/利用dumpdecrypted砸壳/</id>
    <published>2017-02-08T09:34:03.000Z</published>
    <updated>2017-03-17T07:14:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、编译生成</p>
<p><code>dumpdecrypted.dylib</code></p>
<p>2、给生成的 <code>dumpdecrypted.dylib</code> 签名</p>
<a id="more"></a>
<p>3、ssh到手机，<code>ps aux | grep</code> 目标APP查看APP安装目录</p>
<p>4、（可忽略这步）<code>cycript -p</code> 目标 APP，执行 <code>[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]</code><br> 查看沙盒目录</p>
<p>5、将 <code>dumpdecrypted.dylib</code>拷贝 <code>/var/tmp</code>，进入 <code>/var/tmp</code></p>
<p>6、将 <code>dumpdecrypted.dylib</code> 拷贝到沙盒目录，进入沙盒目录，执行<br><code>DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/containers/Bundle/Application/0B8A6E0F-9D64-4EF4-97D2-D3A508FC3574/APP.app/APP</code></p>
<p>7、得到目标 <code>APP.decrypted</code>就是二进制文件</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、编译生成&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dumpdecrypted.dylib&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、给生成的 &lt;code&gt;dumpdecrypted.dylib&lt;/code&gt; 签名&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wangwanjie.github.io/categories/iOS/"/>
    
    
      <category term="逆向" scheme="https://wangwanjie.github.io/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="iOS安全" scheme="https://wangwanjie.github.io/tags/iOS%E5%AE%89%E5%85%A8/"/>
    
      <category term="破解" scheme="https://wangwanjie.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>给包签名</title>
    <link href="https://wangwanjie.github.io/2017/02/08/%E7%BB%99%E5%8C%85%E7%AD%BE%E5%90%8D/"/>
    <id>https://wangwanjie.github.io/2017/02/08/给包签名/</id>
    <published>2017-02-08T05:45:09.000Z</published>
    <updated>2017-03-17T07:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>查看可用签名</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">security find-identity -v -p codesigning</div></pre></td></tr></table></figure>
<ol>
<li>签名</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codesign --force --verify --verbose --sign &quot;iPhone Developer: 396736694@qq.com (Z4965JH2C8)” 目标包</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;查看可用签名&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=
    
    </summary>
    
      <category term="iOS" scheme="https://wangwanjie.github.io/categories/iOS/"/>
    
    
      <category term="打包" scheme="https://wangwanjie.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="iOS签名" scheme="https://wangwanjie.github.io/tags/iOS%E7%AD%BE%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>企业内部应用分发</title>
    <link href="https://wangwanjie.github.io/2017/01/11/%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E5%BA%94%E7%94%A8%E5%88%86%E5%8F%91/"/>
    <id>https://wangwanjie.github.io/2017/01/11/企业内部应用分发/</id>
    <published>2017-01-11T12:52:03.000Z</published>
    <updated>2017-03-17T07:14:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>iOS 支持以无线方式安装企业内部应用，而无需使用 iTunes 或 App Store。</p>
<h5 id="应用格式要求-ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。"><a href="#应用格式要求-ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。" class="headerlink" title="应用格式要求:.ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。"></a>应用格式要求:.ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。</h5></blockquote>
<h4 id="无线安装要求："><a href="#无线安装要求：" class="headerlink" title="无线安装要求："></a>无线安装要求：</h4><pre><code>1. XML 清单文件（一个 plist 配置文件）
2. 可让设备访问 Apple iTunes 服务器的网络配置（设备要能连接互联网，因为要校验）
3. 对于 iOS 7.1 或更高版本， plist 文件和 ipa 文件需要放在 HTTPS 的服务器上
</code></pre><h6 id="为了安装应用，用户使用特殊的-URL-前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。"><a href="#为了安装应用，用户使用特殊的-URL-前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。" class="headerlink" title="为了安装应用，用户使用特殊的 URL 前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。"></a>为了安装应用，用户使用特殊的 URL 前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。</h6><a id="more"></a>
<h4 id="准备分发企业内部应用"><a href="#准备分发企业内部应用" class="headerlink" title="准备分发企业内部应用:"></a>准备分发企业内部应用:</h4><pre><code>1.    创建应用的归档，格式为 *.ipa 格式，并且归档中包括企业内部预置描述文件，且使用分发证书签名；
2.    无线清单文件，您可以使用支持编辑 plist 文档的编辑器编写或者直接修改下面提供的范例，各字段意义范例中会写明；
3.    可直接供内连网或互联网访问的 HTTPS 服务器。
</code></pre><h4 id="关于无线-plist-清单文件"><a href="#关于无线-plist-清单文件" class="headerlink" title="关于无线 plist 清单文件"></a>关于无线 plist 清单文件</h4><h6 id="清单文件是一个-XML-plist-文件，可供-Apple-设备用来从您的-Web-服务器上查找、下载和安装应用。"><a href="#清单文件是一个-XML-plist-文件，可供-Apple-设备用来从您的-Web-服务器上查找、下载和安装应用。" class="headerlink" title="清单文件是一个 XML plist 文件，可供 Apple 设备用来从您的 Web 服务器上查找、下载和安装应用。"></a>清单文件是一个 XML plist 文件，可供 Apple 设备用来从您的 Web 服务器上查找、下载和安装应用。</h6><h4 id="以下栏是必填项："><a href="#以下栏是必填项：" class="headerlink" title="以下栏是必填项："></a><strong>以下栏是必填项：</strong></h4><pre><code>1. URL：应用 (*.ipa) 文件的完全限定 HTTPS URL
2. display-image：57 x 57 px 的 PNG 图像，在下载和安装过程中显示，图片的 Web URL
3. full-size-image：512 x 512 px 的 PNG 图像，表示 iTunes 中相应的应用，图片的 Web URL    
4. bundle-identifier：应用的包标识符，与 Xcode 项目中指定的完全一样
5. bundle-version：应用的包版本，在 Xcode 项目中指定
6. title：下载和安装过程中显示的应用的名称
</code></pre><h6 id="样本清单文件还包含可选字段。例如，如果应用文件太大，并且想要在执行错误检验（TCP-通信通常会执行该检验）的基础上确保下载的完整性，可以使用-MD5-校验，使用见范例。"><a href="#样本清单文件还包含可选字段。例如，如果应用文件太大，并且想要在执行错误检验（TCP-通信通常会执行该检验）的基础上确保下载的完整性，可以使用-MD5-校验，使用见范例。" class="headerlink" title="样本清单文件还包含可选字段。例如，如果应用文件太大，并且想要在执行错误检验（TCP 通信通常会执行该检验）的基础上确保下载的完整性，可以使用 MD5 校验，使用见范例。"></a>样本清单文件还包含可选字段。例如，如果应用文件太大，并且想要在执行错误检验（TCP 通信通常会执行该检验）的基础上确保下载的完整性，可以使用 MD5 校验，使用见范例。</h6><h6 id="您也可以在一个plist文件中配置多个应用，一个-item-作为一项。"><a href="#您也可以在一个plist文件中配置多个应用，一个-item-作为一项。" class="headerlink" title="您也可以在一个plist文件中配置多个应用，一个 item 作为一项。"></a>您也可以在一个plist文件中配置多个应用，一个 item 作为一项。</h6><h4 id="构建网站"><a href="#构建网站" class="headerlink" title="构建网站"></a>构建网站</h4><h6 id="将这些项目上传到网站上可供已认证的用户访问的区域："><a href="#将这些项目上传到网站上可供已认证的用户访问的区域：" class="headerlink" title="将这些项目上传到网站上可供已认证的用户访问的区域："></a>将这些项目上传到网站上可供已认证的用户访问的区域：</h6><pre><code>1. 应用 (.ipa) 文件
2. 清单 (.plist) 文件
</code></pre><h6 id="您的网站可以是链接到清单文件的单个页面。用户轻点-Web-链接后会下载清单文件，并触发下载和安装。"><a href="#您的网站可以是链接到清单文件的单个页面。用户轻点-Web-链接后会下载清单文件，并触发下载和安装。" class="headerlink" title="您的网站可以是链接到清单文件的单个页面。用户轻点 Web 链接后会下载清单文件，并触发下载和安装。"></a>您的网站可以是链接到清单文件的单个页面。用户轻点 Web 链接后会下载清单文件，并触发下载和安装。</h6><p><em>以下是示例链接：</em><br><code>&lt;a href=&quot;itms-services://?action=download-manifest&amp;url=https://example.com/manifest.plist&quot;&gt;安装应用&lt;/a&gt;</code><br><strong>虽然 URL 的协议部分是“itms-services”，但 iTunes Store 并不参与此过程。</strong></p>
<h4 id="配置服务器-MIME-类型（一般不用配置）"><a href="#配置服务器-MIME-类型（一般不用配置）" class="headerlink" title="配置服务器 MIME 类型（一般不用配置）"></a>配置服务器 MIME 类型（一般不用配置）</h4><h5 id="您可能需要配置-Web-服务器，让清单文件和应用文件可正确传输。"><a href="#您可能需要配置-Web-服务器，让清单文件和应用文件可正确传输。" class="headerlink" title="您可能需要配置 Web 服务器，让清单文件和应用文件可正确传输。"></a>您可能需要配置 Web 服务器，让清单文件和应用文件可正确传输。</h5><h5 id="对于-Server-应用，请将-MIME-类型添加到网页服务的-MIME-类型设置："><a href="#对于-Server-应用，请将-MIME-类型添加到网页服务的-MIME-类型设置：" class="headerlink" title="对于 Server 应用，请将 MIME 类型添加到网页服务的 MIME 类型设置："></a>对于 Server 应用，请将 MIME 类型添加到网页服务的 MIME 类型设置：</h5><pre><code>* application/octet-stream ipa
* text/xml plist
</code></pre><h5 id="对于微软的互联网信息服务器-IIS-，请使用-IIS-Manager-在服务器的“属性”页面中添加-MIME-类型："><a href="#对于微软的互联网信息服务器-IIS-，请使用-IIS-Manager-在服务器的“属性”页面中添加-MIME-类型：" class="headerlink" title="对于微软的互联网信息服务器 (IIS)，请使用 IIS Manager 在服务器的“属性”页面中添加 MIME 类型："></a>对于微软的互联网信息服务器 (IIS)，请使用 IIS Manager 在服务器的“属性”页面中添加 MIME 类型：</h5><pre><code>* .ipa application/octet-stream
* .plist text/xml
</code></pre><h4 id="无线-iOS-应用分发故障诊断"><a href="#无线-iOS-应用分发故障诊断" class="headerlink" title="无线 iOS 应用分发故障诊断"></a>无线 iOS 应用分发故障诊断</h4><h5 id="如果无线应用分发失败，并显示“无法下载”信息："><a href="#如果无线应用分发失败，并显示“无法下载”信息：" class="headerlink" title="如果无线应用分发失败，并显示“无法下载”信息："></a>如果无线应用分发失败，并显示“无法下载”信息：</h5><pre><code>1. 请确定应用已正确进行签名。测试方法是使用 Apple Configurator 2 将它安装到设备上，然后查看是否发生错误。
2. 请确定清单文件的链接是否正确，清单文件是否可供网络用户访问。
3. 请确定 .ipa 文件（在清单文件中）的 URL 是否正确，并且该 .ipa 文件是否可供网络用户通过 HTTPS 访问。
</code></pre><h4 id="网络配置要求"><a href="#网络配置要求" class="headerlink" title="网络配置要求"></a>网络配置要求</h4><h5 id="如果设备连接到内网，那么您必须允许它访问以下站点："><a href="#如果设备连接到内网，那么您必须允许它访问以下站点：" class="headerlink" title="如果设备连接到内网，那么您必须允许它访问以下站点："></a>如果设备连接到内网，那么您必须允许它访问以下站点：</h5><p><code>https://ax.init.itunes.apple.com &lt;br/&gt;
使用蜂窝移动网络下载应用时，设备会限制其当前文件大小。如果无法访问此站点，安装可能会失败。</code>    </p>
<p><code>https://ppq.apple.com &lt;br/&gt;
设备会联系此网站，检查用来给预置描述文件签名的分发证书状态。</code></p>
<h4 id="应用更新"><a href="#应用更新" class="headerlink" title="应用更新"></a>应用更新</h4><pre><code>1. 程序内检查 Server 端ipa版本和本地版本，比较是否已发布新版本，并提示用户更新。
2. 如果用户想保留旧版本数据，请告知其不要卸载旧版本，并且新旧版本 bundle-identifier 相同。
3. 更新方法：直接使用应用内部的openURL 方法，打开的是plist文件的web url 带 itms-services描述 链接（真机）。
</code></pre><h4 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h4><h6 id="用户首次打开应用时，系统会通过联系-Apple-的-OCSP-服务器来验证分发证书。如果证书已撤销，应用将不会启动。为了验证状态，设备必须能够访问-ocsp-apple-com。"><a href="#用户首次打开应用时，系统会通过联系-Apple-的-OCSP-服务器来验证分发证书。如果证书已撤销，应用将不会启动。为了验证状态，设备必须能够访问-ocsp-apple-com。" class="headerlink" title="用户首次打开应用时，系统会通过联系 Apple 的 OCSP 服务器来验证分发证书。如果证书已撤销，应用将不会启动。为了验证状态，设备必须能够访问 ocsp.apple.com。"></a>用户首次打开应用时，系统会通过联系 Apple 的 OCSP 服务器来验证分发证书。如果证书已撤销，应用将不会启动。为了验证状态，设备必须能够访问 ocsp.apple.com。</h6><h5 id="OCSP-响应会在设备上缓存一段时间（由-OCSP-服务器指定），当前为-3-到-7-天之间。在重新启动设备和缓存的响应过期之前，将不会再次检查证书的有效性。如果当时收到撤销命令，系统将阻止应用运行。"><a href="#OCSP-响应会在设备上缓存一段时间（由-OCSP-服务器指定），当前为-3-到-7-天之间。在重新启动设备和缓存的响应过期之前，将不会再次检查证书的有效性。如果当时收到撤销命令，系统将阻止应用运行。" class="headerlink" title="OCSP 响应会在设备上缓存一段时间（由 OCSP 服务器指定），当前为 3 到 7 天之间。在重新启动设备和缓存的响应过期之前，将不会再次检查证书的有效性。如果当时收到撤销命令，系统将阻止应用运行。"></a>OCSP 响应会在设备上缓存一段时间（由 OCSP 服务器指定），当前为 3 到 7 天之间。在重新启动设备和缓存的响应过期之前，将不会再次检查证书的有效性。如果当时收到撤销命令，系统将阻止应用运行。</h5><h6 id="【警告】撤销分发证书会导致使用该证书签名的所有应用失效。只有万不得已时才应撤销证书，比如确定专用密钥已丢失或确信证书已遭破解。"><a href="#【警告】撤销分发证书会导致使用该证书签名的所有应用失效。只有万不得已时才应撤销证书，比如确定专用密钥已丢失或确信证书已遭破解。" class="headerlink" title="【警告】撤销分发证书会导致使用该证书签名的所有应用失效。只有万不得已时才应撤销证书，比如确定专用密钥已丢失或确信证书已遭破解。"></a><em>【警告】</em>撤销分发证书会导致使用该证书签名的所有应用失效。只有万不得已时才应撤销证书，比如确定专用密钥已丢失或确信证书已遭破解。</h6><p>示例 iOS 应用 plist 清单文件，可复制，保存为plist格式，也可从 <a href="https://github.com/wangwanjie/SharedResources/blob/master/example_zn.plist" target="_blank" rel="external">这里</a> 下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;  &lt;key&gt;items&lt;/key&gt;  &lt;array&gt;   &lt;dict&gt;     &lt;key&gt;assets&lt;/key&gt;      &lt;array&gt;        &lt;dict&gt;          &lt;key&gt;kind&lt;/key&gt;          &lt;string&gt;software-package&lt;/string&gt;          &lt;key&gt;md5-size&lt;/key&gt;          &lt;integer&gt;10485760&lt;/integer&gt;          &lt;key&gt;md5s&lt;/key&gt;          &lt;array&gt;            &lt;string&gt;41fa64bb7a7cae5a46bfb45821ac8bba&lt;/string&gt;            &lt;string&gt;51fa64bb7a7cae5a46bfb45821ac8bba&lt;/string&gt;          &lt;/array&gt;          &lt;key&gt;url&lt;/key&gt;          &lt;string&gt;https://www.example.com/apps/foo.ipa&lt;/string&gt;        &lt;/dict&gt;        &lt;dict&gt;         &lt;key&gt;kind&lt;/key&gt;         &lt;string&gt;display-image&lt;/string&gt;         &lt;key&gt;needs-shine&lt;/key&gt;         &lt;true/&gt;         &lt;key&gt;url&lt;/key&gt;         &lt;string&gt;https://www.example.com/image.57x57.png&lt;/string&gt;        &lt;/dict&gt;        &lt;dict&gt;         &lt;key&gt;kind&lt;/key&gt;         &lt;string&gt;full-size-image&lt;/string&gt;         &lt;key&gt;md5&lt;/key&gt;         &lt;string&gt;61fa64bb7a7cae5a46bfb45821ac8bba&lt;/string&gt;         &lt;key&gt;needs-shine&lt;/key&gt;         &lt;true/&gt;         &lt;key&gt;url&lt;/key&gt;&lt;string&gt;https://www.example.com/image.512x512.jpg&lt;/string&gt;        &lt;/dict&gt;      &lt;/array&gt;&lt;key&gt;metadata&lt;/key&gt;      &lt;dict&gt;       &lt;key&gt;bundle-identifier&lt;/key&gt;       &lt;string&gt;com.example.fooapp&lt;/string&gt;       &lt;key&gt;bundle-version&lt;/key&gt;       &lt;string&gt;1.0&lt;/string&gt;       &lt;key&gt;kind&lt;/key&gt;       &lt;string&gt;software&lt;/string&gt;       &lt;key&gt;subtitle&lt;/key&gt;       &lt;string&gt;Apple&lt;/string&gt;       &lt;key&gt;title&lt;/key&gt;       &lt;string&gt;Example Corporate App&lt;/string&gt;      &lt;/dict&gt;    &lt;/dict&gt;  &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt;</div></pre></td></tr></table></figure>
<p>作为包体积较小的应用，如以下简单配置即可，从<a href="https://github.com/wangwanjie/SharedResources/blob/master/simple.plist" target="_blank" rel="external">这里</a>下载</p>
<pre><code>&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
    &lt;key&gt;items&lt;/key&gt;
    &lt;array&gt;
        &lt;dict&gt;
            &lt;key&gt;assets&lt;/key&gt;
            &lt;array&gt;
                &lt;dict&gt;
                    &lt;key&gt;kind&lt;/key&gt;
                    &lt;string&gt;software-package&lt;/string&gt;
                    &lt;key&gt;url&lt;/key&gt;
                    &lt;string&gt;https://yourwebsite/appName.ipa&lt;/string&gt;
                &lt;/dict&gt;
                &lt;dict&gt;
                    &lt;key&gt;kind&lt;/key&gt;
                    &lt;string&gt;full-size-image&lt;/string&gt;
                    &lt;key&gt;needs-shine&lt;/key&gt;
                    &lt;true/&gt;
                    &lt;key&gt;url&lt;/key&gt;
                    &lt;string&gt;https://yourwebsite/app_icon_full_size.png&lt;/string&gt;
                &lt;/dict&gt;
                &lt;dict&gt;
                    &lt;key&gt;kind&lt;/key&gt;
                    &lt;string&gt;display-image&lt;/string&gt;
                    &lt;key&gt;needs-shine&lt;/key&gt;
                    &lt;true/&gt;
                    &lt;key&gt;url&lt;/key&gt;
                    &lt;string&gt;https://yourwebsite/app_icon_download.png&lt;/string&gt;
                &lt;/dict&gt;
            &lt;/array&gt;
            &lt;key&gt;metadata&lt;/key&gt;
            &lt;dict&gt;
                &lt;key&gt;bundle-identifier&lt;/key&gt;
                &lt;string&gt; your app bundle id &lt;/string&gt;
                &lt;key&gt;bundle-version&lt;/key&gt;
                &lt;string&gt;shortVersion&lt;/string&gt;
                &lt;key&gt;kind&lt;/key&gt;
                &lt;string&gt;software&lt;/string&gt;
                &lt;key&gt;subtitle&lt;/key&gt;
                &lt;string&gt;欢迎使用&lt;/string&gt;
                &lt;key&gt;title&lt;/key&gt;
                &lt;string&gt; app 名称&lt;/string&gt;
            &lt;/dict&gt;
        &lt;/dict&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre><blockquote>
<p>Author: CoderJay <br>如需转载，请注明出处</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iOS 支持以无线方式安装企业内部应用，而无需使用 iTunes 或 App Store。&lt;/p&gt;
&lt;h5 id=&quot;应用格式要求-ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。&quot;&gt;&lt;a href=&quot;#应用格式要求-ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。&quot; class=&quot;headerlink&quot; title=&quot;应用格式要求:.ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。&quot;&gt;&lt;/a&gt;应用格式要求:.ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。&lt;/h5&gt;&lt;/blockquote&gt;
&lt;h4 id=&quot;无线安装要求：&quot;&gt;&lt;a href=&quot;#无线安装要求：&quot; class=&quot;headerlink&quot; title=&quot;无线安装要求：&quot;&gt;&lt;/a&gt;无线安装要求：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. XML 清单文件（一个 plist 配置文件）
2. 可让设备访问 Apple iTunes 服务器的网络配置（设备要能连接互联网，因为要校验）
3. 对于 iOS 7.1 或更高版本， plist 文件和 ipa 文件需要放在 HTTPS 的服务器上
&lt;/code&gt;&lt;/pre&gt;&lt;h6 id=&quot;为了安装应用，用户使用特殊的-URL-前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。&quot;&gt;&lt;a href=&quot;#为了安装应用，用户使用特殊的-URL-前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。&quot; class=&quot;headerlink&quot; title=&quot;为了安装应用，用户使用特殊的 URL 前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。&quot;&gt;&lt;/a&gt;为了安装应用，用户使用特殊的 URL 前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。&lt;/h6&gt;
    
    </summary>
    
      <category term="iOS" scheme="https://wangwanjie.github.io/categories/iOS/"/>
    
    
      <category term="打包" scheme="https://wangwanjie.github.io/tags/%E6%89%93%E5%8C%85/"/>
    
      <category term="发布" scheme="https://wangwanjie.github.io/tags/%E5%8F%91%E5%B8%83/"/>
    
  </entry>
  
  <entry>
    <title>Mac查看CPU具体型号</title>
    <link href="https://wangwanjie.github.io/2016/12/16/Mac%E6%9F%A5%E7%9C%8BCPU%E5%85%B7%E4%BD%93%E5%9E%8B%E5%8F%B7/"/>
    <id>https://wangwanjie.github.io/2016/12/16/Mac查看CPU具体型号/</id>
    <published>2016-12-16T12:17:48.000Z</published>
    <updated>2017-03-16T16:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>运行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl machdep.cpu.brand_string</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;运行以下命令:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
    
    </summary>
    
      <category term="Mac" scheme="https://wangwanjie.github.io/categories/Mac/"/>
    
    
      <category term="Mac使用" scheme="https://wangwanjie.github.io/tags/Mac%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>OC用AFN做Soap请求webService</title>
    <link href="https://wangwanjie.github.io/2016/01/10/OC%E7%94%A8AFN%E5%81%9ASoap%E8%AF%B7%E6%B1%82webService/"/>
    <id>https://wangwanjie.github.io/2016/01/10/OC用AFN做Soap请求webService/</id>
    <published>2016-01-09T19:07:22.000Z</published>
    <updated>2017-03-17T07:14:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，标题有点拗口。我平时一般不发帖子，因为感觉太花时间了，还是喜欢宅着研究技术。但这个帖子网上资料还是没有很详细的，周末了明天休息，所以现在写下来总结一下，也希望能帮助有这方面需求的开发者朋友，如果错误之处还请谅解，欢迎指出。排版大家就不要在意了，我也不清楚这个支不支持markdown，就直接手动简单排一下。</p>
<p>进入主题，最近公司做一个新项目，后台是webService，要做iOS版本的客户端，由于我以前不怎么了解这方面，所以云里雾里得摸索了两天，因为后台人员也不清楚我具体要传什么给他，所以。。。。我就两边跑。。。。最终我确定问题还是在于后端，今天上午完美解决，对webService和WSDL以及CXF有了个大概的了解。</p>
<a id="more"></a>
<p>我就不做过多的概念介绍了，我很懒不愿复制粘贴，只要说一些细节让大家少走弯路就可以。</p>
<p>在继续往下之前你需要先去了解一些概念：SOAP、WSDL、CXF，和他们之间的关系。这里我觉得这个帖子比较好，推荐一下，Web Service笔记（三）：wsdl 与 soap协议详解 , 对XML或者HTML稍微有点了解看了这篇文章之后对WSDL基本都能大体了解了，这里也感谢一下作者。</p>
<p>假定现在你对它们有个大体的了解，SOAP请求就是你发一段XML给后台，然后后台返回数据给你，它是通用的，参数后台会在XML中提取，所以我们在这个过程中其实就是在于传的XML的内容，本文也会讲到中间遇到的一些细节。</p>
<p>首先不要把它想的很复杂，弄通了封装一下，其实这种方式传的东西个人感觉和普通的GET/POST差不多，甚或更方便。WSDL文档由于我现在不在公司连不上服务器所以就不介绍</p>
<h4 id="首先XML内容，你的SOAP协议版本要和后台一致，不然后台报错会说版本不一致之类的，这里列出，请自行对比。"><a href="#首先XML内容，你的SOAP协议版本要和后台一致，不然后台报错会说版本不一致之类的，这里列出，请自行对比。" class="headerlink" title="首先XML内容，你的SOAP协议版本要和后台一致，不然后台报错会说版本不一致之类的，这里列出，请自行对比。"></a>首先XML内容，你的SOAP协议版本要和后台一致，不然后台报错会说版本不一致之类的，这里列出，请自行对比。</h4><h2 id="SOAP-1-1"><a href="#SOAP-1-1" class="headerlink" title="SOAP 1.1"></a>SOAP 1.1</h2><h3 id="以下是-SOAP-1-1-请求和响应示例。所显示的占位符需替换为实际值。"><a href="#以下是-SOAP-1-1-请求和响应示例。所显示的占位符需替换为实际值。" class="headerlink" title="以下是 SOAP 1.1 请求和响应示例。所显示的占位符需替换为实际值。"></a>以下是 SOAP 1.1 请求和响应示例。所显示的占位符需替换为实际值。</h3><ul>
<li>请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">POST /WebServices/MobileCodeWS.asmx HTTP/1.1</div><div class="line">Host: webservice.webxml.com.cn</div><div class="line">Content-Type: text/xml; charset=utf-8</div><div class="line">Content-Length: length</div><div class="line">SOAPAction: &quot;http://WebXml.com.cn/getMobileCodeInfo&quot;</div><div class="line"></div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</div><div class="line">  &lt;soap:Body&gt;</div><div class="line">    &lt;getMobileCodeInfo xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;mobileCode&gt;string&lt;/mobileCode&gt;</div><div class="line">      &lt;userID&gt;string&lt;/userID&gt;</div><div class="line">    &lt;/getMobileCodeInfo&gt;</div><div class="line">  &lt;/soap:Body&gt;</div><div class="line">&lt;/soap:Envelope&gt;</div></pre></td></tr></table></figure>
<ul>
<li>响应</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: text/xml; charset=utf-8</div><div class="line">Content-Length: length</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</div><div class="line">  &lt;soap:Body&gt;</div><div class="line">    &lt;getMobileCodeInfoResponse xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;getMobileCodeInfoResult&gt;string&lt;/getMobileCodeInfoResult&gt;</div><div class="line">    &lt;/getMobileCodeInfoResponse&gt;</div><div class="line">  &lt;/soap:Body&gt;</div><div class="line">&lt;/soap:Envelope&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="SOAP-1-2"><a href="#SOAP-1-2" class="headerlink" title="SOAP 1.2"></a>SOAP 1.2</h2><h3 id="以下是-SOAP-1-2-请求和响应示例。所显示的占位符需替换为实际值。"><a href="#以下是-SOAP-1-2-请求和响应示例。所显示的占位符需替换为实际值。" class="headerlink" title="以下是 SOAP 1.2 请求和响应示例。所显示的占位符需替换为实际值。"></a>以下是 SOAP 1.2 请求和响应示例。所显示的占位符需替换为实际值。</h3><ul>
<li>请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST /WebServices/MobileCodeWS.asmx HTTP/1.1</div><div class="line">Host: webservice.webxml.com.cn</div><div class="line">Content-Type: application/soap+xml; charset=utf-8</div><div class="line">Content-Length: length</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;soap12:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap12=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;</div><div class="line">  &lt;soap12:Body&gt;</div><div class="line">    &lt;getMobileCodeInfo xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;mobileCode&gt;string&lt;/mobileCode&gt;</div><div class="line">      &lt;userID&gt;string&lt;/userID&gt;</div><div class="line">    &lt;/getMobileCodeInfo&gt;</div><div class="line">  &lt;/soap12:Body&gt;</div><div class="line">&lt;/soap12:Envelope&gt;</div></pre></td></tr></table></figure>
<ul>
<li>响应</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">Content-Type: application/soap+xml; charset=utf-8</div><div class="line">Content-Length: length</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;soap12:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap12=&quot;http://www.w3.org/2003/05/soap-envelope&quot;&gt;</div><div class="line">  &lt;soap12:Body&gt;</div><div class="line">    &lt;getMobileCodeInfoResponse xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;getMobileCodeInfoResult&gt;string&lt;/getMobileCodeInfoResult&gt;</div><div class="line">    &lt;/getMobileCodeInfoResponse&gt;</div><div class="line">  &lt;/soap12:Body&gt;</div><div class="line">&lt;/soap12:Envelope&gt;</div></pre></td></tr></table></figure>
<h3 id="直接说注意点，拿SOAP-1-1-请求做例子，要传的XML文档为"><a href="#直接说注意点，拿SOAP-1-1-请求做例子，要传的XML文档为" class="headerlink" title="直接说注意点，拿SOAP 1.1 请求做例子，要传的XML文档为:"></a><strong>直接说注意点，拿SOAP 1.1 请求做例子，要传的XML文档为:</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;soap:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;</div><div class="line">  &lt;soap:Body&gt;</div><div class="line">    &lt;getMobileCodeInfo xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;mobileCode&gt;string&lt;/mobileCode&gt;</div><div class="line">      &lt;userID&gt;string&lt;/userID&gt;</div><div class="line">    &lt;/getMobileCodeInfo&gt;</div><div class="line">  &lt;/soap:Body&gt;</div><div class="line">&lt;/soap:Envelope&gt;</div></pre></td></tr></table></figure>
<p><strong><soap: body=""></soap:></strong> 标签以外的不用改，head一般也不用传，要调用的方法和参数都包在body里面，比如这个例子中， <strong>getMobileCodeInfo</strong> 是WSDL文档发布的你要调用的方法名，其后接的xmlns是你wsdl文档中对应的 <strong>targetNameSpace</strong> ，这个和你JAVA中的 <strong>package</strong> 名对应，比如你后台JAVA代码中该方法中import的package为 <code>com.xxxx.oooo</code> 那么这里的xmlns就是 <code>ooo.xxxx.com</code> ，<code>mobileCode和userID</code>是这个方法中接收的参数名，那么也就是说该方法在其JAVA后台大概是这个样子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public getMobileCodeInfo (@WebParam(name=&quot;mobileCode&quot; , name=&quot;userID&quot;) String mobileCode, String userID)</div></pre></td></tr></table></figure>
<p>对应的WSDL中该operation的input下也应该有两个name就是mobileCode和userID，注意@WebParam(name=”mobileCode” , name=”userID”) 不能少，这个注解让后台认识参数名，少了后台会一直报unexpected element ，我们后台一开始就少了这个，搞了很久。这种情况是参数分开传的情况，有的后台的参数直接一个request，但是里面包含有几个键值对也其实就是相当于几个参数，刚接触的新手在这里很容易绕弯，比如我后台有这个个方法  public login (WebParam(name=”req” ) String req) ，很明显这里只接一个参数，而且叫做req，但是这个请求就是需要账户名和密码，所以在对应的xml中文档应这样写body中内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;soap12:Body&gt;</div><div class="line">    &lt;login xmlns=&quot;http://WebXml.com.cn/&quot;&gt;</div><div class="line">      &lt;req&gt;&#123;@&quot;userNameKey&quot;: zhangsan, @&quot;password&quot;: pwdpwd&#125;&lt;/req&gt;</div><div class="line">    &lt;/login&gt;</div><div class="line">&lt;/soap12:Body&gt;</div></pre></td></tr></table></figure>
<p>最后请求地址就是你的wsdl文档中的Endpoint address地址，请求体就是该XML，发个POST请求就完事啦，这里又有事了，本人是强迫症，因为一开始就用的AFN请求，咋请求咋报错，于是跟着网上找的DEMO换NSURLConnection，一不小心成功了一次，但是这个iOS已经废弃了不喜欢，于是用NSURLSession，恩也成功了，但是还是感觉好麻烦，发个NSURLSession请求soap的代码:</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"> NSString *soapStr = [NSString stringWithFormat:@&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\</div><div class="line"> &lt;soap:Envelope xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xmlns:xsd=\&quot;http://www.w3.org/2001/XMLSchema\&quot;\</div><div class="line"> xmlns:soap=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot;&gt;\</div><div class="line"> &lt;soap:Header&gt;\</div><div class="line"> &lt;/soap:Header&gt;\</div><div class="line"> &lt;soap:Body&gt;\</div><div class="line"> &lt;login xmlns=\&quot;targetNameSpace地址/\&quot;&gt;\</div><div class="line"> &lt;param1&gt;test&lt;/param1&gt;\</div><div class="line"> &lt;param2&gt;test&lt;/param2&gt;\</div><div class="line"> &lt;/login&gt;\</div><div class="line"> &lt;/soap:Body&gt;\</div><div class="line"> &lt;/soap:Envelope&gt;&quot;];</div><div class="line">  </div><div class="line"> NSURL *url=[NSURL URLWithString:@&quot;你自己wsdl文档中对应的endpoint address&quot;];</div><div class="line">  </div><div class="line"> NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:url];</div><div class="line">  </div><div class="line"> // 访问方式</div><div class="line"> [request setHTTPMethod:@&quot;POST&quot;];</div><div class="line">  </div><div class="line"> // 设置请求头(请求头也可以不设置，前两个设不设置都一样，应该默认的，但是SOAPAction我怎么都设置不对，不设置也可以，干脆不设置了)</div><div class="line"> // [request addValue:@&quot;text/xml; charset=utf-8&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class="line">//  [request addValue:[NSString stringWithFormat:@&quot;%zd&quot;, soapStr.length] forHTTPHeaderField:@&quot;Content-Length&quot;];</div><div class="line"> //    [request addValue:@&quot;nameSpace/methodName&quot; forHTTPHeaderField:@&quot;SOAPAction&quot;];</div><div class="line">  </div><div class="line"> // body内容</div><div class="line"> [request setHTTPBody:[soapStr dataUsingEncoding:NSUTF8StringEncoding]];</div><div class="line">  </div><div class="line"> NSURLSession *session = [NSURLSession sharedSession];</div><div class="line">  </div><div class="line"> NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</div><div class="line"> NSString *result = [[NSString alloc] initWithData:data  encoding:NSUTF8StringEncoding];</div><div class="line">  </div><div class="line"> WJLog(@&quot;进入成功回调Session-----结果：%@----请求地址：%@&quot;, result, response.URL);</div><div class="line">  </div><div class="line"> if (error) &#123;</div><div class="line"> WJLog(@&quot;Session----失败----%@&quot;, error.localizedDescription);</div><div class="line"> &#125;</div><div class="line"> &#125;];</div><div class="line">  </div><div class="line"> [task resume];</div></pre></td></tr></table></figure>
<p>经过和后台七改八改都无果，我干脆自己了解这些文档规范，在上午确定我操作没错之后，直接说后台那边有问题，然后后台改，重启服务器我请求没有任何进展，最后竟然是什么问题你们知道么。。前一天其实我已经传对了XML，只是后台改动的代码放错了地方，只放到了正式服没有放测试服，我也是，，，醉了，，不过也好，要是那么顺畅我就不会去过多了解这方面了。<br>好了，要传什么，注意点都讲了，现在到了客户端的问题，用官方SDK请求是不是感觉很麻烦？是的，对于用惯了AFN或者自己封装的网络请求工具类的人来说如果每次都要写这多么代码发一次请求太痛苦了，于是我想可不可以用AFN请求SOAP，一开始想用manager发请求，直接把XML当params发POST肯定是直接挂了，于是想要设置HTTPBody要不用AFHTTPRequestOperation？没错这样确实可以，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">NSMutableURLRequest *request=[NSMutableURLRequest requestWithURL:url];</div><div class="line"> [request setHTTPMethod:@&quot;POST&quot;];</div><div class="line"> [request setHTTPBody:[soapStr dataUsingEncoding:NSUTF8StringEncoding]];</div><div class="line">  </div><div class="line"> AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:request];</div><div class="line">  </div><div class="line"> // 设置返回数据格式</div><div class="line"> operation.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">  </div><div class="line"> [operation setCompletionBlockWithSuccess:^(AFHTTPRequestOperation * _Nonnull operation, id  _Nonnull responseObject) &#123;</div><div class="line"> NSString *result = [[NSString alloc] initWithData:responseObject  encoding:NSUTF8StringEncoding];</div><div class="line"> WJLog(@&quot;AFN--成功--结果：%@----返回数据%@&quot;, result, responseObject);</div><div class="line"> &#125; failure:^(AFHTTPRequestOperation * _Nonnull operation, NSError * _Nonnull error) &#123;</div><div class="line"> WJLog(@&quot;AFN--失败--%@&quot;, error.localizedDescription);</div><div class="line"> &#125;];</div><div class="line">  </div><div class="line"> [operation start];</div></pre></td></tr></table></figure>
<p>这一看感觉和NSURLSession没多大差别，还是想用manager，关键问题就在于设置request的HTTBbody为XML，但是AFHTTPSessionManager已经把request封装了，默认用的params，怎么改？于是想改动或者添加AFN内部方法，但是总感觉这样不好，万一更新库了又要搞一遍。于是想能否拦截这个request，或者通过manager.requestSerializer设置HTTPBody，敲set浏览一下没有HTTPBody字眼的，用KVC也不行，那样还是相当于把XML当params传了，伤心绝望之时看到这个方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> [manager.requestSerializer setQueryStringSerializationWithBlock:^NSString *(NSURLRequest *request, NSDictionary *parameters, NSError *__autoreleasing *error) &#123;</div><div class="line">   // </div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>一看里面有request 有 params 高兴了，说不定在这里能拦截，于是直接写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[manager.requestSerializer setQueryStringSerializationWithBlock:^NSString *(NSURLRequest *request, NSDictionary *parameters, NSError *__autoreleasing *error) &#123;</div><div class="line">    return soapStr;</div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>请求成功，happy。<br>接下来另一个问题了，简单封装一下，我收到的是二进制，所以把AFN封装成了个工具类，供大家参考，欢迎提出改进</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*  请求SOAP，返回NSData</div><div class="line">*</div><div class="line">*  @param url      请求地址</div><div class="line">*  @param soapBody soap的XML中方法和参数段</div><div class="line">*  @param success  成功block</div><div class="line">*  @param failure  失败block</div><div class="line">*/</div><div class="line">+ (void)SOAPData:(NSString *)url soapBody:(NSString *)soapBody success:(void (^)(id responseObject))success failure:(void(^)(NSError *error))failure &#123;</div><div class="line">     </div><div class="line">    NSString *soapStr = [NSString stringWithFormat:</div><div class="line">                         @&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;\</div><div class="line">                         &lt;soap:Envelope xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot; xmlns:xsd=\&quot;http://www.w3.org/2001/XMLSchema\&quot;\</div><div class="line">                         xmlns:soap=\&quot;http://schemas.xmlsoap.org/soap/envelope/\&quot;&gt;\</div><div class="line">                         &lt;soap:Header&gt;\</div><div class="line">                         &lt;/soap:Header&gt;\</div><div class="line">                         &lt;soap:Body&gt;%@&lt;/soap:Body&gt;\</div><div class="line">                         &lt;/soap:Envelope&gt;&quot;,soapBody];</div><div class="line">     </div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    manager.responseSerializer = [AFXMLParserResponseSerializer serializer];</div><div class="line">     </div><div class="line">    // 设置请求超时时间</div><div class="line">    manager.requestSerializer.timeoutInterval = 30;</div><div class="line">     </div><div class="line">    // 返回NSData</div><div class="line">    manager.responseSerializer = [AFHTTPResponseSerializer serializer];</div><div class="line">     </div><div class="line">    // 设置请求头，也可以不设置</div><div class="line">    [manager.requestSerializer setValue:@&quot;application/soap+xml; charset=utf-8&quot; forHTTPHeaderField:@&quot;Content-Type&quot;];</div><div class="line">    [manager.requestSerializer setValue:[NSString stringWithFormat:@&quot;%zd&quot;, soapStr.length] forHTTPHeaderField:@&quot;Content-Length&quot;];</div><div class="line"> </div><div class="line">    // 设置HTTPBody</div><div class="line">    [manager.requestSerializer setQueryStringSerializationWithBlock:^NSString *(NSURLRequest *request, NSDictionary *parameters, NSError *__autoreleasing *error) &#123;</div><div class="line">        return soapStr;</div><div class="line">    &#125;];</div><div class="line">     </div><div class="line">    [manager POST:url parameters:soapStr success:^(NSURLSessionDataTask * _Nonnull task, id  _Nonnull responseObject) &#123;</div><div class="line">        // 把返回的二进制数据转为字符串</div><div class="line">         NSString *result = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];</div><div class="line">         </div><div class="line">        // 利用正则表达式取出&lt;return&gt;&lt;/return&gt;之间的字符串</div><div class="line">        NSRegularExpression *regular = [[NSRegularExpression alloc] initWithPattern:@&quot;(?&lt;=return\\&gt;).*(?=&lt;/return)&quot; options:NSRegularExpressionCaseInsensitive error:nil];</div><div class="line">         </div><div class="line">        NSDictionary *dict = [NSDictionary dictionary];</div><div class="line">        for (NSTextCheckingResult *checkingResult in [regular matchesInString:result options:0 range:NSMakeRange(0, result.length)]) &#123;</div><div class="line">             </div><div class="line">            // 得到字典</div><div class="line">            dict = [NSJSONSerialization JSONObjectWithData:[[result substringWithRange:checkingResult.range] dataUsingEncoding:NSUTF8StringEncoding] options:NSJSONReadingMutableLeaves error:nil];</div><div class="line">        &#125;</div><div class="line">        // 请求成功并且结果有值把结果传出去</div><div class="line">        if (success &amp;&amp; dict) &#123;</div><div class="line">            success(dict);</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">    &#125; failure:^(NSURLSessionDataTask * _Nullable task, NSError * _Nonnull error) &#123;</div><div class="line">        if (failure) &#123;</div><div class="line">            failure(error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原文地址：<a href="http://www.cocoachina.com/bbs/read.php?tid-456019.html" target="_blank" rel="external">OC用AFN做Soap请求webService</a></p>
<h3 id="差不多了，如果有什么问题指正欢迎大家留言。排版真的很丑，大家见谅，洗洗睡了。"><a href="#差不多了，如果有什么问题指正欢迎大家留言。排版真的很丑，大家见谅，洗洗睡了。" class="headerlink" title="差不多了，如果有什么问题指正欢迎大家留言。排版真的很丑，大家见谅，洗洗睡了。"></a>差不多了，如果有什么问题指正欢迎大家留言。排版真的很丑，大家见谅，洗洗睡了。</h3><blockquote>
<p>Author: CoderJay <br>如需转载，请注明出处</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，标题有点拗口。我平时一般不发帖子，因为感觉太花时间了，还是喜欢宅着研究技术。但这个帖子网上资料还是没有很详细的，周末了明天休息，所以现在写下来总结一下，也希望能帮助有这方面需求的开发者朋友，如果错误之处还请谅解，欢迎指出。排版大家就不要在意了，我也不清楚这个支不支持markdown，就直接手动简单排一下。&lt;/p&gt;
&lt;p&gt;进入主题，最近公司做一个新项目，后台是webService，要做iOS版本的客户端，由于我以前不怎么了解这方面，所以云里雾里得摸索了两天，因为后台人员也不清楚我具体要传什么给他，所以。。。。我就两边跑。。。。最终我确定问题还是在于后端，今天上午完美解决，对webService和WSDL以及CXF有了个大概的了解。&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://wangwanjie.github.io/categories/Objective-C/"/>
    
    
      <category term="AFN" scheme="https://wangwanjie.github.io/tags/AFN/"/>
    
      <category term="Soap" scheme="https://wangwanjie.github.io/tags/Soap/"/>
    
      <category term="WebService" scheme="https://wangwanjie.github.io/tags/WebService/"/>
    
  </entry>
  
  <entry>
    <title>ASI 和 AFN 区别</title>
    <link href="https://wangwanjie.github.io/2015/10/06/ASI-%E5%92%8C-AFN-%E5%8C%BA%E5%88%AB/"/>
    <id>https://wangwanjie.github.io/2015/10/06/ASI-和-AFN-区别/</id>
    <published>2015-10-06T03:51:36.000Z</published>
    <updated>2017-03-17T07:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-底层实现"><a href="#一-底层实现" class="headerlink" title="一 底层实现"></a>一 底层实现</h3><ul>
<li>AFN的底层基于OC的NSURLConnection和NSURLSession</li>
<li>ASI的底层基于纯C语言的CFNetwork框架</li>
<li>ASI的运行性能 高于 AFN</li>
</ul>
<h3 id="二-对服务器返回的数据处理"><a href="#二-对服务器返回的数据处理" class="headerlink" title="二 对服务器返回的数据处理"></a>二 对服务器返回的数据处理</h3><ul>
<li>ASI没有直接提供对服务器数据处理的方式，直接返回data\string</li>
<li>AFN提供了多种对服务器数据处理的方式<ul>
<li>JSON处理</li>
<li>XML处理</li>
<li>其他处理</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="三-监听请求的过程"><a href="#三-监听请求的过程" class="headerlink" title="三 监听请求的过程"></a>三 监听请求的过程</h3><ul>
<li><p>AFN提供了success和failure两个block来监听请求的过程（只能监听成功和失败）</p>
<ul>
<li>success : 请求成功后调用</li>
<li>failure : 请求失败后调用</li>
</ul>
</li>
<li><p>ASI提供了3套方案，每一套方案都能监听请求的完整过程<br>（监听请求开始、接收到响应头信息、接受到具体数据、接受完毕、请求失败）</p>
<ul>
<li>成为代理，遵守协议，实现协议中的代理方法</li>
<li>成为代理，不遵守协议，自定义代理方法</li>
<li>设置block</li>
</ul>
</li>
</ul>
<h3 id="四-在文件下载和文件上传的使用难易度"><a href="#四-在文件下载和文件上传的使用难易度" class="headerlink" title="四 在文件下载和文件上传的使用难易度"></a>四 在文件下载和文件上传的使用难易度</h3><ul>
<li><p>AFN</p>
<ul>
<li>不容易监听下载进度和上传进度</li>
<li>不容易实现断点续传</li>
<li>一般只用来下载不大的文件</li>
</ul>
</li>
<li><p>ASI</p>
<ul>
<li>非常容易实现下载和上传</li>
<li>非常容易监听下载进度和上传进度</li>
<li>非常容易实现断点续传</li>
<li>下载或大或小的文件都行</li>
</ul>
</li>
</ul>
<h3 id="五-ASI提供了更多的实用功能"><a href="#五-ASI提供了更多的实用功能" class="headerlink" title="五 ASI提供了更多的实用功能"></a>五 ASI提供了更多的实用功能</h3><ul>
<li>控制圈圈要不要在请求过程中转</li>
<li>可以轻松地设置请求之间的依赖：每一个请求都是一个 <strong>NSOperation</strong> 对象</li>
<li>可以统一管理所有请求（还专门提供了一个叫做 <strong>ASINetworkQueue</strong> 来管理所有的请求对象）</li>
<li>暂停\恢复\取消所有的请求</li>
<li>监听整个队列中所有请求的下载进度和上传进度</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-底层实现&quot;&gt;&lt;a href=&quot;#一-底层实现&quot; class=&quot;headerlink&quot; title=&quot;一 底层实现&quot;&gt;&lt;/a&gt;一 底层实现&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AFN的底层基于OC的NSURLConnection和NSURLSession&lt;/li&gt;
&lt;li&gt;ASI的底层基于纯C语言的CFNetwork框架&lt;/li&gt;
&lt;li&gt;ASI的运行性能 高于 AFN&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;二-对服务器返回的数据处理&quot;&gt;&lt;a href=&quot;#二-对服务器返回的数据处理&quot; class=&quot;headerlink&quot; title=&quot;二 对服务器返回的数据处理&quot;&gt;&lt;/a&gt;二 对服务器返回的数据处理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASI没有直接提供对服务器数据处理的方式，直接返回data\string&lt;/li&gt;
&lt;li&gt;AFN提供了多种对服务器数据处理的方式&lt;ul&gt;
&lt;li&gt;JSON处理&lt;/li&gt;
&lt;li&gt;XML处理&lt;/li&gt;
&lt;li&gt;其他处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="https://wangwanjie.github.io/categories/Objective-C/"/>
    
    
      <category term="网络" scheme="https://wangwanjie.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="网络协议" scheme="https://wangwanjie.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
