<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>8505处理器家庭组网PVE下iKuai、OpenWrt、CentOS、DSM、Windows等系统All In One实践记录</title>
    <url>/2023/05/20/8505%E5%A4%84%E7%90%86%E5%99%A8%E5%AE%B6%E5%BA%AD%E7%BB%84%E7%BD%91PVE%E4%B8%8BiKuai%E3%80%81OpenWrt%E3%80%81CentOS%E3%80%81DSM%E3%80%81Windows%E7%AD%89%E7%B3%BB%E7%BB%9FAll-In-One%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在平日生活和工作中，家庭网络环境的管理和维护始终是一个重要但容易被忽视的问题。智能家居设备越来越多，手机电脑电视等设备不断增多，对于网络的需求越来越高，比如数据同步，路由管理，电视观看内网高清影院等，这些都需要一个稳定且强大的家庭网络环境来支持。</p>
<span id="more"></span>

<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>在我开始进行家庭组网实践前，我对多种虚拟化解决方案进行了深度研究和对比。主要考虑了PVE (Proxmox Virtual Environment)、ESXi和Unraid这三种解决方案。以下是我对比的几个重点：</p>
<h3 id="1-PVE-Proxmox-Virtual-Environment"><a href="#1-PVE-Proxmox-Virtual-Environment" class="headerlink" title="1. PVE (Proxmox Virtual Environment)"></a>1. PVE (Proxmox Virtual Environment)</h3><ul>
<li><strong>开源和自由：</strong>PVE是完全开源的，用户可以自由地使用和修改。这是我选择PVE的主要原因之一，因为这意味着我可以更好地控制我自己的系统，并可以参考和学习社区中的众多资源。</li>
<li><strong>丰富的特性：</strong>PVE支持KVM&#x2F;QEMU和LXC的虚拟化，提供了一个方便的Web界面来管理虚拟机和容器。它还支持硬件直通，可以使虚拟机直接访问硬件资源，对我来说非常重要。</li>
<li><strong>稳定性：</strong>PVE被广泛认为是非常稳定的系统，这对我来说很重要，因为我需要我的家庭网络环境始终保持在线。</li>
</ul>
<h3 id="2-ESXi"><a href="#2-ESXi" class="headerlink" title="2. ESXi"></a>2. ESXi</h3><ul>
<li><strong>成熟和广泛使用：</strong>ESXi是VMware公司的产品，有很多大公司在使用，因此有很高的稳定性和可靠性。</li>
<li><strong>企业级特性：</strong>ESXi提供了许多企业级的特性，如vMotion、High Availability等。</li>
<li><strong>商业软件：</strong>虽然有免费版本，但是许多高级特性需要购买许可证才能使用，而且它的封闭性限制了一些自定义和修改。</li>
</ul>
<h3 id="3-Unraid"><a href="#3-Unraid" class="headerlink" title="3. Unraid"></a>3. Unraid</h3><ul>
<li><strong>易用性：</strong>Unraid以其用户友好的界面和简单的设置而受到许多家庭用户的喜爱。</li>
<li><strong>弹性存储：</strong>Unraid的最大特点是它的弹性存储功能，可以很容易地添加或替换硬盘。</li>
<li><strong>插件系统：</strong>Unraid有一个活跃的插件社区，可以轻松地添加新功能。</li>
</ul>
<p>经过对比，我选择了PVE，主要是因为它的开源性，稳定性、使用者广泛和配置简单的特性，这些特性正好满足了我对家庭网络环境的需求。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><h3 id="PVE安装"><a href="#PVE安装" class="headerlink" title="PVE安装"></a>PVE安装</h3><p>首先，我在8505小主机上安装了PVE，这样我就可以在同一台硬件上运行多个操作系统。<br>首先，我们需要下载<a href="https://pve.proxmox.com/wiki/Downloads">PVE的ISO镜像</a>，然后将镜像放入Ventoy数据分区中。重启小主机从这个iso启动。</p>
<h4 id="安装注意事项"><a href="#安装注意事项" class="headerlink" title="安装注意事项"></a>安装注意事项</h4><img src="/images/aio/pve_install.png"/>

<ul>
<li>管理网口尽量选择第一或者最后一个。比较好分辨</li>
<li>hostname 这里可以随意填、装好后也可以修改</li>
<li>ip 地址是pve安装好后用于进入后台服务的 ip</li>
<li>网关填写同一网段的，比如 192.168.18.1，与你后面要配置的路由器DHCP网段一致</li>
<li>这个 DNS 是在配置好 pve 后决定 pve 能否正确域名解析的关键，我们可用 8.8.8.8 或者 1.1.1.1</li>
</ul>
<p>如果安装好后想修改这些配置，不用重装pve，ssh连接修改这些文件对应的地方即可</p>
<h5 id="修改-IP-地址、网关以及管理网口"><a href="#修改-IP-地址、网关以及管理网口" class="headerlink" title="修改 IP 地址、网关以及管理网口"></a>修改 IP 地址、网关以及管理网口</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">auto lo
iface lo inet loopback
iface enp3s0 inet manual
auto vmbr0
iface vmbr0 inet static
        address <span class="token number">192.168</span>.18.18/24 <span class="token comment"># 管理 ip</span>
        gateway <span class="token number">192.168</span>.18.1 <span class="token comment"># 网关</span>
        bridge-ports enp3s0 <span class="token comment"># 管理网口， lspci | grep net 查看所有网口，或者看下方其他的</span>
        bridge-stp off
        bridge-fd <span class="token number">0</span>
iface enp4s0 inet manual
iface enp5s0 inet manual
iface enp6s0 inet manual
iface enp7s0 inet manual
iface enp8s0 inet manual<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="修改终端提示的-ip-和端口"><a href="#修改终端提示的-ip-和端口" class="headerlink" title="修改终端提示的 ip 和端口"></a>修改终端提示的 ip 和端口</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/issue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------------------------------------------------------------------

Welcome to the Proxmox Virtual Environment. Please use your web browser to 
configure this server - connect to:

  https://192.168.18.18:8006/

------------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="修改本地-hosts"><a href="#修改本地-hosts" class="headerlink" title="修改本地 hosts"></a>修改本地 hosts</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1 localhost.localdomain localhost
<span class="token number">192.168</span>.18.18 pve.vanjay.cn pve

<span class="token comment"># The following lines are desirable for IPv6 capable hosts</span>

::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="修改-DNS"><a href="#修改-DNS" class="headerlink" title="修改 DNS"></a>修改 DNS</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@pve:~<span class="token comment"># cat /etc/resolv.conf</span>
search vanjay.cn
<span class="token comment"># nameserver 202.96.134.33</span>
nameserver <span class="token number">114.114</span>.114.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="硬件直通支持"><a href="#硬件直通支持" class="headerlink" title="硬件直通支持"></a>硬件直通支持</h4><p>在虚拟化环境中，硬件直通是一种非常重要的技术。它允许虚拟机直接访问物理硬件，从而大大提高了虚拟机的性能。对于那些需要高性能计算的应用（比如家庭网络环境中的路由器或NAS），硬件直通是非常必要的。</p>
<p>对于使用Intel CPU的主机，我们需要在GRUB的配置文件中添加 intel_iommu&#x3D;on 参数来启用硬件直通。具体步骤如下：</p>
<ul>
<li>通过<code>SSH</code>连接到PVE主机。</li>
<li>编辑<code>GRUB</code>的配置文件，<code>nano /etc/default/grub</code>。</li>
<li>找到<code>GRUB_CMDLINE_LINUX_DEFAULT</code>项，添加 <code>intel_iommu=on</code>。</li>
<li>保存并退出编辑器。</li>
<li>更新GRUB，update-grub。</li>
<li>重启PVE主机。</li>
</ul>
<p>在此过程中，<code>intel_iommu=on</code> 的设置实质上告诉系统启用IOMMU，这是实现硬件直通的关键技术。</p>
<p>接下来，我们需要配置系统加载VFIO模块，VFIO模块可以让虚拟机直接访问并控制硬件。操作如下：</p>
<ul>
<li>编辑 <code>/etc/module</code> 文件。</li>
<li>添加以下内容：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vfio
vfio_iommu_type1
vfio_pci
vfio_virqfd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>保存并退出编辑器。</li>
<li>更新内核参数<code>update-initramfs -k all -u</code>。</li>
<li>重启PVE主机。</li>
</ul>
<p>这里的VFIO模块，包括vfio，vfio_iommu_type1，vfio_pci，vfio_virqfd等，都是为了支持硬件直通的必要模块。他们在系统启动时被加载，使得PVE可以将特定的硬件资源直接分配给特定的虚拟机。</p>
<p>这样设置之后，PVE的硬件直通就配置成功了。我们可以在创建虚拟机时选择将硬件资源直通给虚拟机，从而提高虚拟机的性能。对于需要高性能的虚拟机，比如爱快路由器或黑群晖NAS，这是非常有帮助的。</p>
<p>如果你使用的是AMD的CPU，硬件直通的配置过程可能会有所不同，建议你自行搜索相关教程进行配置。</p>
<h5 id="验证是否开启了-iommu"><a href="#验证是否开启了-iommu" class="headerlink" title="验证是否开启了 iommu"></a>验证是否开启了 iommu</h5><p>出现 <code>IOMMU enabled</code> 即已开启</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@pve:~<span class="token comment"># dmesg | grep -e DMAR -e IOMMU</span>
<span class="token punctuation">[</span>    <span class="token number">0.033047</span><span class="token punctuation">]</span> ACPI: DMAR 0x0000000032E6B000 000088 <span class="token punctuation">(</span>v02 INTEL  EDK2     00000002      01000013<span class="token punctuation">)</span>
<span class="token punctuation">[</span>    <span class="token number">0.033079</span><span class="token punctuation">]</span> ACPI: Reserving DMAR table memory at <span class="token punctuation">[</span>mem 0x32e6b000-0x32e6b087<span class="token punctuation">]</span>
<span class="token punctuation">[</span>    <span class="token number">0.070806</span><span class="token punctuation">]</span> DMAR: IOMMU enabled
<span class="token punctuation">[</span>    <span class="token number">0.134742</span><span class="token punctuation">]</span> DMAR: Host address width <span class="token number">39</span>
<span class="token punctuation">[</span>    <span class="token number">0.134742</span><span class="token punctuation">]</span> DMAR: DRHD base: 0x000000fed90000 flags: 0x0
<span class="token punctuation">[</span>    <span class="token number">0.134747</span><span class="token punctuation">]</span> DMAR: dmar0: reg_base_addr fed90000 ver <span class="token number">4</span>:0 cap 1c0000c40660462 ecap 29a00f0505e
<span class="token punctuation">[</span>    <span class="token number">0.134748</span><span class="token punctuation">]</span> DMAR: DRHD base: 0x000000fed91000 flags: 0x1
<span class="token punctuation">[</span>    <span class="token number">0.134751</span><span class="token punctuation">]</span> DMAR: dmar1: reg_base_addr fed91000 ver <span class="token number">5</span>:0 cap d2008c40660462 ecap f050da
<span class="token punctuation">[</span>    <span class="token number">0.134752</span><span class="token punctuation">]</span> DMAR: RMRR base: 0x0000003c000000 end: 0x000000403fffff
<span class="token punctuation">[</span>    <span class="token number">0.134754</span><span class="token punctuation">]</span> DMAR-IR: IOAPIC <span class="token function">id</span> <span class="token number">2</span> under DRHD base  0xfed91000 IOMMU <span class="token number">1</span>
<span class="token punctuation">[</span>    <span class="token number">0.134755</span><span class="token punctuation">]</span> DMAR-IR: HPET <span class="token function">id</span> <span class="token number">0</span> under DRHD base 0xfed91000
<span class="token punctuation">[</span>    <span class="token number">0.134756</span><span class="token punctuation">]</span> DMAR-IR: Queued invalidation will be enabled to support x2apic and Intr-remapping.
<span class="token punctuation">[</span>    <span class="token number">0.136337</span><span class="token punctuation">]</span> DMAR-IR: Enabled IRQ remapping <span class="token keyword">in</span> x2apic mode
<span class="token punctuation">[</span>    <span class="token number">0.364625</span><span class="token punctuation">]</span> pci 0000:00:02.0: DMAR: Skip IOMMU disabling <span class="token keyword">for</span> graphics
<span class="token punctuation">[</span>    <span class="token number">0.456681</span><span class="token punctuation">]</span> DMAR: No ATSR found
<span class="token punctuation">[</span>    <span class="token number">0.456682</span><span class="token punctuation">]</span> DMAR: No SATC found
<span class="token punctuation">[</span>    <span class="token number">0.456683</span><span class="token punctuation">]</span> DMAR: IOMMU feature fl1gp_support inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456684</span><span class="token punctuation">]</span> DMAR: IOMMU feature pgsel_inv inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456684</span><span class="token punctuation">]</span> DMAR: IOMMU feature nwfs inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456685</span><span class="token punctuation">]</span> DMAR: IOMMU feature dit inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456686</span><span class="token punctuation">]</span> DMAR: IOMMU feature sc_support inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456686</span><span class="token punctuation">]</span> DMAR: IOMMU feature dev_iotlb_support inconsistent
<span class="token punctuation">[</span>    <span class="token number">0.456687</span><span class="token punctuation">]</span> DMAR: dmar0: Using Queued invalidation
<span class="token punctuation">[</span>    <span class="token number">0.456689</span><span class="token punctuation">]</span> DMAR: dmar1: Using Queued invalidation
<span class="token punctuation">[</span>    <span class="token number">0.458760</span><span class="token punctuation">]</span> DMAR: Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Virtualization Technology <span class="token keyword">for</span> Directed I/O<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="更换源，不解释"><a href="#更换源，不解释" class="headerlink" title="更换源，不解释"></a>更换源，不解释</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先备份： <span class="token function">mv</span> /etc/apt/sources.list  /etc/apt/sources.list.bak
来一份修改：cp /etc/apt/sources.list.bak /etc/apt/sources.list 

sources.list 修改为
deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib

deb http://mirrors.aliyun.com/debian-security/ bullseye-security main
deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main

deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib

deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib
deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="NAS-黑群晖-DSM-安装和配置"><a href="#NAS-黑群晖-DSM-安装和配置" class="headerlink" title="NAS (黑群晖 DSM) 安装和配置"></a>NAS (黑群晖 DSM) 安装和配置</h3><p>黑群晖安装比Hackintosh简直简单了几个数量级，在我看来，都用不上『Hack』这个词。在 pve 里安装 dsm 主要步骤如下，具体细节请自行谷歌：</p>
<ul>
<li>虚拟机下安装引导镜像不需要的三个参数去除</li>
<li>开启硬件直通和分组IOMMU</li>
<li>虚拟硬盘建立&#x2F; NVMe硬盘直通 &#x2F; SATA硬盘直通 （可以用虚拟磁盘，但建议用另一个磁盘直通，分散风险）</li>
<li>建立黑群晖虚拟机，引导选UEFl，机型 35。引导顺序设置、移除不需要的软盘和硬盘)</li>
<li>获取黑群晖地址（路由器查看、群晖助手等）</li>
<li>安装黑群晖，设置登录相关</li>
<li>进入系统开启并建立 SMB &#x2F; NFS 共享</li>
</ul>
<p>相关命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">导入img：qm importdisk <span class="token number">102</span>  /var/lib/vz/template/iso/DS918-7.0.1-42218_7.1.0-42661_update3.img local-lvm
查看磁盘：ls <span class="token parameter variable">-al</span> /dev/disk/by-id
为虚拟机设置直通硬盘：qm <span class="token builtin class-name">set</span> <span class="token number">102</span> <span class="token parameter variable">--sata1</span> /dev/disk/by-id/nvme-Samsung_SSD_980_1TB_S649NX0T144808H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="其他系统服务安装"><a href="#其他系统服务安装" class="headerlink" title="其他系统服务安装"></a>其他系统服务安装</h3><p>我在PVE上部署了iKuai和OpenWrt。iKuai用于主路由宽带拨号，OpenWrt主要用于旁路由实现墙外访问。我还部署了一个CentOS系统，用于运行其他服务，比如Nginx或者Haproxy等，以分散风险并增加应用的弹性。</p>
<p>另外，我还安装了Windows系统，这样我可以直接使用桌面系统连接电视，当需要的时候，电视就可以成为我的显示器。</p>
<h3 id="爱快网络配置和服务部署"><a href="#爱快网络配置和服务部署" class="headerlink" title="爱快网络配置和服务部署"></a>爱快网络配置和服务部署</h3><p>爱快软路由的配置需要根据具体的网络环境和需求来设定。在我的案例中，我选择了桥接模式，因此运营商的光猫会WAN口进入8505主机。主机的eth0口用作pve维护通道口，剩下五个口都直通给爱快，一个用于wan口，剩余四个用链路桥接给其他设备使用。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>PVE的设置：PVE的硬件直通是重要的一环，需要保证虚拟机能直接访问硬件</li>
<li>PVE的硬件直通：PVE的硬件直通功能是实现虚拟化的关键。通过硬件直通，虚拟机能够直接访问到硬件资源，比如网卡，硬盘等。这样我们就可以在一个主机上部署多个虚拟机，并且每个虚拟机都能够像真正的独立的计算机一样运行。</li>
<li>iKuai网口、DHCP、网段的设置：iKuai的设置需要根据实际的网络环境和需求来进行。在我的案例中，我选择了桥接模式，因此运营商的光猫会WAN口进入8505主机。主机的eth0口用作pve维护通道口，剩下五个口都直通给爱快，一个用于wan口，剩余四个用链路桥接给其他设备使用。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="导入-gz-包"><a href="#导入-gz-包" class="headerlink" title="导入 gz 包"></a>导入 gz 包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./img2kvm istoreos-21.02.3-2022092019-x86-64-squashfs-combined-efi.img.gz <span class="token number">105</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="OpenWrt-换源"><a href="#OpenWrt-换源" class="headerlink" title="OpenWrt 换源"></a>OpenWrt 换源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">先备份： <span class="token function">mv</span> /etc/opkg/distfeeds.conf /etc/opkg/distfeeds.conf.bak
来一份修改：cp /etc/opkg/distfeeds.conf.bak /etc/opkg/distfeeds.conf

distfeeds.conf 修改为
src/gz openwrt_core https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/targets/rockchip/armv8/packages
src/gz openwrt_base https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/packages/aarch64_generic/base
src/gz openwrt_luci https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/packages/aarch64_generic/luci
src/gz openwrt_packages https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/packages/aarch64_generic/packages
src/gz openwrt_routing https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/packages/aarch64_generic/routing
src/gz openwrt_telephony https://mirrors.tuna.tsinghua.edu.cn/openwrt/releases/21.02.0/packages/aarch64_generic/telephony<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><h3 id="pve管理界面"><a href="#pve管理界面" class="headerlink" title="pve管理界面"></a>pve管理界面</h3><img src="/images/aio/pve_manager.png"/>

<h3 id="爱快管理界面"><a href="#爱快管理界面" class="headerlink" title="爱快管理界面"></a>爱快管理界面</h3><img src="/images/aio/ikuai_manager.png"/>

<h3 id="群晖桌面"><a href="#群晖桌面" class="headerlink" title="群晖桌面"></a>群晖桌面</h3><img src="/images/aio/dsm_desktop.png"/>

<h3 id="其他服务，比如ChatGPT、kodbox、博客"><a href="#其他服务，比如ChatGPT、kodbox、博客" class="headerlink" title="其他服务，比如ChatGPT、kodbox、博客"></a>其他服务，比如ChatGPT、kodbox、博客</h3><img src="/images/aio/other_service.png"/>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个家庭组网的实践中，虚拟化技术以及PVE的硬件直通展示了很大的魅力。它们让我在一台8505小主机上同时运行了爱快、OpenWrt、CentOS、黑群晖以及Windows系统，满足了我家庭网络环境的多样化需求。</p>
<p>爱快作为主路由器，负责宽带拨号，同时也提供了稳定的网络连接；OpenWrt作为旁路由，实现了墙外访问的功能；黑群晖则部署在家庭网络中，作为NAS为所有设备提供数据存储和访问的服务；CentOS用于开启其他服务，为家庭网络增加更多可能性；最后，Windows系统提供了桌面环境，让我可以方便地把电视当作显示器使用。</p>
<p>总的来说，通过这次实践，我建立了一个高效、灵活、稳定的家庭网络环境，我期待在这个环境中，我可以更好地享受数字生活的便利和乐趣。</p>
<p>以上就是我在8505家庭组网PVE下iKuai、OpenWrt、CentOS、DSM、Windows等系统All In One实践记录。希望我的经验可以对你有所帮助。如果你有任何问题或者建议，欢迎在评论区留言。</p>
]]></content>
      <categories>
        <category>家庭组网</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>NAS</tag>
        <tag>软路由</tag>
        <tag>PVE</tag>
        <tag>OpenWrt</tag>
        <tag>AIO</tag>
      </tags>
  </entry>
  <entry>
    <title>ASI 和 AFN 区别</title>
    <url>/2015/10/06/ASI-%E5%92%8C-AFN-%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h3 id="一-底层实现"><a href="#一-底层实现" class="headerlink" title="一 底层实现"></a>一 底层实现</h3><ul>
<li>AFN的底层基于OC的NSURLConnection和NSURLSession</li>
<li>ASI的底层基于纯C语言的CFNetwork框架</li>
<li>ASI的运行性能 高于 AFN</li>
</ul>
<span id="more"></span>

<h3 id="二-对服务器返回的数据处理"><a href="#二-对服务器返回的数据处理" class="headerlink" title="二 对服务器返回的数据处理"></a>二 对服务器返回的数据处理</h3><ul>
<li>ASI没有直接提供对服务器数据处理的方式，直接返回data\string</li>
<li>AFN提供了多种对服务器数据处理的方式<ul>
<li>JSON处理</li>
<li>XML处理</li>
<li>其他处理</li>
</ul>
</li>
</ul>
<h3 id="三-监听请求的过程"><a href="#三-监听请求的过程" class="headerlink" title="三 监听请求的过程"></a>三 监听请求的过程</h3><ul>
<li><p>AFN提供了success和failure两个block来监听请求的过程（只能监听成功和失败）</p>
<ul>
<li>success : 请求成功后调用</li>
<li>failure : 请求失败后调用</li>
</ul>
</li>
<li><p>ASI提供了3套方案，每一套方案都能监听请求的完整过程<br>（监听请求开始、接收到响应头信息、接受到具体数据、接受完毕、请求失败）</p>
<ul>
<li>成为代理，遵守协议，实现协议中的代理方法</li>
<li>成为代理，不遵守协议，自定义代理方法</li>
<li>设置block</li>
</ul>
</li>
</ul>
<h3 id="四-在文件下载和文件上传的使用难易度"><a href="#四-在文件下载和文件上传的使用难易度" class="headerlink" title="四 在文件下载和文件上传的使用难易度"></a>四 在文件下载和文件上传的使用难易度</h3><ul>
<li><p>AFN</p>
<ul>
<li>不容易监听下载进度和上传进度</li>
<li>不容易实现断点续传</li>
<li>一般只用来下载不大的文件</li>
</ul>
</li>
<li><p>ASI</p>
<ul>
<li>非常容易实现下载和上传</li>
<li>非常容易监听下载进度和上传进度</li>
<li>非常容易实现断点续传</li>
<li>下载或大或小的文件都行</li>
</ul>
</li>
</ul>
<h3 id="五-ASI提供了更多的实用功能"><a href="#五-ASI提供了更多的实用功能" class="headerlink" title="五 ASI提供了更多的实用功能"></a>五 ASI提供了更多的实用功能</h3><ul>
<li>控制圈圈要不要在请求过程中转</li>
<li>可以轻松地设置请求之间的依赖：每一个请求都是一个 <strong>NSOperation</strong> 对象</li>
<li>可以统一管理所有请求（还专门提供了一个叫做 <strong>ASINetworkQueue</strong> 来管理所有的请求对象）</li>
<li>暂停\恢复\取消所有的请求</li>
<li>监听整个队列中所有请求的下载进度和上传进度</li>
</ul>
]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>网络</tag>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Appium + mitmproxy 全自动化抓取APP 数据</title>
    <url>/2018/12/29/Appium-mitmproxy-%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%93%E5%8F%96APP-%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司新接到一个某某公司的一个项目需求，其中有一个子项是抓取诸如今日头条、网易新闻、腾讯新闻等新闻类 APP 的新闻，远端根据一个关键词或者一个主账号名称查找获取关于该关键词的所有新闻或主账号下的所有文章，通过简单的抓包分析，发现只有少数 APP 网络请求参数未做签名处理，像这类的能直接分析 url 和 param，利用 python 全自动化获取数据，但是大部分比如网易新闻这类 APP 安全级别较高，参数做了加密或者签名校验，服务端也有同一签名的请求访问次数限制，所以在这样的情况下想要直接获取通过外部调用获取数据几乎变得不可能。</p>
<span id="more"></span>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在以上的背景之下，简单分析和调研之后，觉得有以下办法可以获取到那些请求加密的 APP 的数据，如下：</p>
<ul>
<li>逆向分析该 APP，揪出加密方法及对应的逻辑，第三方使用同样的逻辑加密请求参数获取数据；</li>
<li>寻找该新闻 APP 在 WEB 端的接口，同样也能获取到数据；</li>
<li>对 APP 使用网络代理，使用手机获取新闻，使用中间人攻击（MITM）获取数据 并做对应处理。</li>
</ul>
<p>这三个方案中，第一种，难度最大，因为了解所有明白，以我的逆向水平暂时达不到，虽然可行，但暂时不考虑；第二种，经验证，很多在 APP 端有的接口在 WEB 端没有，也放弃；第三种，面临几个问题，因为整个过程要全自动化，所以这个操作使用获取新闻的过程要自动，手机获取到新闻后数据抓取的过程要自动，这就意味着不能使用 Wireshark、Charles、Fiddler 等抓包工具人为干预，要解决这两个问题，即要解决这两个问题：</p>
<ul>
<li>使用脚本自动化 UI 操作</li>
<li>代理软件能与脚本交互</li>
</ul>
<p>为解决第一个问题，可以使用<a href="https://appium.io/"><code>Appium</code></a>，<a href="https://github.com/appium/appium">Github主页</a></p>
<p>Q：Appium 是什么？<br/><br>A：Appium 是一个自动化测试开源工具，支持 iOS 平台和 Android 平台上的原生应用，web 应用和混合应用。</p>
<ul>
<li><p>“移动原生应用”是指那些用 iOS 或者 Android SDK 写的应用。</p>
</li>
<li><p>“移动 web 应用”是指使用移动浏览器访问的应用（Appium 支持 iOS 上的 Safari 和 Android 上的 Chrome）。</p>
</li>
<li><p>“混合应用”是指原生代码封装网页视图——原生代码和 web 内容交互。比如，我们在微信里可以查看网页，可以通过网页应用买电影票等。</p>
</li>
</ul>
<p>Appium 适配了与诸如 JAVA、Python、Javascript、Ruby 等众多语言的交互，我选择 Python，即：Appium + python</p>
<p>为解决第二个问题，找到了两个解决方案，第一个是 <a href="https://mitmproxy.org/"><code>mitmproxy</code></a>，<a href="https://github.com/mitmproxy/mitmproxy/">Github主页</a>，第二个是<a href="https://anyproxy.io/cn/">AnyProxy</a>，<a href="https://github.com/alibaba/anyproxy">Github主页</a>，这两个都是开放式的<code>HTTP/HTTPS</code>代理服务，后者是阿里巴巴基于 Node.js 开发的一款开源代理服务，前者是一款免费开源的可交互的<code>HTTP/HTTPS</code>代理服务，可与 Python 交互，且功能更强大，我选择了后者，即：mitmproxy + python</p>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>方案已经确定了，就开始看文档进行编码工作，过程与细节就不写了，直接上成果。</p>
<h2 id="自动操作-UI-部分"><a href="#自动操作-UI-部分" class="headerlink" title="自动操作 UI 部分"></a>自动操作 UI 部分</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>

<span class="token keyword">from</span> appium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> appium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>touch_action <span class="token keyword">import</span> TouchAction
<span class="token keyword">import</span> time
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> getopt
<span class="token keyword">import</span> json
<span class="token keyword">import</span> os
<span class="token keyword">import</span> selenium
<span class="token keyword">import</span> argparse

platformName <span class="token operator">=</span> <span class="token string">'iOS'</span>
deviceName <span class="token operator">=</span> <span class="token string">'iPhone 6s'</span>
bundleId <span class="token operator">=</span> <span class="token string">'com.netease.news'</span>
udid <span class="token operator">=</span> <span class="token string">'your_uuid'</span>
automationName <span class="token operator">=</span> <span class="token string">'XCUITest'</span>
xcodeOrgId <span class="token operator">=</span> <span class="token string">'your_ xcodeOrgId'</span>
xcodeSigningId <span class="token operator">=</span> <span class="token string">'your_certificate_name'</span>
driverServer <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:4723/wd/hub'</span>

<span class="token keyword">class</span> <span class="token class-name">Input</span><span class="token punctuation">:</span>
    <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">''</span>
    keyWord <span class="token operator">=</span> <span class="token string">''</span>


<span class="token keyword">class</span> <span class="token class-name">NeteaseNewsSpider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>desired_caps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'platformName'</span><span class="token punctuation">:</span> platformName<span class="token punctuation">,</span>
            <span class="token string">'deviceName'</span><span class="token punctuation">:</span> deviceName<span class="token punctuation">,</span>
            <span class="token string">'bundleId'</span><span class="token punctuation">:</span> bundleId<span class="token punctuation">,</span>
            <span class="token string">'udid'</span><span class="token punctuation">:</span> udid<span class="token punctuation">,</span>
            <span class="token string">'automationName'</span><span class="token punctuation">:</span> automationName<span class="token punctuation">,</span>
            <span class="token string">'clearSystemFiles'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span>
        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Remote<span class="token punctuation">(</span>driverServer<span class="token punctuation">,</span> self<span class="token punctuation">.</span>desired_caps<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">tearDown</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">performActionForKeyword</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>

        driver <span class="token operator">=</span> self<span class="token punctuation">.</span>driver
        wait <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            el1 <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span>
                <span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//XCUIElementTypeApplication[@name=\"网易新闻\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[1]/XCUIElementTypeButton[1]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>NoSuchElementException<span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
        el1<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

        TouchAction<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>tap<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">206</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入目标关键词：%s'</span> <span class="token operator">%</span> keyWord<span class="token punctuation">)</span>
        el3 <span class="token operator">=</span> wait<span class="token punctuation">.</span>until<span class="token punctuation">(</span>EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span>
            <span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//XCUIElementTypeApplication[@name=\"网易新闻\"]/XCUIElementTypeWindow[1]/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther/XCUIElementTypeOther[1]/XCUIElementTypeOther/XCUIElementTypeTextField'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        el3<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'点击搜索按钮'</span><span class="token punctuation">)</span>
        el3<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">findForKeyWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>performActionForKeyword<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'动作结束'</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 动作结束'</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">findForUser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>
        driver <span class="token operator">=</span> self<span class="token punctuation">.</span>driver

        self<span class="token punctuation">.</span>performActionForKeyword<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

        <span class="token comment"># 点击用户</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'点击用户'</span><span class="token punctuation">)</span>
        el1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>
            <span class="token string">"//XCUIElementTypeOther[@name=\"i\"]/XCUIElementTypeOther[1]/XCUIElementTypeOther[4]"</span><span class="token punctuation">)</span>
        el1<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

        <span class="token comment"># 点击用户第一个</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>isExistElement<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//XCUIElementTypeOther[@name=\"i\"]/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeImage'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'点击用户列表第一个'</span><span class="token punctuation">)</span>
            el2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>
                <span class="token string">"//XCUIElementTypeOther[@name=\"i\"]/XCUIElementTypeOther[2]/XCUIElementTypeOther[1]/XCUIElementTypeOther[1]/XCUIElementTypeImage"</span><span class="token punctuation">)</span>
            el2<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'没有相关用户'</span><span class="token punctuation">)</span>
            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 无相关用户'</span><span class="token punctuation">)</span>

        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'动作结束'</span><span class="token punctuation">)</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 动作结束'</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">scrollUp</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"mobile: scroll"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">"direction"</span><span class="token punctuation">:</span> <span class="token string">"down"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">isExistElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> identifyBy<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">'''
        判断元素是否存在
        用法:
        isExistElement(By.XPATH,"//a")
        '''</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        flag <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> identifyBy <span class="token operator">==</span> <span class="token string">"id"</span><span class="token punctuation">:</span>
                <span class="token comment">#self.driver.implicitly_wait(60)</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"xpath"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"class"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"link text"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"partial link text"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"name"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"tag name"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            <span class="token keyword">elif</span> identifyBy <span class="token operator">==</span> <span class="token string">"css selector"</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
            flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">except</span> selenium<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>NoSuchElementException<span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">finally</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> flag


<span class="token keyword">def</span> <span class="token function">spiderForKeyWord</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查找关键词：%s'</span> <span class="token operator">%</span> keyWord<span class="token punctuation">)</span>
    spider <span class="token operator">=</span> NeteaseNewsSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>
    spider<span class="token punctuation">.</span>findForKeyWord<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">spiderForUser</span><span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'查找用户：%s'</span> <span class="token operator">%</span> keyWord<span class="token punctuation">)</span>
    spider <span class="token operator">=</span> NeteaseNewsSpider<span class="token punctuation">(</span><span class="token punctuation">)</span>
    spider<span class="token punctuation">.</span>findForUser<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">type</span> <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token builtin">type</span>
    keyWord <span class="token operator">=</span> Input<span class="token punctuation">.</span>keyWord
    <span class="token keyword">if</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'keyword'</span><span class="token punctuation">:</span>
        spiderForKeyWord<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>
    <span class="token keyword">elif</span> <span class="token builtin">type</span> <span class="token operator">==</span> <span class="token string">'user'</span><span class="token punctuation">:</span>
        spiderForUser<span class="token punctuation">(</span>keyWord<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>

    description <span class="token operator">=</span> <span class="token string">u"自动化 UI 操作，查找网易新闻"</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span>description<span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-k'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'keyWord'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'必填:关键词名字'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-t'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"keyword"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'必填:查找类型'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
    Input<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token builtin">type</span>
    Input<span class="token punctuation">.</span>keyWord <span class="token operator">=</span> args<span class="token punctuation">.</span>keyWord

    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="代理部分分析和保存数据"><a href="#代理部分分析和保存数据" class="headerlink" title="代理部分分析和保存数据"></a>代理部分分析和保存数据</h2><h3 id="addons-py"><a href="#addons-py" class="headerlink" title="addons.py"></a><code>addons.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>

<span class="token keyword">import</span> joker

addons <span class="token operator">=</span> <span class="token punctuation">[</span>
    joker<span class="token punctuation">.</span>Joker<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="common-py"><a href="#common-py" class="headerlink" title="common.py"></a><code>common.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>
<span class="token keyword">import</span> os


WORKING_DIR <span class="token operator">=</span> <span class="token string">"/Users/VanJay/Documents/Work/Tungee/新闻APP搜索接口破解情况/ant.git/netease_news_suite/"</span>
DataBasePath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'data'</span>
DataBaseKeywordPath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'data/'</span> <span class="token operator">+</span> <span class="token string">'Keyword'</span>
DataBaseUserPath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'data/'</span> <span class="token operator">+</span> <span class="token string">'User'</span>
AppiumPath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'appium'</span>
MitmproxyPath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'mitmproxy'</span>
SearchConfigPath <span class="token operator">=</span> WORKING_DIR <span class="token operator">+</span> <span class="token string">'currentSearchConfig.json'</span>
NeteaseAccountJSON <span class="token operator">=</span> <span class="token string">'/neteaseAccount.json'</span>
NeteaseAccountArticleJSON <span class="token operator">=</span> <span class="token string">'/neteaseAccountArticle.json'</span>


<span class="token keyword">def</span> <span class="token function">getParamValue</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>
      defaultValue <span class="token operator">=</span> <span class="token boolean">None</span>
      <span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
              <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>
              <span class="token keyword">return</span> value
            <span class="token keyword">else</span><span class="token punctuation">:</span>
              <span class="token keyword">return</span> defaultValue
      <span class="token keyword">else</span><span class="token punctuation">:</span>
          <span class="token keyword">return</span> defaultValue


<span class="token keyword">def</span> <span class="token function">solveDirDependency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>DataBasePath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir '</span> <span class="token operator">+</span> DataBasePath<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">solveDestSearchOpDep</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>
  path <span class="token operator">=</span> DataBasePath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> word
  <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
      os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir '</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
  <span class="token keyword">return</span> path
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Joker-py"><a href="#Joker-py" class="headerlink" title="Joker.py"></a><code>Joker.py</code></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>

<span class="token keyword">import</span> json

<span class="token keyword">import</span> mitmproxy<span class="token punctuation">.</span>http
<span class="token keyword">from</span> mitmproxy <span class="token keyword">import</span> ctx<span class="token punctuation">,</span> http

<span class="token keyword">import</span> os
<span class="token keyword">import</span> shutil

<span class="token keyword">from</span> common <span class="token keyword">import</span> getParamValue<span class="token punctuation">,</span> solveDirDependency<span class="token punctuation">,</span> solveDestSearchOpDep
<span class="token keyword">from</span> common <span class="token keyword">import</span>  SearchConfigPath<span class="token punctuation">,</span> NeteaseAccountJSON<span class="token punctuation">,</span> NeteaseAccountArticleJSON


<span class="token keyword">class</span> <span class="token class-name">Joker</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>netease_news_host <span class="token operator">=</span> <span class="token string">'c.m.163.com'</span>
        self<span class="token punctuation">.</span>search_url <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/search/comp2/'</span>
        self<span class="token punctuation">.</span>re_search_url <span class="token operator">=</span> self<span class="token punctuation">.</span>search_url <span class="token operator">+</span> <span class="token string">'MA%3D%3D/'</span>
        self<span class="token punctuation">.</span>relatedArticleURL <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/nc/recommend/relate/article/'</span>
        self<span class="token punctuation">.</span>hotDiscussURL <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/reader/api/recommend/viewpoints?docid='</span>
        self<span class="token punctuation">.</span>articlePrefix <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/news/a/'</span>
        self<span class="token punctuation">.</span>videoArticlePrefix <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/news/v/'</span>
        self<span class="token punctuation">.</span>commentURLPreFix <span class="token operator">=</span> <span class="token string">'https://comment.api.163.com/api/v1/products/a2869674571f77b5a0867c3d71db5856/threads/'</span>
        self<span class="token punctuation">.</span>commentURLSuffFix <span class="token operator">=</span> <span class="token string">'/app/comments/hotModuleList?ibc=newsappios'</span>
        self<span class="token punctuation">.</span>netesaeAccountProfileURL <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/uc/api/visitor/v3/simple/profile'</span>
        self<span class="token punctuation">.</span>neteaseAccountArticleURL <span class="token operator">=</span> <span class="token string">'https://c.m.163.com/nc/subscribe/list/'</span>

        self<span class="token punctuation">.</span>newsTypeConfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'zonghe'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'folderName'</span><span class="token punctuation">:</span> <span class="token string">'ZongHe'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string">'shipin'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'folderName'</span><span class="token punctuation">:</span> <span class="token string">'Video'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string">'tuji'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'folderName'</span><span class="token punctuation">:</span> <span class="token string">'Picture'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token string">'yonghu'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token string">'folderName'</span><span class="token punctuation">:</span> <span class="token string">'User'</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># self.currentNewsType = 'zonghe'</span>
        <span class="token comment"># self.keyword = '关键词'</span>
        <span class="token comment"># self.searchType = 'keyword'</span>

    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">)</span><span class="token punctuation">:</span>
        request <span class="token operator">=</span> flow<span class="token punctuation">.</span>request
        url <span class="token operator">=</span> request<span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">'://'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>host <span class="token operator">+</span> request<span class="token punctuation">.</span>path

        <span class="token comment"># 网易新闻的搜索关键词接口</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>search_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"关键词搜索地址: %s "</span> <span class="token operator">%</span> request<span class="token punctuation">.</span>pretty_url<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 忽略非目标相关地址</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>host <span class="token keyword">in</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>netease_news_host<span class="token punctuation">,</span> <span class="token string">'comment.api.163.com'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span>

        request <span class="token operator">=</span> flow<span class="token punctuation">.</span>request
        path <span class="token operator">=</span> request<span class="token punctuation">.</span>path
        url <span class="token operator">=</span> request<span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">'://'</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>host <span class="token operator">+</span> path

        <span class="token comment"># 搜索（包含全新搜索和分页搜索加载）</span>
        self<span class="token punctuation">.</span>dealingWithSearchResult<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

        <span class="token comment"># 相关文章</span>
        self<span class="token punctuation">.</span>dealingRelatedArticles<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

        <span class="token comment"># 正在热议</span>
        self<span class="token punctuation">.</span>dealingArticleHotDiscuss<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

        <span class="token comment"># 文章热评</span>
        self<span class="token punctuation">.</span>dealingComments<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

        <span class="token comment"># 订阅号</span>
        self<span class="token punctuation">.</span>dealingNeteaseAccount<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

        <span class="token comment"># 订阅号文章</span>
        self<span class="token punctuation">.</span>dealingNeteaseAccountArticle<span class="token punctuation">(</span>flow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingWithSearchResult</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>search_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
            paramValue <span class="token operator">=</span> getParamValue<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">'tabname'</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>currentNewsType <span class="token operator">=</span> <span class="token string">'zonghe'</span> <span class="token keyword">if</span> paramValue <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">else</span> paramValue

            <span class="token comment"># 搜索结果去掉为你推荐和网页结果</span>
            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            contentJson<span class="token punctuation">[</span><span class="token string">'boxes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

            <span class="token comment"># 只要不是搜索用户就去掉网易号</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>currentNewsType <span class="token operator">==</span> <span class="token string">'yonghu'</span><span class="token punctuation">:</span>
                contentJson<span class="token punctuation">[</span><span class="token string">'topic'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>set_content<span class="token punctuation">(</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>contentJson<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

            doc <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            docResultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            topic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
            topicResultList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token string">'doc'</span> <span class="token keyword">in</span> contentJson<span class="token punctuation">:</span>
                doc <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'doc'</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token string">'result'</span> <span class="token keyword">in</span> doc<span class="token punctuation">:</span>
                    docResultList <span class="token operator">=</span> doc<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token string">'topic'</span> <span class="token keyword">in</span> contentJson<span class="token punctuation">:</span>
                topic <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'topic'</span><span class="token punctuation">]</span>
                <span class="token keyword">if</span> <span class="token string">'result'</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>
                    topicResultList <span class="token operator">=</span> topic<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span>

            <span class="token comment"># 读取当前关键词</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>SearchConfigPath<span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 搜索配置不存在，请确认'</span><span class="token punctuation">)</span>
                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token comment"># 检查依赖</span>
            solveDirDependency<span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>SearchConfigPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                fileJson <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>keyword <span class="token operator">=</span> fileJson<span class="token punctuation">[</span><span class="token string">'keyword'</span><span class="token punctuation">]</span>
                self<span class="token punctuation">.</span>searchType <span class="token operator">=</span> fileJson<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>

                <span class="token comment"># 创建目标文件夹</span>
                self<span class="token punctuation">.</span>currentSavePath <span class="token operator">=</span> solveDestSearchOpDep<span class="token punctuation">(</span>self<span class="token punctuation">.</span>keyword<span class="token punctuation">)</span>

                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'currentSavePath:'</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>currentSavePath<span class="token punctuation">)</span>

                <span class="token comment">#  点击了重新搜索，而不是分页的继续搜索</span>
                <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>re_search_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'点击了重新搜索'</span><span class="token punctuation">)</span>

                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>currentNewsType <span class="token operator">!=</span> <span class="token string">'yonghu'</span><span class="token punctuation">:</span>
                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/doc.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>doc<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                                  indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            <span class="token keyword">for</span> item <span class="token keyword">in</span> docResultList<span class="token punctuation">:</span>
                                item<span class="token punctuation">[</span><span class="token string">'postURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>articlePrefix <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'postid'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                                    <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                                docResultList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 用户</span>
                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/topic.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>topic<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                                  indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            <span class="token keyword">for</span> item <span class="token keyword">in</span> topicResultList<span class="token punctuation">:</span>
                                <span class="token keyword">if</span> <span class="token string">'ename'</span> <span class="token keyword">in</span> item<span class="token punctuation">:</span>
                                    item<span class="token punctuation">[</span><span class="token string">'profileURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>netesaeAccountProfileURL <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                                        <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                                topicResultList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token comment"># 网易新闻的搜索关键词接口(分页继续加载)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'分页继续搜索'</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>currentNewsType <span class="token operator">!=</span> <span class="token string">'yonghu'</span><span class="token punctuation">:</span>
                        <span class="token comment"># 读取已保存数据</span>
                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            oldResult <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
                            <span class="token comment"># 拼接新数据</span>
                            newResultList <span class="token operator">=</span> oldResult <span class="token operator">+</span> docResultList

                            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                                <span class="token keyword">for</span> item <span class="token keyword">in</span> newResultList<span class="token punctuation">:</span>
                                    item<span class="token punctuation">[</span><span class="token string">'postURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>articlePrefix <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'postid'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                                        <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                                    newResultList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 用户</span>
                        <span class="token comment"># 读取已保存数据</span>
                        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                            oldResult <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
                            <span class="token comment"># 拼接新数据</span>
                            newResultList <span class="token operator">=</span> oldResult <span class="token operator">+</span> topicResultList

                            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/result.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                                <span class="token keyword">for</span> item <span class="token keyword">in</span> newResultList<span class="token punctuation">:</span>
                                    <span class="token keyword">if</span> <span class="token string">'ename'</span> <span class="token keyword">in</span> item<span class="token punctuation">:</span>
                                        item<span class="token punctuation">[</span><span class="token string">'profileURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>netesaeAccountProfileURL <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'ename'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                                            <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                                    newResultList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingRelatedArticles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>relatedArticleURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
            skipID <span class="token operator">=</span> find_between<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>relatedArticleURL<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/releatedoc'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>
                    <span class="token string">'mkdir '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/releatedoc'</span><span class="token punctuation">)</span>

            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            releatedocList <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'releatedoc'</span><span class="token punctuation">]</span>
            releatedocSkipName <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/releatedoc/'</span> <span class="token operator">+</span> \
                skipID <span class="token operator">+</span> <span class="token string">'.json'</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>releatedocSkipName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> item <span class="token keyword">in</span> releatedocList<span class="token punctuation">:</span>
                    <span class="token keyword">if</span> item<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'doc'</span><span class="token punctuation">:</span>
                        item<span class="token punctuation">[</span><span class="token string">'postURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>articlePrefix <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'docID'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                            <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                    <span class="token keyword">elif</span> item<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'video'</span><span class="token punctuation">:</span>
                        item<span class="token punctuation">[</span><span class="token string">'postURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>videoArticlePrefix <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'docID'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                            <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>
                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>releatedocList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                      indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingArticleHotDiscuss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>hotDiscussURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
            paramArr <span class="token operator">=</span> path<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span>
            docID <span class="token operator">=</span> paramArr<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>paramArr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            find_between<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>relatedArticleURL<span class="token punctuation">,</span> <span class="token string">'.html'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/ hotDiscuss'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>
                    <span class="token string">'mkdir '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/hotDiscuss'</span><span class="token punctuation">)</span>

            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            hotDiscuss <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> hotDiscuss <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                hotDiscussName <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/hotDiscuss/'</span> <span class="token operator">+</span> \
                    docID <span class="token operator">+</span> <span class="token string">'.json'</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>hotDiscussName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>hotDiscuss<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                          indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingComments</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>commentURLPreFix<span class="token punctuation">)</span><span class="token punctuation">:</span>
            postID <span class="token operator">=</span> find_between<span class="token punctuation">(</span>
                url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>commentURLPreFix<span class="token punctuation">,</span> self<span class="token punctuation">.</span>commentURLSuffFix<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/hotCommentList'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                          <span class="token string">'/hotCommentList'</span><span class="token punctuation">)</span>

            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            hotCommentList <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'hotCommentList'</span><span class="token punctuation">]</span>

            <span class="token keyword">if</span> hotCommentList <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                hotCommentListItemName <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
                    <span class="token string">'/hotCommentList/'</span> <span class="token operator">+</span> postID <span class="token operator">+</span> <span class="token string">'.json'</span>
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>hotCommentListItemName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>hotCommentList<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                          indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingNeteaseAccount</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>netesaeAccountProfileURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>

            <span class="token keyword">if</span> contentJson <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                hotCommentListItemName <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> NeteaseAccountJSON
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>hotCommentListItemName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                        contentJson<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">dealingNeteaseAccountArticle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> flow<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HTTPFlow<span class="token punctuation">,</span> path<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>self<span class="token punctuation">.</span>neteaseAccountArticleURL<span class="token punctuation">)</span><span class="token punctuation">:</span>
            ename <span class="token operator">=</span> find_between<span class="token punctuation">(</span>url<span class="token punctuation">,</span> self<span class="token punctuation">.</span>neteaseAccountArticleURL<span class="token punctuation">,</span> <span class="token string">'/all'</span><span class="token punctuation">)</span>
            content <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span><span class="token punctuation">)</span>
            contentJson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'网易号:'</span> <span class="token operator">+</span> ename <span class="token operator">+</span> <span class="token string">'，用户名：'</span> <span class="token operator">+</span>
                  contentJson<span class="token punctuation">[</span><span class="token string">'subscribe_info'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            tagList <span class="token operator">=</span> contentJson<span class="token punctuation">[</span><span class="token string">'tab_list'</span><span class="token punctuation">]</span>
            <span class="token keyword">for</span> item <span class="token keyword">in</span> tagList<span class="token punctuation">:</span>
                item<span class="token punctuation">[</span><span class="token string">'postURL'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>articlePrefix <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token string">'postid'</span><span class="token punctuation">]</span> <span class="token operator">+</span> \
                    <span class="token string">'.html?spss=newsapp&amp;from=singlemessage'</span>

            <span class="token keyword">if</span> contentJson <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                hotCommentListItemName <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurrentSearchTypePath<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> NeteaseAccountArticleJSON
                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>hotCommentListItemName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
                        contentJson<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> entry<span class="token punctuation">:</span> mitmproxy<span class="token punctuation">.</span>addonmanager<span class="token punctuation">.</span>Loader<span class="token punctuation">)</span><span class="token punctuation">:</span>
        ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"addon 第一次加载"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">done</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
         ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"addon 关闭或被移除，又或者 mitmproxy 本身关闭"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">getRelatedArticleRequestURL</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> skipID<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>relatedArticleURL <span class="token operator">+</span> skipID <span class="token operator">+</span> <span class="token string">'.html'</span>

    <span class="token keyword">def</span> <span class="token function">getHotDiscussRequestURL</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> docID<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>hotDiscussURL <span class="token operator">+</span> docID

    <span class="token keyword">def</span> <span class="token function">getCommentRequestURL</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> postID<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>commentURLPreFix <span class="token operator">+</span> postID <span class="token operator">+</span> self<span class="token punctuation">.</span>commentURLSuffFix

    <span class="token keyword">def</span> <span class="token function">getCurrentSearchTypePath</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        path <span class="token operator">=</span> self<span class="token punctuation">.</span>currentSavePath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> \
            self<span class="token punctuation">.</span>newsTypeConfig<span class="token punctuation">[</span>self<span class="token punctuation">.</span>currentNewsType<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'folderName'</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
            os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir '</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> path


<span class="token keyword">def</span> <span class="token function">find_between</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> first<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>
        end <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">(</span>last<span class="token punctuation">,</span> start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token punctuation">]</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">""</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="写本地服务用户获取数据"><a href="#写本地服务用户获取数据" class="headerlink" title="写本地服务用户获取数据"></a>写本地服务用户获取数据</h1><p>写一个基于 Flask 的服务，就两个接口：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>

<span class="token keyword">import</span> sys
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> netease_news_suite<span class="token punctuation">.</span>mitmproxy<span class="token punctuation">.</span>common <span class="token keyword">import</span> DataBasePath<span class="token punctuation">,</span> SearchConfigPath<span class="token punctuation">,</span> AppiumPath<span class="token punctuation">,</span> NeteaseAccountJSON<span class="token punctuation">,</span> NeteaseAccountArticleJSON
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> jsonify<span class="token punctuation">,</span> request
<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>serving <span class="token keyword">import</span> run_with_reloader
<span class="token keyword">from</span> gevent <span class="token keyword">import</span> monkey
<span class="token keyword">from</span> gevent<span class="token punctuation">.</span>pywsgi <span class="token keyword">import</span> WSGIServer

<span class="token keyword">from</span> libs<span class="token punctuation">.</span>foo <span class="token keyword">import</span> foo

<span class="token keyword">import</span> os
<span class="token keyword">import</span> json

monkey<span class="token punctuation">.</span>patch_all<span class="token punctuation">(</span><span class="token punctuation">)</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">True</span>

app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'news_demo'</span>

<span class="token comment"># 获取关键词</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/getArticlesForKeyword'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getArticlesForKeyword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取参数</span>
    keyword <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'keyword'</span><span class="token punctuation">)</span>

    <span class="token comment"># 设置搜索配置</span>
    setSearchConfig<span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">'keyword'</span><span class="token punctuation">)</span>

    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>AppiumPath<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 开始查找关键词'</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">'的新闻'</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'python3 neteaseNewsSpider_iOS.py -k </span><span class="token interpolation"><span class="token punctuation">&#123;</span>keyword<span class="token punctuation">&#125;</span></span><span class="token string"> -t keyword'</span></span><span class="token punctuation">)</span>

    articleList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token comment"># 获取文章列表</span>
    resultPath <span class="token operator">=</span> DataBasePath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">'/ZongHe/result.json'</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>resultPath<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>resultPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span>
                articleList <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>outfile<span class="token punctuation">)</span>

    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>result<span class="token operator">=</span>articleList<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span>


<span class="token comment"># 获取用户</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/getInfoForUser'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getInfoForUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取参数</span>
    keyword <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'keyword'</span><span class="token punctuation">)</span>

    <span class="token comment"># 设置搜索配置</span>
    setSearchConfig<span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">)</span>

    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>AppiumPath<span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'say 开始查找用户'</span> <span class="token operator">+</span> keyword <span class="token operator">+</span> <span class="token string">'的新闻'</span><span class="token punctuation">)</span>
    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'python3 neteaseNewsSpider_iOS.py -k </span><span class="token interpolation"><span class="token punctuation">&#123;</span>keyword<span class="token punctuation">&#125;</span></span><span class="token string"> -t user'</span></span><span class="token punctuation">)</span>

    netesaeAccountInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    netesaeAccountArticleInfo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token comment"># 获取用户信息</span>
    netesaeAccountInfoPath <span class="token operator">=</span> DataBasePath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> \
        keyword <span class="token operator">+</span> <span class="token string">'/User'</span> <span class="token operator">+</span> NeteaseAccountJSON
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>netesaeAccountInfoPath<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>netesaeAccountInfoPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span>
            netesaeAccountInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>outfile<span class="token punctuation">)</span>

    <span class="token comment"># 获取用户文章列表</span>
    netesaeAccountArticleInfoPath <span class="token operator">=</span> DataBasePath <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> \
        keyword <span class="token operator">+</span> <span class="token string">'/User'</span> <span class="token operator">+</span> NeteaseAccountArticleJSON
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>netesaeAccountArticleInfoPath<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>netesaeAccountArticleInfoPath<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> outfile<span class="token punctuation">:</span>
            netesaeAccountArticleInfo <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>outfile<span class="token punctuation">)</span>

    <span class="token comment"># 文章不存在处理</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token string">'tab_list'</span> <span class="token keyword">in</span> netesaeAccountArticleInfo<span class="token punctuation">:</span>
        netesaeAccountArticleInfo<span class="token punctuation">[</span><span class="token string">'tab_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span>subscriptionInfo<span class="token operator">=</span>netesaeAccountInfo<span class="token punctuation">,</span> subscriptionArticleInfo<span class="token operator">=</span>netesaeAccountArticleInfo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span>


<span class="token keyword">def</span> <span class="token function">setSearchConfig</span><span class="token punctuation">(</span>keyword<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"keyword"</span><span class="token punctuation">:</span> keyword<span class="token punctuation">,</span>
        <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token builtin">type</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>SearchConfigPath<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>
            config<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


http_server <span class="token operator">=</span> WSGIServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@run_with_reloader</span>
<span class="token keyword">def</span> <span class="token function">run_server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    http_server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="界面部分"><a href="#界面部分" class="headerlink" title="界面部分"></a>界面部分</h1><p>客户端这步非必需，也可简单使用 postman 或浏览器直接调用测试，这里只是为了方便给客户展示效果。<br>用 nw.js 或 Electron 生成一个跨平台的桌面应用，这里直接展示效果。</p>
<h2 id="控制-amp-服务端"><a href="#控制-amp-服务端" class="headerlink" title="控制&amp;服务端"></a>控制&amp;服务端</h2><img src="/images/spider/server.gif"/>

<h2 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h2><img src="/images/spider/mobile.gif"/>

<h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>这个示例是用的 iPhone 完成的，当然用安卓真机或安卓模拟器都是可以的，我都有尝试，模拟器试了夜神模拟器和网易 MUMU 模拟器，但是用这个方案有障碍，就是部分新闻 APP 在检测到系统启用了网络代理后不进入应用或者不加载数据，也就意味着这个方案被夭折，但是如果这个项目真要形成，最终肯定是要服务器跑安卓模拟器或者真机设备来完成数据采集，因为全部使用 iPhone 的话，一不能使用 iOS 模拟器安装第三方APP，二必须要有 Mac 环境，大批量的话成本过于高昂，所以我暂时想到的是可以逆向 apk，hook 类似于检测是否启用了网络代理的判断函数，每次都返回”未使用代理”，或者修改安卓系统本身这样的系统 api，让所有 APP 都检测不到系统使用了网络代理，当然了，这只是我的猜想，具体检测逻辑尚未调研，个人认为这里说的第一种可行性很高，有难度但是不大，至少可以预知比逆向得到请求参数加密的方法和逻辑简单太多，如果你有更好的方案，欢迎留言讨论。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>自动化</tag>
        <tag>Python</tag>
        <tag>抓包</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 下 Docker 和 Docker-Compose 的安装与使用</title>
    <url>/2021/06/14/CentOS-7-%E4%B8%8B-Docker-%E5%92%8C-Docker-Compose-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>随着微服务架构的流行，如何高效、快速地部署和管理各种服务成为了一个问题。传统的部署方式，如手动安装配置环境、手动部署和更新应用，不仅耗费人力物力，而且容易出错，且不易复制和扩展。</p>
<p>为了解决这个问题，Docker诞生了。Docker是一个开源的应用容器引擎，允许开发者打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器或Windows机器上，也可以实现虚拟化。容器是完全沙盒机制，相互之间不会有任何接口。</p>
<span id="more"></span>

<p>Docker带来的好处包括：</p>
<ul>
<li>环境一致性：解决了”在我机器上可以运行”的问题。无论在开发、测试还是生产环境，Docker都可以确保环境的一致性。</li>
<li>便捷的版本控制和分发：Docker的镜像（Image）提供了版本控制的功能，可以方便地回滚到旧版本。而且，Docker的镜像可以通过Docker Hub等平台进行共享和分发，方便了应用的部署和传播。</li>
<li>隔离性：每个Docker容器都在自己的环境中运行，不会影响其他的容器。这为应用提供了良好的安全性。</li>
<li>轻量性和性能高：Docker容器是在宿主机的内核上直接运行，没有传统虚拟化技术的额外开销，所以运行速度快，资源占用小。</li>
</ul>
<p>接下来，我们会详细介绍在CentOS 7下如何安装和使用Docker以及Docker-Compose。</p>
<h2 id="CentOS-7-下-Docker-和-Docker-Compose-的安装"><a href="#CentOS-7-下-Docker-和-Docker-Compose-的安装" class="headerlink" title="CentOS 7 下 Docker 和 Docker-Compose 的安装"></a>CentOS 7 下 Docker 和 Docker-Compose 的安装</h2><p>首先，我们需要在CentOS 7下安装Docker。你可以通过以下步骤进行安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载旧版本(如果安装过的话)</span>
<span class="token function">sudo</span> yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装一些必要的系统工具"><a href="#安装一些必要的系统工具" class="headerlink" title="安装一些必要的系统工具"></a>安装一些必要的系统工具</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="添加软件源信息"><a href="#添加软件源信息" class="headerlink" title="添加软件源信息"></a>添加软件源信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
<span class="token comment">## 更新 yum 缓存</span>
<span class="token function">sudo</span> yum makecache all
<span class="token comment">## 安装 Docker-ce</span>
<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>安装完 Docker 之后，启动 Docker：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在安装完 Docker 之后，你可以通过以下命令来检查 Docker 是否安装成功：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果能看到 “Hello from Docker!” 的消息，说明 Docker 已经成功安装并运行。</p>
<p>接下来我们将安装 Docker Compose。Docker Compose 是 Docker 的一个编排工具，可以用来定义和管理多个 Docker 容器。</p>
<p>首先，下载最新版本的 Docker Compose：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-linux-aarch64 <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后，设置文件的可执行权限：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>你可以通过以下命令来检查 Docker Compose 是否安装成功：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果能看到 Docker Compose 的版本信息，说明 Docker Compose 已经成功安装。</p>
<h3 id="Docker-的常用命令和操作"><a href="#Docker-的常用命令和操作" class="headerlink" title="Docker 的常用命令和操作"></a>Docker 的常用命令和操作</h3><p>在安装完 Docker 之后，你可能会用到以下一些常用的命令和操作：</p>
<ul>
<li>查看 Docker 进程：docker ps</li>
<li>查看所有 Docker 容器（包括停止的）：docker ps -a</li>
<li>在 Docker 容器中执行命令：docker exec -it <container_id> <command></li>
<li>运行 Docker 容器：docker run -d -p <host_port>:<container_port> <image></li>
<li>停止 Docker 容器：docker stop <container_id></li>
<li>删除 Docker 容器：docker rm <container_id></li>
<li>删除 Docker 镜像：docker rmi <image_id></li>
</ul>
<h4 id="docker-inspect-命令"><a href="#docker-inspect-命令" class="headerlink" title="docker inspect 命令"></a>docker inspect 命令</h4><p>这个命令用于返回 Docker 对象的底层信息。这个对象可以是容器、镜像、卷、网络等。docker inspect 返回一个 JSON 对象，包含了 Docker 对象的所有配置和状态信息。例如，如果你想查看一个正在运行的容器的 IP 地址，你可以使用 docker inspect 命令，然后从返回的 JSON 对象中查找相应的字段。<br>使用示例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect container_name_or_id
root@iZj6cgd384kfewiompdstqZ <span class="token punctuation">[</span>02时10分38秒<span class="token punctuation">]</span> <span class="token punctuation">[</span>/var/www/blog<span class="token punctuation">]</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span>
-<span class="token operator">></span> <span class="token comment"># docker inspect a0974a35724f | grep RestartPolicy -A 2</span>
            <span class="token string">"RestartPolicy"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>
                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"always"</span>,
                <span class="token string">"MaximumRetryCount"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="docker-stats-–all-命令"><a href="#docker-stats-–all-命令" class="headerlink" title="docker stats –all 命令"></a>docker stats –all 命令</h4><p>这个命令用于实时显示 Docker 容器的资源使用情况，包括 CPU 使用率、内存使用量、网络 I&#x2F;O、磁盘 I&#x2F;O 等。–all 或 -a 选项表示显示所有容器的资源使用情况，而不仅仅是正在运行的容器。<br>使用示例：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stats <span class="token parameter variable">--all</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这两个命令是 Docker 命令行工具中非常有用的工具，可以帮助你理解和管理 Docker 容器的状态和资源使用情况。</p>
<h3 id="Docker-compose-的常用命令和操作"><a href="#Docker-compose-的常用命令和操作" class="headerlink" title="Docker-compose 的常用命令和操作"></a>Docker-compose 的常用命令和操作</h3><p>在Compose中，你可以用YAML文件定义服务需要的环境，然后通过一个命令就可以从这个配置中创建并启动所有服务。以下是一些常用的Docker Compose命令：</p>
<p>####启动、停止和重启服务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up      <span class="token comment"># 启动服务</span>
<span class="token function">docker-compose</span> stop    <span class="token comment"># 停止服务</span>
<span class="token function">docker-compose</span> restart <span class="token comment"># 重启服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="列出服务的状态"><a href="#列出服务的状态" class="headerlink" title="列出服务的状态"></a>列出服务的状态</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="查看输出（类似于docker-logs）"><a href="#查看输出（类似于docker-logs）" class="headerlink" title="查看输出（类似于docker logs）"></a>查看输出（类似于docker logs）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> service_name <span class="token builtin class-name">command</span> <span class="token comment"># 例如: docker-compose exec db psql -U postgres</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="删除和重建服务"><a href="#删除和重建服务" class="headerlink" title="删除和重建服务"></a>删除和重建服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> down       <span class="token comment"># 停止和删除容器</span>
<span class="token function">docker-compose</span> build      <span class="token comment"># 构建或者重新构建服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="拉取和推送服务"><a href="#拉取和推送服务" class="headerlink" title="拉取和推送服务"></a>拉取和推送服务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> pull      <span class="token comment"># 拉取服务的最新镜像</span>
<span class="token function">docker-compose</span> push      <span class="token comment"># 推送服务镜像至registry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>注意：以上的命令需要在包含docker-compose.yml文件的目录中运行。如果你的docker-compose文件名不是默认的docker-compose.yml，你需要使用-f参数指定文件名，例如 docker-compose -f my-docker-compose.yml up。</p>
<h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>你可以通过使用-p选项在运行容器时指定端口映射<br><code>-p</code>选项允许你将容器内的端口映射到宿主机的端口。其格式为<code>-p &lt;host-port&gt;:&lt;container-port&gt;</code>。例如，如果你有一个在容器的80端口上运行的web服务器，你希望将其映射到宿主机的8080端口上，你可以使用以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 <span class="token parameter variable">-d</span> my-web-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这个例子中，任何发送到宿主机8080端口的请求都会被转发到容器的80端口。</p>
<h2 id="卷映射"><a href="#卷映射" class="headerlink" title="卷映射"></a>卷映射</h2><p><code>-v</code>选项允许你将宿主机的文件或目录映射到容器内的文件或目录。其格式为<code>-v &lt;host-path&gt;:&lt;container-path&gt;</code>。例如，如果你希望将宿主机的<code>/home/user/data</code>目录映射到容器的<code>/app/data</code>目录，你可以使用以下命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /home/user/data:/app/data <span class="token parameter variable">-d</span> my-app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在这个例子中，容器内的<code>/app/data</code>目录将直接映射到宿主机的<code>/home/user/data</code>目录，任何对这个目录的修改（无论是在宿主机上还是在容器内）都会立即反映到另一方。</p>
<p>这两种映射方式都是Docker灵活性的重要表现，它们使得容器能够更好地与宿主机进行交互和数据共享。</p>
<h2 id="Docker-和-Docker-Compose-的优势和适用场景"><a href="#Docker-和-Docker-Compose-的优势和适用场景" class="headerlink" title="Docker 和 Docker-Compose 的优势和适用场景"></a>Docker 和 Docker-Compose 的优势和适用场景</h2><p>Docker 的主要优点在于它能够提供一致的运行环境，解决了 “在我机器上可以运行” 的问题。它还能够提供隔离的环境，使得应用不会相互影响。此外，Docker 还非常轻量级，运行速度快，资源占用小。</p>
<p>Docker-Compose 的主要优点在于它可以通过一个 YAML 文件来定义多个 Docker 容器，使得管理多个 Docker 容器变得非常方便。而且，Docker-Compose 还可以方便地管理容器之间的关系，如网络、存储等。</p>
<p>总的来说，如果你需要快速地部署和管理应用，那么 Docker 和 Docker-Compose 都是非常好的工具。如果你需要管理多个相互关联的 Docker 容器，那么 Docker-Compose 就显得更为有用了。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>在上述内容中，我们已经讲解了Docker和Docker Compose在CentOS 7下的安装过程，以及一些基本的使用命令。然而，Docker的生态系统非常丰富，有很多其他的功能和特性也值得探索和学习。这里，我将补充一些额外的点：</p>
<ul>
<li>Dockerfile： Dockerfile是创建Docker镜像的基础，它是一个文本文件，包含了一系列命令来创建和设置一个新的Docker镜像。学习如何编写Dockerfile，可以帮助你创建适应你的应用需求的定制镜像。</li>
<li>Docker Registry： Docker Registry是存储Docker镜像的地方。最常见的公共registry是Docker Hub，但你也可以设置自己的私有registry。学习如何使用registry，可以帮助你更好地管理你的Docker镜像。</li>
<li>Docker网络： Docker提供了多种网络配置选项，以满足不同的需求。例如，你可以创建一个网络，让容器可以在此网络中相互通信，或者可以将一个容器连接到多个网络。</li>
<li>Docker存储： Docker提供了多种存储选项，如volumes，bind mounts和tmpfs mounts，用于持久化容器数据或共享数据。</li>
<li>Docker安全： 虽然Docker提供了隔离环境，但仍需关注安全性。例如，需要定期更新镜像以获取最新的安全更新，限制容器的权限，避免在容器中运行root用户等。</li>
</ul>
<p>总之，Docker是一个强大且灵活的工具，无论你是在开发环境中快速部署应用，还是在生产环境中运行和扩展应用，它都能提供巨大的帮助。不过，像任何技术一样，最好的使用方式是根据你自己的具体需求和场景去使用它。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>容器化</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>centos</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 中为多说添加最近访客</title>
    <url>/2017/03/17/Hexo-%E4%B8%AD%E4%B8%BA%E5%A4%9A%E8%AF%B4%E6%B7%BB%E5%8A%A0%E6%9C%80%E8%BF%91%E8%AE%BF%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="添加自定义样式"><a href="#添加自定义样式" class="headerlink" title="添加自定义样式"></a>添加自定义样式</h2><h3 id="1-多说后台添加"><a href="#1-多说后台添加" class="headerlink" title="1. 多说后台添加"></a>1. 多说后台添加</h3><p>到多说后台管理-&gt;设置-&gt;基本设置-&gt;自定义css中添加如下css样式：</p>
<span id="more"></span>

<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#ds-reset .ds-avatar img,
#ds-recent-visitors .ds-avatar img &#123;
width: 54px;
height: 54px;     &#x2F;*设置图像的长和宽，这里要根据自己的评论框情况更改*&#x2F;
border-radius: 27px;     &#x2F;*设置图像圆角效果,在这里我直接设置了超过width&#x2F;2的像素，即为圆形了*&#x2F;
-webkit-border-radius: 27px;     &#x2F;*圆角效果：兼容webkit浏览器*&#x2F;
-moz-border-radius: 27px;
box-shadow: inset 0 -1px 0 #3333sf;     &#x2F;*设置图像阴影效果*&#x2F;
-webkit-box-shadow: inset 0 -1px 0 #3333sf;
-webkit-transition: 0.4s;
-webkit-transition: -webkit-transform 0.4s ease-out;
transition: transform 0.4s ease-out;     &#x2F;*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*&#x2F;
-moz-transition: -moz-transform 0.4s ease-out;
&#125;

#ds-reset .ds-avatar img:hover,
#ds-recent-visitors .ds-avatar img:hover &#123;

&#x2F;*设置鼠标悬浮在头像时的CSS样式*&#x2F;    box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
-webkit-box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
transform: rotateZ(360deg);     &#x2F;*图像旋转360度*&#x2F;
-webkit-transform: rotateZ(360deg);
-moz-transform: rotateZ(360deg);
&#125;
&#x2F;*
#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;
background: url(http:&#x2F;&#x2F;www.wuxubj.cn&#x2F;images&#x2F;duoshuo_bkground.jpg) right no-repeat;
&#125;
*&#x2F;
#ds-recent-visitors .ds-avatar &#123;
float: left
&#125;
&#x2F;*隐藏多说底部版权*&#x2F;
#ds-thread #ds-reset .ds-powered-by &#123;
display: none;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="2-Hexo-本地添加自定义CSS（推荐）"><a href="#2-Hexo-本地添加自定义CSS（推荐）" class="headerlink" title="2. Hexo 本地添加自定义CSS（推荐）"></a>2. Hexo 本地添加自定义CSS（推荐）</h3><p>打开<br> <code>/themes/NexT/layout/_custom/header.swig</code><br>或者<br> <code>themes/NexT/source/css/_custom/custom.styl</code><br>输入以下内容（<code>custom.styl</code> 可省略 <code>style</code> 标签）:</p>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;
#ds-reset .ds-avatar img,
#ds-recent-visitors .ds-avatar img &#123;
width: 54px;
height: 54px;     &#x2F;*设置图像的长和宽，这里要根据自己的评论框情况更改*&#x2F;
border-radius: 27px;     &#x2F;*设置图像圆角效果,在这里我直接设置了超过width&#x2F;2的像素，即为圆形了*&#x2F;
-webkit-border-radius: 27px;     &#x2F;*圆角效果：兼容webkit浏览器*&#x2F;
-moz-border-radius: 27px;
box-shadow: inset 0 -1px 0 #3333sf;     &#x2F;*设置图像阴影效果*&#x2F;
-webkit-box-shadow: inset 0 -1px 0 #3333sf;
-webkit-transition: 0.4s;
-webkit-transition: -webkit-transform 0.4s ease-out;
transition: transform 0.4s ease-out;     &#x2F;*变化时间设置为0.4秒(变化动作即为下面的图像旋转360读）*&#x2F;
-moz-transition: -moz-transform 0.4s ease-out;
&#125;
#ds-reset .ds-avatar img:hover,
#ds-recent-visitors .ds-avatar img:hover &#123;
&#x2F;*设置鼠标悬浮在头像时的CSS样式*&#x2F;    box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
-webkit-box-shadow: 0 0 10px #fff;
rgba(255, 255, 255, .6), inset 0 0 20px rgba(255, 255, 255, 1);
transform: rotateZ(360deg);     &#x2F;*图像旋转360度*&#x2F;
-webkit-transform: rotateZ(360deg);
-moz-transform: rotateZ(360deg);
&#125;
&#x2F;*
#ds-thread #ds-reset .ds-textarea-wrapper textarea &#123;
background: url(http:&#x2F;&#x2F;www.wuxubj.cn&#x2F;images&#x2F;duoshuo_bkground.jpg) right no-repeat;
&#125;
*&#x2F;
#ds-recent-visitors .ds-avatar &#123;
float: left
&#125;
&#x2F;*隐藏多说底部版权*&#x2F;
#ds-thread #ds-reset .ds-powered-by &#123;
display: none;
&#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="添加-dom"><a href="#添加-dom" class="headerlink" title="添加 dom"></a>添加 dom</h2><p>在需要添加最近访客的网页对应的 markdown 文件中添加如下代码：</p>
<pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&gt; 最近访客
&lt;div class&#x3D;&quot;ds-recent-visitors&quot; data-num-items&#x3D;&quot;28&quot; data-avatar-size&#x3D;&quot;42&quot; id&#x3D;&quot;ds-recent-visitors&quot;&gt;&lt;&#x2F;div&gt;
&lt;br&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="添加最近访客-dom-到模板文件中（此做法更新抛弃，采用下面做法）"><a href="#添加最近访客-dom-到模板文件中（此做法更新抛弃，采用下面做法）" class="headerlink" title="添加最近访客 dom 到模板文件中（此做法更新抛弃，采用下面做法）"></a>添加最近访客 dom 到模板文件中（此做法更新抛弃，采用下面做法）</h2><p>在博客站点根目录的 <code>scaffolds/*.md</code> 模板文件中添加以上 <code>dom</code> 代码，以后新建 <code>[layout]</code> 便无需手动拷贝。</p>
<h2 id="编辑主题配置文件"><a href="#编辑主题配置文件" class="headerlink" title="编辑主题配置文件"></a>编辑主题配置文件</h2><p>在主题配置文件 <code>_config.yml</code> 中添加：</p>
<pre class="line-numbers language-none"><code class="language-none"># 最近访客
duoshuo_recent_visit: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="修改-reward-swi-文件"><a href="#修改-reward-swi-文件" class="headerlink" title="修改 reward.swi 文件"></a>修改 <code>reward.swi</code> 文件</h2><p>文件路径:</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;themes&#x2F;NexT&#x2F;layout&#x2F;_macro&#x2F;reward.swi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="在顶部添加内容："><a href="#在顶部添加内容：" class="headerlink" title="在顶部添加内容："></a>在顶部添加内容：</h2><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">&#123;% if theme.duoshuo_recent_visit %&#125;
&lt;blockquote&gt;
&lt;p&gt;最近访客&lt;&#x2F;p&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;div class&#x3D;&quot;ds-recent-visitors&quot; data-num-items&#x3D;&quot;28&quot; data-avatar-size&#x3D;&quot;42&quot; id&#x3D;&quot;ds-recent-visitors&quot;&gt;
&lt;&#x2F;div&gt;&lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&#123;% endif %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="保存，重启-Hexo-即可"><a href="#保存，重启-Hexo-即可" class="headerlink" title="保存，重启 Hexo 即可"></a>保存，重启 Hexo 即可</h2>]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 主动选择 option</title>
    <url>/2017/04/11/JavaScript-%E4%B8%BB%E5%8A%A8%E9%80%89%E6%8B%A9-option/</url>
    <content><![CDATA[<span id="more"></span>

<p>主动选择 <code>select</code> 中的 <code>option</code></p>
<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F; 获取默认type
var defaultType &#x3D; &#39;1&#39;;
var typeSelect &#x3D; document.getElementById(&quot;type&quot;);
for(var i &#x3D; 0; i &lt; typeSelect.options.length; i++) &#123;
	if(typeSelect.options[i].value &#x3D;&#x3D;&#x3D; defaultType) &#123;
		typeSelect.selectedIndex &#x3D; i;
		break;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins master-slave 的应用及 iOS 项目持续集成</title>
    <url>/2018/10/12/Jenkins%20master-slave%20%E7%9A%84%E5%BA%94%E7%94%A8%E5%8F%8A%20iOS%20%E9%A1%B9%E7%9B%AE%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在公司一台服务机上搭建了<code>Jenkins</code>，<code>Linux</code>环境，主要用于<code>WEP 前端</code>、<code>Android</code>、<code>iOS</code>的<code>CI</code>服务，在没有过多去了解的情况下，我想当然的以为如果要打包 <code>iOS</code>，<code>Jenkins</code>宿主机系统环境必须是<code>MacOS</code>，因为知道除了<code>Mac</code>，其它系统均无法打包<code>iOS</code>或<code>Mac</code>应用程序（当然这点在目前看来仍然是对的），于是在公司那台硬盘只剩下可怜巴巴的<code>20G</code>空间的<code>Mac mini</code>上安装了<code>Jenkins</code>，叫安卓同事把他的<code>Jenkins job</code>又重新放在了<code>Mac mini</code>上，本想着事情就这么不完美的收尾了，今天忽然在群里看见开发者朋友讨论<code>Jenkins</code>说到<code>Jenkins</code>支持<code>master-slave</code>（主从）模式，支持非宿主机作为一个<code>Node</code>节点为其服务，一脸蒙蔽，又要把<code>Jenkins</code>放回<code>Ubuntu</code>，让这台<code>mini</code>单独为<code>iOS</code>打包服务。</p>
<span id="more"></span>

<h1 id="新建Node节点机"><a href="#新建Node节点机" class="headerlink" title="新建Node节点机"></a>新建<code>Node</code>节点机</h1><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><p>步骤 <code> Manage Jenkins</code> -&gt; <code>Manage Nodes</code> -&gt; <code>New Node</code>；<br>取名，比如叫<code>slave-iOS</code>，勾选<code>Permanent Agent</code>，下一步；<br>看说明填写：</p>
<ul>
<li>Name： 节点机名称</li>
<li>Description: 节点机描述</li>
<li><h1 id="of-executors：节点机最大job并发数"><a href="#of-executors：节点机最大job并发数" class="headerlink" title="of executors：节点机最大job并发数"></a>of executors：节点机最大<code>job</code>并发数</h1></li>
<li>Remote root directory	: 节点机用于存放<code>workspace</code>的目录，确保你要使用的用户有该目录的读写权限，比如设置为<code>/Users/VanJay/Documents/Work/tungee/jenkins</code></li>
<li>Labels：标签，用于<code>Jenkins</code>查找<code>Node</code></li>
<li>Usage：自行选择，<ul>
<li>Use this node as much as possible：最大程序使用</li>
<li>Only build jobs with label expressions matching this node：只在使用该节点机才使用</li>
</ul>
</li>
<li>Launch method：连接节点机的方式<ul>
<li>Launch agent agents via SSH：通过<code>SSH</code>连接<ul>
<li>Host：节点机<code>IP</code></li>
<li>Credentials：凭据，自行添加，如果使用<code>Username with password</code>，记得把验证策略下面这项选第三项</li>
<li>Host Key Verification Strategy：<ul>
<li>Known hosts file Verification Strategy：把<code>master``ssh</code>公钥拷贝到<code>slave</code>机<code>known_hosts</code></li>
<li>Manually provided key Verification Strategy:手动提供 key</li>
<li>Manually trusted key Verification Strategy：手动信任</li>
<li>Non verifying Verification Strategy：不验证</li>
</ul>
</li>
</ul>
</li>
<li>Launch agent via execution of command on the master：指定<code>shell</code> 脚本连接</li>
</ul>
</li>
<li>AvailabilityL <code>slave</code>机可用性<ul>
<li>Keep this agent online as much as possible：让<code>slave</code>尽可能在线</li>
<li>Take this agent online according to a schedule：根据计划保持在线</li>
<li>Take this agent online when in demand, and offline when idle：需要时在线，闲置时离线</li>
</ul>
</li>
</ul>
<h2 id="Node-Properties：节点机属性设置"><a href="#Node-Properties：节点机属性设置" class="headerlink" title="Node Properties：节点机属性设置"></a>Node Properties：节点机属性设置</h2><p>可以在<code>slave</code>机上设置工具位置和环境变量</p>
<ul>
<li>Environment variables：自定义环境变量，比如可以导出<code>PATH=$PATH:/usr/local/bin</code></li>
<li>Tool Locations：工具位置：比如可以设置<code>JDK</code>目录<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home</code></li>
</ul>
<h1 id="使用slave机器"><a href="#使用slave机器" class="headerlink" title="使用slave机器"></a>使用<code>slave</code>机器</h1><p>在<code>job</code>里<code>General</code>项下勾选<code>Restrict where this project can be run</code>，指定<code>slave</code>机<code>label</code>就可以使用了。</p>
<h2 id="事情总不会那么一帆风顺"><a href="#事情总不会那么一帆风顺" class="headerlink" title="事情总不会那么一帆风顺"></a>事情总不会那么一帆风顺</h2><p>使用<code>slave</code>机器后你会发现原本在<code>slave</code>本机跑没事的<code>shell</code>在这里可能有问题，基本都是<code>commomand not fuond</code>，都是命令找不到，那就<code>export</code>这些命令，把整个<code>/usr/local/bin</code>或者<code>/usr/bin</code>加进去（没必要，个人建议用到什么加什么）。<br>比如加入报<code>pod command not found</code>，在<code>slave</code>机运行<code>which pod</code>：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  blog [master] ⚡ which pod
&#x2F;usr&#x2F;local&#x2F;bin&#x2F;pod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="嵌入环境变量"><a href="#嵌入环境变量" class="headerlink" title="嵌入环境变量"></a>嵌入环境变量</h2><h3 id="安装Inject-environment-variables插件，安装方法可在本博客搜索-Ubuntu-18-04-搭建-Jenkins-查看文章。"><a href="#安装Inject-environment-variables插件，安装方法可在本博客搜索-Ubuntu-18-04-搭建-Jenkins-查看文章。" class="headerlink" title="安装Inject environment variables插件，安装方法可在本博客搜索 Ubuntu-18-04-搭建-Jenkins 查看文章。"></a>安装<code>Inject environment variables</code>插件，安装方法可在本博客搜索 <code>Ubuntu-18-04-搭建-Jenkins</code> 查看文章。</h3><img src="/images/jenkins/inject-environment-varibles.png"/>

<h1 id="正常shell打包"><a href="#正常shell打包" class="headerlink" title="正常shell打包"></a>正常<code>shell</code>打包</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">source ~&#x2F;.alias

# 清除上一次生成的 beta 包
rm -rf $&#123;OUTPUT_FOLDER&#125;

export LANG&#x3D;en_US.UTF-8

PODS_DIR&#x3D;&quot;Pods&quot;

if [[ -d &quot;$PODS_DIR&quot; ]]; then
	rm -rf &quot;$PODS_DIR&quot;
fi

setproxy

pod install

unsetproxy

# 解锁 keychain
security default-keychain -s login.keychain
security unlock-keychain -p &quot;123456.&quot; login.keychain

fastlane beta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>source ~/.alias</code>是为了能找到<code>setproxy</code>和<code>unsetproxy ``shell</code> 翻墙加快 <code>pod install</code> 速度，必须解锁<code>keychain</code>，否则无法正常签名，导致构建失败，如果是在本机操作则不需要这两项。</p>
<h1 id="fastlane-内容"><a href="#fastlane-内容" class="headerlink" title="fastlane 内容"></a>fastlane 内容</h1><p>只编写了打<code>beta</code>和<code>release</code>包</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">fastlane_version &quot;2.28.3&quot;

default_platform :ios

scheme_name &#x3D; &quot;DongKe&quot;
workspace &#x3D; &#39;DongKe.xcworkspace&#39;

configuration_Debug &#x3D; &#39;Debug&#39;
configuration_Release &#x3D; &#39;Release&#39;

export_method_ad_hoc &#x3D; &#39;ad-hoc&#39;
export_method_appstore &#x3D; &#39;app-store&#39;

team_id &#x3D; &#39;TEAM_ID&#39;
username &#x3D; &#39;xxx@xxx.com&#39;
app_identifier &#x3D; &#39;app_identifier&#39;

platform :ios do
    before_all do
   		# cocoapods
    end

    desc &quot;截图&quot;
    lane :snap do
      snapshot(
        scheme: scheme_name
      )
      frameit(white: true, path: &#39;fastlane&#x2F;screenshots&#39;)
    end

  	lane :test do
    end

    desc &quot;打包测试包&quot;
    lane :beta do |options|

        #根据传入参数version设置app的版本号
      # increment_version_number(version_number: option[:version])
      # #自动增加build号
      # increment_build_number

      # 获取是第几轮测试
      # test_turn &#x3D; options[:test_turn]

      # 自动运行测试工具
      # scan
      # 崩溃分析
      # crashlytics
      #证书签名
      # sigh(
      #   adhoc: true,
      #   output_path: &#39;fastlane&#x2F;mobileprovision&#39;
      # )

      #编译打包
      version &#x3D; get_info_plist_value(path: &quot;#&#123;scheme_name&#125;&#x2F;Info.plist&quot;, key: &quot;CFBundleShortVersionString&quot;)
      build &#x3D; get_info_plist_value(path: &quot;#&#123;scheme_name&#125;&#x2F;Info.plist&quot;, key: &quot;CFBundleVersion&quot;)
      output_directory &#x3D; File.expand_path(&quot;..&quot;, Dir.pwd) + File::Separator + &#39;build&#x2F;beta&#x2F;&#39; + Time.now.strftime(&#39;%Y-%m-%d&#39;)
      output_name &#x3D; &quot;#&#123;scheme_name&#125;_#&#123;build&#125;_#&#123;export_method_ad_hoc&#125;_#&#123;Time.now.strftime(&#39;%Y-%m-%d %H%M&#39;)&#125;.ipa&quot;

      gym(
        silent: true,
        clean: true,
        buildlog_path: &quot;fastlane&#x2F;fastlane_log&quot;,
        workspace: workspace,
        scheme: scheme_name,
        configuration: configuration_Release,
        output_directory: output_directory,
        output_name: output_name,
        export_method: export_method_ad_hoc,
	      export_xcargs: &quot;-allowProvisioningUpdates&quot;
        )
        # 上传到 fir
        # sh &quot;fir publish #&#123;output_directory&#125;&#x2F;#&#123;output_name&#125; -V -Q&quot;
  	end

    desc &quot;打包正式包&quot;
    lane :release do |options|
      #证书签名
      # sigh(
      #   adhoc: false,
      #   output_path: &#39;.&#x2F;fastlane&#x2F;mobileprovision&#39;
      # )

      #编译打包
      version &#x3D; get_info_plist_value(path: &quot;#&#123;scheme_name&#125;&#x2F;Info.plist&quot;, key: &quot;CFBundleShortVersionString&quot;)
      build &#x3D; get_info_plist_value(path: &quot;#&#123;scheme_name&#125;&#x2F;Info.plist&quot;, key: &quot;CFBundleVersion&quot;)
      output_directory &#x3D; File.expand_path(&quot;..&quot;, Dir.pwd) + File::Separator + &#39;build&#x2F;release&#x2F;&#39; + Time.now.strftime(&#39;%Y-%m-%d&#39;)
      output_name &#x3D; &quot;#&#123;scheme_name&#125;_#&#123;build&#125;_#&#123;export_method_appstore&#125;_#&#123;Time.now.strftime(&#39;%Y-%m-%d %H%M&#39;)&#125;.ipa&quot;
      gym(
        silent: true,
        clean: true,
        buildlog_path: &quot;fastlane&#x2F;fastlane_log&quot;,
        workspace: workspace,
        scheme: scheme_name,
        configuration: configuration_Release,
        output_directory: output_directory,
        output_name: output_name,
        export_method: export_method_appstore,
        export_xcargs: &quot;-allowProvisioningUpdates&quot;
        )
    end

    lane :all do |options|
      beta
      release
    end

  	after_all do |lane|

  	end

  	error do |lane, exception|

  	end
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>工程自动化</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI</tag>
        <tag>持续集成</tag>
        <tag>工程自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 动态调整分区大小</title>
    <url>/2018/11/06/Linux-%E5%8A%A8%E6%80%81%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>Ubuntu</code>根分区<code>\</code>空间告急，即将使用完毕</p>
<h1 id="先清理出一定空间"><a href="#先清理出一定空间" class="headerlink" title="先清理出一定空间"></a>先清理出一定空间</h1><h2 id="移除不再需要的软件包"><a href="#移除不再需要的软件包" class="headerlink" title="移除不再需要的软件包"></a>移除不再需要的软件包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> autoremove<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="清理Ubuntu中的APT缓存"><a href="#清理Ubuntu中的APT缓存" class="headerlink" title="清理Ubuntu中的APT缓存"></a>清理Ubuntu中的APT缓存</h2><span id="more"></span>
<p>你可以使用以下命令查看此缓存的大小：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/cache/apt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除之</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="清理缩略图缓存"><a href="#清理缩略图缓存" class="headerlink" title="清理缩略图缓存"></a>清理缩略图缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.cache/thumbnails/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="手动删除老旧Linux内核"><a href="#手动删除老旧Linux内核" class="headerlink" title="手动删除老旧Linux内核"></a>手动删除老旧Linux内核</h2><p>首先使用如下命令列出当前 Ubuntu 中所有已经安装的 Linux Kernel：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dpkg <span class="token parameter variable">--list</span> <span class="token string">'linux-image*'</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>删除旧版内核与删除任何其他软件包一样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove linux-image-VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>请自行将上述 VERSION 替换为要清除的内核版本，系统极客建议保持至少两个或三个最新版本内核，这样在无法使用最新内核启动系统时至少还有那么几个可替代品救急</p>
<h2 id="删除多余的孤立包"><a href="#删除多余的孤立包" class="headerlink" title="删除多余的孤立包"></a>删除多余的孤立包</h2><p>首先我们要说说什么是 Ubuntu 系统中的孤立包（也叫多余的包）：假设你安装了一个名为 myprogram 的软件包，而这个包又依赖于 mylib 库，这个库通常在安装 myprogram 时便会自动安装到系统当中。当你卸载 myprogram 应用时，mylib 库可能仍然保留在系统中。 此种情况下，mylib 就会成为一个孤立的包。</p>
<p>gtkorphan 这款图形化应用可以可以轻松找出并删除 Ubuntu 系统中的孤立包，先使用如下终端命令进行安装：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gtkorphan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装好后在「多余的包」选项卡中即可对查找、删除孤立包</p>
<h2 id="使用GUI工具释放Ubuntu空间"><a href="#使用GUI工具释放Ubuntu空间" class="headerlink" title="使用GUI工具释放Ubuntu空间"></a>使用GUI工具释放Ubuntu空间</h2><p><a href="https://github.com/oguzhaninan/Stacer/releases">Stacer地址</a>，下载 deb 包安装打开、使用</p>
<h1 id="调整分区、根目录扩容"><a href="#调整分区、根目录扩容" class="headerlink" title="调整分区、根目录扩容"></a>调整分区、根目录扩容</h1><p>我的是多系统，安装了 WIndows 10 、Deepin 15.8 和 Ubuntu 18.04，Ubuntu 根分区只给了10G，home 给了50，但是用不完，目标，从<code>home</code>起始位置分10个G给根分区（根分区在 home 分区之前）。<br>由于根分区和 home 都被 Ubuntu 在使用，所以无法在 Ubuntu 中操作本身使用的根分区和<code>home</code>分区，所以应该到外部操作。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://gparted.org/download.php">gparted</a></p>
<p>GParted is a free partition manager that enables you to resize, copy, and move partitions without data loss.</p>
<h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>在其它 Linux 系统中操作 Ubuntu 磁盘，不同版本 Linux 安装 gparted 命令如下：</p>
<table>
<thead>
<tr>
<th align="center">Linux 发行版本</th>
<th align="center">安装命令</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Debian</td>
<td align="center">sudo apt-get install gparted</td>
</tr>
<tr>
<td align="center">Fedora</td>
<td align="center">su -c “yum install gparted”</td>
</tr>
<tr>
<td align="center">Mageia</td>
<td align="center">sudo urpmi gparted</td>
</tr>
<tr>
<td align="center">OpenSUSE</td>
<td align="center">sudo zypper install gparted</td>
</tr>
<tr>
<td align="center">Ubuntu</td>
<td align="center">sudo apt-get install gparted</td>
</tr>
<tr>
<td align="center">Deepin</td>
<td align="center">sudo apt-get install gparted</td>
</tr>
<tr>
<td align="center">安装后执行</td>
<td align="center"></td>
</tr>
</tbody></table>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">gparted</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>使用软件，方法同大多数磁盘分区调整工具</p>
<h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>如果本机没有多系统（对于方案一，硬盘拆下来接到其它机器也是可以的），由于<code>gparted</code>官方提供了可启动的刻录镜像，我们直接下载<code>iSO</code>镜像刻录至<code>CD</code>或者<code>USB</code>设备，从该启动盘启动即可操作 Ubuntu 所使用的分区</p>
<p>比如当前最新的桌面版是 <a href="https://downloads.sourceforge.net/gparted/gparted-live-0.33.0-1-amd64.iso">gparted-live-0.33.0-1-amd64.iso</a>，你可以下载该镜像刻录至 U 盘，随后从 U 盘启动进行操作</p>
<p>PS：刻录可使用 <a href="https://www.balena.io/etcher/">Etcher</a> ，全平台使用</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>修改系统所在分区或引导所在分区存在无法启动被修改的分区的系统的风险，建议新手或者以防万一，对系统做一个完整备份，这里是一些免费磁盘和分区工具，可以完整备份分区或磁盘，使用方法自行看文档。</p>
<p><a href="http://clonezilla.org/">Clonezilla</a>  </p>
<p><a href="http://doclone.nongnu.org/">doClone</a></p>
<p><a href="http://www.fsarchiver.org/">FSArchiver</a></p>
<p><a href="http://g4l.sourceforge.net/">G4L</a></p>
<p><a href="http://www.feyrer.de/g4u">g4u</a></p>
<p><a href="http://partimage.org/">Partimage</a></p>
<p><a href="http://partclone.org/">Partclone</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分区调整</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux和Mac关闭ssh的密码登录，限制使用私钥登录</title>
    <url>/2023/04/14/Linux%E5%92%8CMac%E5%85%B3%E9%97%ADssh%E7%9A%84%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%EF%BC%8C%E9%99%90%E5%88%B6%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>在当今的网络环境中，安全性是一个不容忽视的话题。尤其是对于那些暴露在公网的服务器来说，采取额外的安全措施变得尤为重要。SSH（Secure Shell）是一种广泛使用的远程登录协议，允许用户安全地访问和管理远程服务器。默认情况下，SSH支持两种认证方式：密码认证和基于密钥的认证。然而，密码认证方式较为脆弱，容易受到暴力破解攻击。为了增强安全性，推荐关闭SSH的密码登录，仅允许使用私钥登录。以下是在Linux和MacOS下实现此目的的步骤。</p>
<span id="more"></span>

<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="上传密钥至目标服务器"><a href="#上传密钥至目标服务器" class="headerlink" title="上传密钥至目标服务器"></a>上传密钥至目标服务器</h3><p>首先，确保你已经生成了SSH密钥对，并将公钥上传到目标服务器上。使用以下命令：</p>
<pre class="line-numbers language-none"><code class="language-none">ssh-copy-id -f -i &#x2F;path&#x2F;to&#x2F;pub&#x2F;file -p port user@domain.or.ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="修改sshd配置"><a href="#修改sshd配置" class="headerlink" title="修改sshd配置"></a>修改sshd配置</h3><p>接下来，修改SSH服务器的配置文件<code>/etc/ssh/sshd_config</code>，禁用密码登录并启用基于密钥的登录。</p>
<h4 id="手动修改"><a href="#手动修改" class="headerlink" title="手动修改"></a>手动修改</h4><p>使用<code>nano</code>或<code>vim</code>编辑器打开配置文件：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo nano &#x2F;etc&#x2F;ssh&#x2F;sshd_config
# 或者
sudo vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>找到以下行并进行修改：</p>
<pre class="line-numbers language-none"><code class="language-none">#PasswordAuthentication yes
PasswordAuthentication no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>确保<code>PubkeyAuthentication</code>选项被设置为<code>yes</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">PubkeyAuthentication yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="使用sed修改"><a href="#使用sed修改" class="headerlink" title="使用sed修改"></a>使用sed修改</h4><p>或者，可以使用<code>sed</code>命令直接修改配置：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo sed -i &#39;s&#x2F;^#*PasswordAuthentication[[:space:]]*.*$&#x2F;PasswordAuthentication no&#x2F;&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config
sudo sed -i &#39;s&#x2F;^#*PubkeyAuthentication[[:space:]]*.*$&#x2F;PubkeyAuthentication yes&#x2F;&#39; &#x2F;etc&#x2F;ssh&#x2F;sshd_config
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="重启sshd服务"><a href="#重启sshd服务" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h3><p>修改配置后，需要重启SSH服务以应用更改：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo systemctl restart sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h2><p>MacOS的步骤与Linux类似，但配置文件的位置可能略有不同。</p>
<h3 id="上传密钥至目标服务器-1"><a href="#上传密钥至目标服务器-1" class="headerlink" title="上传密钥至目标服务器"></a>上传密钥至目标服务器</h3><p>与Linux相同，使用<code>ssh-copy-id</code>命令上传公钥。</p>
<h3 id="修改sshd配置-1"><a href="#修改sshd配置-1" class="headerlink" title="修改sshd配置"></a>修改sshd配置</h3><p>MacOS中的配置文件通常位于<code>/private/etc/ssh/sshd_config</code>。</p>
<h4 id="手动修改-1"><a href="#手动修改-1" class="headerlink" title="手动修改"></a>手动修改</h4><p>使用<code>nano</code>或<code>vim</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo nano &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config
# 或者
sudo vim &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然后，按照Linux的指示进行修改。</p>
<h4 id="使用sed修改-1"><a href="#使用sed修改-1" class="headerlink" title="使用sed修改"></a>使用sed修改</h4><p>在MacOS上，<code>sed</code>命令的使用略有不同，需要添加<code>&#39;&#39; -e</code>进行编辑：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo sed -i &#39;&#39; &#39;s&#x2F;^#*UsePAM[[:space:]]*.*$&#x2F;UsePAM yes&#x2F;&#39; &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config
sudo sed -i &#39;&#39; &#39;&#x2F;^#*ChallengeResponseAuthentication[[:space:]]*.*$&#x2F;d&#39; &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config
echo &quot;ChallengeResponseAuthentication no&quot; | sudo tee -a &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config &gt; &#x2F;dev&#x2F;null
sudo sed -i &#39;&#39; &#39;s&#x2F;^#*PasswordAuthentication[[:space:]]*.*$&#x2F;PasswordAuthentication no&#x2F;&#39; &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config
sudo sed -i &#39;&#39; &#39;s&#x2F;^#*kbdInteractiveAuthentication[[:space:]]*.*$&#x2F;kbdInteractiveAuthentication no&#x2F;&#39; &#x2F;private&#x2F;etc&#x2F;ssh&#x2F;sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="重启sshd服务-1"><a href="#重启sshd服务-1" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h3><p>MacOS上重启SSH服务的命令为：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo launchctl stop com.openssh.sshd
sudo launchctl start com.openssh.sshd
# 或
sudo launchctl unload &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;ssh.plist
sudo launchctl load -w &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;ssh.plist <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过上述步骤，你可以有效地提升服务器的安全性，避免潜在的安全威胁。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>MUI webview选项卡 首次只加载首页，点击触发打开页面</title>
    <url>/2017/04/15/MUI%20webview%E9%80%89%E9%A1%B9%E5%8D%A1%20%E9%A6%96%E6%AC%A1%E5%8F%AA%E5%8A%A0%E8%BD%BD%E9%A6%96%E9%A1%B5%EF%BC%8C%E7%82%B9%E5%87%BB%E8%A7%A6%E5%8F%91%E6%89%93%E5%BC%80%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p><code>MUI</code> 官方的 <code>Demo</code> 的加载 webview 选项卡的逻辑是一次创建全部的选项卡，只默认显示默认创建的页面，这个页面逻辑没必要这么复杂，扩展性也不强，修改一处多处要修改，我做了简单修改，直接修改数据源，就可以达到更改全部的效果。</p>
<p>直接上全部代码</p>
<span id="more"></span>

<pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;!DOCTYPE html&gt;
&lt;html&gt;

	&lt;head&gt;
		&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;
		&lt;title&gt;Main&lt;&#x2F;title&gt;
		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;config.js&quot;&gt;&lt;&#x2F;script&gt;
		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;helper.js&quot;&gt;&lt;&#x2F;script&gt;
		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;common-head.js&quot;&gt;&lt;&#x2F;script&gt;
		&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;..&#x2F;css&#x2F;main.css&quot;&gt;
	&lt;&#x2F;head&gt;

	&lt;body&gt;
		&lt;nav class&#x3D;&quot;mui-bar mui-bar-tab&quot;&gt;
			&lt;a class&#x3D;&quot;mui-tab-item&quot;&gt;
				&lt;span class&#x3D;&quot;mui-icon iconfont icon-zuanshi&quot;&gt;&lt;&#x2F;span&gt;
				&lt;span class&#x3D;&quot;mui-tab-label&quot;&gt;&lt;&#x2F;span&gt;
			&lt;&#x2F;a&gt;
			&lt;a class&#x3D;&quot;mui-tab-item&quot;&gt;
				&lt;span class&#x3D;&quot;mui-icon iconfont icon-8&quot;&gt;&lt;&#x2F;span&gt;
				&lt;span class&#x3D;&quot;mui-tab-label&quot;&gt;&lt;&#x2F;span&gt;
			&lt;&#x2F;a&gt;
			&lt;a class&#x3D;&quot;mui-tab-item&quot;&gt;
				&lt;span class&#x3D;&quot;mui-icon iconfont icon-zoushi&quot;&gt;&lt;&#x2F;span&gt;
				&lt;span class&#x3D;&quot;mui-tab-label&quot;&gt;&lt;&#x2F;span&gt;
			&lt;&#x2F;a&gt;
			&lt;a class&#x3D;&quot;mui-tab-item&quot;&gt;
				&lt;span class&#x3D;&quot;mui-icon iconfont icon-yonghuming&quot;&gt;&lt;&#x2F;span&gt;
				&lt;span class&#x3D;&quot;mui-tab-label&quot;&gt;&lt;&#x2F;span&gt;
			&lt;&#x2F;a&gt;
		&lt;&#x2F;nav&gt;
		&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;
			&#x2F;&#x2F;mui初始化
			mui.init();

			var subpage_style &#x3D; &#123;
				top: &#39;0px&#39;,
				bottom: &#39;60px&#39;
			&#125;;

			var subPages &#x3D; [&#123;
					href: &#39;wonderfulRecommend.html&#39;,
					style: subpage_style,
					id: config.pageID.wonderfulRecommend,
					name: &quot;精彩推荐&quot;
				&#125;,
				&#123;
					href: &#39;lotteryHall.html&#39;,
					style: subpage_style,
					id: config.pageID.lotteryHall,
					name: &quot;购彩大厅&quot;
				&#125;,
				&#123;
					href: &#39;drawTrend-pullRefresh.html&#39;,
					style: subpage_style,
					id: config.pageID.drawTrend_pullRefresh,
					name: &quot;开奖走势&quot;
				&#125;,
				&#123;
					href: &#39;myLottery.html&#39;,
					style: subpage_style,
					id: config.pageID.myLottery,
					name: &quot;我的彩票&quot;
				&#125;
			]
			&#x2F;&#x2F; 默认显示页面
			var defaultPageIndex &#x3D; 0;
			mui.ready(function() &#123;
				&#x2F;&#x2F; 动态添加 href 和名称
				var tabBarItems &#x3D; document.getElementsByClassName(&#39;mui-tab-item&#39;);
				for(var i &#x3D; 0; i &lt; tabBarItems.length; i++) &#123;
					var tabBarItem &#x3D; tabBarItems[i];
					&#x2F;&#x2F; 设置目标页面
					tabBarItem.setAttribute(&#39;href&#39;, subPages[i].href);
					&#x2F;&#x2F; 设置索引
					tabBarItem.setAttribute(&#39;index&#39;, i);
					&#x2F;&#x2F; 设置文字标题
					var tab_item_label &#x3D; tabBarItem.querySelector(&#39;.mui-tab-label&#39;);
					tab_item_label.innerHTML &#x3D; subPages[i].name;
					&#x2F;&#x2F; 默认激活的 mui-tab-item
					if(i &#x3D;&#x3D; defaultPageIndex) &#123;
						tabBarItem.classList.add(&#39;mui-active&#39;);
					&#125;
				&#125;
			&#125;)
			
			&#x2F;&#x2F;创建子页面，首个选项卡页面显示，其它均隐藏；
			mui.plusReady(function() &#123;
				var self &#x3D; plus.webview.currentWebview();
				var defaultPage &#x3D; plus.webview.create(subPages[defaultPageIndex].href, subPages[defaultPageIndex].id, subPages[defaultPageIndex].style);
				self.append(defaultPage);
			&#125;);
			var activeTab &#x3D; subPages[defaultPageIndex].id;
			mui(&#39;.mui-bar-tab&#39;).on(&#39;tap&#39;, &#39;a&#39;, function(e) &#123;
				var targetTab &#x3D; this.getAttribute(&#39;href&#39;);

				if(targetTab &#x3D;&#x3D; activeTab) &#123;
					return;
				&#125;
				var index &#x3D; this.getAttribute(&#39;index&#39;);
				log(index);
				&#x2F;&#x2F; 先获取
				var destPage &#x3D; plus.webview.getWebviewById(subPages[index].id);
				if(destPage) &#123;
					destPage.show();
				&#125; else &#123;
					var self &#x3D; plus.webview.currentWebview();
					var sub &#x3D; plus.webview.create(targetTab, subPages[index].id, subPages[index].style);
					self.append(sub);
				&#125;
				&#x2F;&#x2F;隐藏当前;  
				plus.webview.hide(activeTab); &#x2F;&#x2F;这里应该是关闭页面，不知道隐藏与关闭区别有多大  
				&#x2F;&#x2F;更改当前活跃的选项卡  
				activeTab &#x3D; targetTab;
			&#125;);
		&lt;&#x2F;script&gt;
	&lt;&#x2F;body&gt;

&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>MUI</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac QuickLook配置</title>
    <url>/2022/05/18/Mac-QuickLook%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Mac 上的快速预览功能能很大程度上提高工作效率，系统默认支持一些常规的文件预览，一些第三方的文件就需要自己安装插件，但有些文件名后缀不被插件识别，但我们有时仅仅只是想文本预览，此时可以往第三方插件里添加支持，写此篇文章做个备忘。</p>
<span id="more"></span>

<h2 id="手动安装放置插件目录"><a href="#手动安装放置插件目录" class="headerlink" title="手动安装放置插件目录"></a>手动安装放置插件目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/Library/QuickLook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Mac-平台安装常用插件"><a href="#Mac-平台安装常用插件" class="headerlink" title="Mac 平台安装常用插件"></a>Mac 平台安装常用插件</h2><p>常用 QuickLook 插件很多都发布在了 homebrew，我们可以去 <a href="https://github.com/sindresorhus/quick-look-plugins"><code>https://github.com/sindresorhus/quick-look-plugins</code> </a>手动下载，也可以通过 homebrew 安装。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize suspicious-package apparency quicklookase qlvideo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="更改了之后希望使插件生效"><a href="#更改了之后希望使插件生效" class="headerlink" title="更改了之后希望使插件生效"></a>更改了之后希望使插件生效</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ via ⬢ v18.0.0
➜ qlmanage <span class="token parameter variable">-r</span>
qlmanage: resetting quicklookd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="10-15-Catalina-及以上处理"><a href="#10-15-Catalina-及以上处理" class="headerlink" title="10.15 Catalina 及以上处理"></a>10.15 Catalina 及以上处理</h2><p>如果 macOS 系统版本是 10.15 Catalina 及以上，且插件不能正常生效，试试</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xattr <span class="token parameter variable">-r</span> ~/Library/QuickLook
xattr <span class="token parameter variable">-d</span> <span class="token parameter variable">-r</span> com.apple.quarantine ~/Library/QuickLook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h2 id="QLColorCode-类型支持扩展"><a href="#QLColorCode-类型支持扩展" class="headerlink" title="QLColorCode 类型支持扩展"></a>QLColorCode 类型支持扩展</h2><p>QLColorCode 插件可以方便以文本形式看一些文件，默认支持了很多文件类型，如果想添加更多文件类型支持，可以编辑其配置文件再使插件重新生效即可。<br>其路径为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/Library/QuickLook/QLColorCode.qlgenerator/Contents/Info.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在 <code>Document Content Type Identifiers</code> 数组下添加文件类型</p>
<img src="/images/qlcolorcode.jpg"/>

<h2 id="查看文件信息"><a href="#查看文件信息" class="headerlink" title="查看文件信息"></a>查看文件信息</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ via ⬢ v18.0.0
➜ mdls <span class="token parameter variable">-name</span> kMDItemContentType /Users/VanJay/Documents/Work/KuGou/ComposeSinger/KGComposeSinger/Podfile.lock
kMDItemContentType <span class="token operator">=</span> <span class="token string">"dyn.ah62d4rv4ge80255drq"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>记得 <code>qlmanage -r</code> 使插件生效</p>
<h2 id="Windows-平台-QuickLook"><a href="#Windows-平台-QuickLook" class="headerlink" title="Windows 平台 QuickLook"></a>Windows 平台 QuickLook</h2><p>这么好用的功能如果在 Windows 能用就极好，有开发者开发了 Windows 版本的，可以试试。</p>
<p><a href="https://github.com/QL-Win/QuickLook/">https://github.com/QL-Win/QuickLook/</a></p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>系统设置</tag>
        <tag>Mac</tag>
        <tag>QuickLook</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 彻底卸载 MYSQL 解决疑难杂症</title>
    <url>/2017/03/18/Mac-%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BD-MYSQL-%E8%A7%A3%E5%86%B3%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
    <content><![CDATA[<h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><p>备份看个人了，可以用软件如 <code>Navicat</code> 导出，也可以用 <code>mysqldump</code> 命令导出。</p>
<h2 id="kill-mysql相关进程"><a href="#kill-mysql相关进程" class="headerlink" title="kill mysql相关进程"></a>kill <code>mysql</code>相关进程</h2><p>终端运行 <code>ps -ax | grep mysql</code> 查看 <code>mysql</code> 相关进程， 有的话 <code>kill</code></p>
<span id="more"></span>

<h2 id="卸载-Homebrew-安装的mysql"><a href="#卸载-Homebrew-安装的mysql" class="headerlink" title="卸载 Homebrew 安装的mysql"></a>卸载 Homebrew 安装的mysql</h2><p>卸载全部以前用 <code>brew</code> 安装	的 <code>mysql</code>，先 <code>brew list</code> 查看安装的 <code>mysql</code> 版本，假如列出了 <code>mysql@5.5</code>， 则运行 <code>brew uninstall mysql@5.5</code>，卸载完后执行 <code>brew cleanup</code>。</p>
<h2 id="移除残留文件"><a href="#移除残留文件" class="headerlink" title="移除残留文件"></a>移除残留文件</h2><p>删除与 <code>mysql</code> 相关的文件</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo rm &#x2F;usr&#x2F;local&#x2F;mysql;
sudo rm -rf &#x2F;usr&#x2F;local&#x2F;var&#x2F;mysql;
sudo rm -rf &#x2F;usr&#x2F;local&#x2F;mysql*;
sudo rm -rf &#x2F;Library&#x2F;StartupItems&#x2F;MySQLCOM;
sudo rm -rf &#x2F;Library&#x2F;PreferencePanes&#x2F;My*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="移除残留自动登陆项"><a href="#移除残留自动登陆项" class="headerlink" title="移除残留自动登陆项"></a>移除残留自动登陆项</h2><p>移除自动登陆项，如果你安装过 <code>DMG</code> 版本的 	<code>mysql</code>，则把以下命令中的 <code>LaunchAgents </code> 替换为 <code>LaunchDaemons </code> 再执行一次</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">launchctl unload -w ~&#x2F;Library&#x2F;LaunchAgents&#x2F;homebrew.mxcl.mysql.plist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>unload</code> 之后再删除该文件，</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo rm ~&#x2F;Library&#x2F;LaunchAgents&#x2F;homebrew.mxcl.mysql.plist
或
sudo rm ~&#x2F;Library&#x2F;LaunchDaemons&#x2F;homebrew.mxcl.mysql.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="移除残留配置"><a href="#移除残留配置" class="headerlink" title="移除残留配置"></a>移除残留配置</h2><p><code>subl /etc/hostconfig</code> &#96;</p>
<p>后输入 <code>Remove the line MYSQLCOM=-YES-</code> &#96; </p>
<h2 id="移除残留偏好设置"><a href="#移除残留偏好设置" class="headerlink" title="移除残留偏好设置"></a>移除残留偏好设置</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">rm -rf ~&#x2F;Library&#x2F;PreferencePanes&#x2F;My*;
sudo rm -rf &#x2F;Library&#x2F;Receipts&#x2F;mysql*;
sudo rm -rf &#x2F;Library&#x2F;Receipts&#x2F;MySQL*;
sudo rm -rf &#x2F;private&#x2F;var&#x2F;db&#x2F;receipts&#x2F;*mysql*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="重启电脑，重新安装-mysql"><a href="#重启电脑，重新安装-mysql" class="headerlink" title="重启电脑，重新安装 mysql"></a>重启电脑，重新安装 <code>mysql</code></h2><p>建议使用 <code>Homebrew</code> 安装</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">brew search mysql
brew install 你要的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h2 id="启动-mysql"><a href="#启动-mysql" class="headerlink" title="启动 mysql"></a>启动 <code>mysql</code></h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">mysql.server start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果报 <code>commond not found</code>，则在 <code>~/.zshrc</code> 或者 <code>~/.bashrc</code> 中加入以下两行（注意替换mysql路径）：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">export MYSQL&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;mysql@5.6&#x2F;5.6.35&#x2F;support-files
export PATH&#x3D;$MYSQL:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>系统疑难</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>MYSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac查看CPU具体型号</title>
    <url>/2016/11/16/Mac%E6%9F%A5%E7%9C%8BCPU%E5%85%B7%E4%BD%93%E5%9E%8B%E5%8F%B7/</url>
    <content><![CDATA[<h2 id="查看-CPU-型号"><a href="#查看-CPU-型号" class="headerlink" title="查看 CPU 型号"></a>查看 CPU 型号</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sysctl machdep.cpu.brand_string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="查看系统相关信息"><a href="#查看系统相关信息" class="headerlink" title="查看系统相关信息"></a>查看系统相关信息</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">➜ system_profiler -listDataTypes
Available Datatypes:
SPParallelATADataType
SPUniversalAccessDataType
SPSecureElementDataType
SPApplicationsDataType
SPAudioDataType
SPBluetoothDataType
SPCameraDataType
SPCardReaderDataType
SPComponentDataType
SPiBridgeDataType
SPDeveloperToolsDataType
SPDiagnosticsDataType
SPDisabledSoftwareDataType
SPDiscBurningDataType
SPEthernetDataType
SPExtensionsDataType
SPFibreChannelDataType
SPFireWireDataType
SPFirewallDataType
SPFontsDataType
SPFrameworksDataType
SPDisplaysDataType
SPHardwareDataType
SPHardwareRAIDDataType
SPInstallHistoryDataType
SPLegacySoftwareDataType
SPNetworkLocationDataType
SPLogsDataType
SPManagedClientDataType
SPMemoryDataType
SPNVMeDataType
SPNetworkDataType
SPPCIDataType
SPParallelSCSIDataType
SPPowerDataType
SPPrefPaneDataType
SPPrintersSoftwareDataType
SPPrintersDataType
SPConfigurationProfileDataType
SPRawCameraDataType
SPSASDataType
SPSerialATADataType
SPSPIDataType
SPSmartCardsDataType
SPSoftwareDataType
SPStartupItemDataType
SPStorageDataType
SPSyncServicesDataType
SPThunderboltDataType
SPUSBDataType
SPNetworkVolumeDataType
SPWWANDataType
SPAirPortDataType<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看对应信息，比如查看硬件概述"><a href="#查看对应信息，比如查看硬件概述" class="headerlink" title="查看对应信息，比如查看硬件概述"></a>查看对应信息，比如查看硬件概述</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">➜ system_profiler SPHardwareDataType
Hardware:

    Hardware Overview:

      Model Name: MacBook Air
      Model Identifier: MacBookAir7,2
      Processor Name: Intel Core i7
      Processor Speed: 2.2 GHz
      Number of Processors: 1
      Total Number of Cores: 2
      L2 Cache (per Core): 256 KB
      L3 Cache: 4 MB
      Memory: 8 GB
      Boot ROM Version: 184.0.0.0.0
      SMC Version (system): 2.27f2
      Serial Number (system): FVFW5047J1WV
      Hardware UUID: 61763F2C-47F2-580E-9E02-409384172D75<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看有线网络信息"><a href="#查看有线网络信息" class="headerlink" title="查看有线网络信息"></a>查看有线网络信息</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">➜ system_profiler SPEthernetDataType
Ethernet Cards:

    USB 10&#x2F;100 LAN:

      Type: USB
      BSD name: en3
      Kext name: AppleUSBECM.kext
      Location: &#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;AppleUSBECM.kext
      Version: 5.0.0
      MAC Address: 9c:eb:e8:b0:a6:ff
      Product ID: 17
      Vendor ID: 10007

    USB:

      Type: USB
      BSD name: en4
      Kext name: AppleUSBNCM.kext
      Location: &#x2F;System&#x2F;Library&#x2F;Extensions&#x2F;AppleUSBNCM.kext
      Version: 5.0.0
      MAC Address: de:56:e7:af:d6:89
      Product ID: 4776
      Vendor ID: 1452<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="查看应用信息"><a href="#查看应用信息" class="headerlink" title="查看应用信息"></a>查看应用信息</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">system_profiler SPApplicationsDataType<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="生成-XML-报告"><a href="#生成-XML-报告" class="headerlink" title="生成 XML 报告"></a>生成 XML 报告</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">➜ system_profiler -xml SPEthernetDataType SPFirewallDataType &gt; ~&#x2F;Desktop&#x2F;system_profile-EthernetFirewall.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="更多使用查看帮助"><a href="#更多使用查看帮助" class="headerlink" title="更多使用查看帮助"></a>更多使用查看帮助</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">➜ system_profiler -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac使用</tag>
      </tags>
  </entry>
  <entry>
    <title>OC 千位分隔符格式化数字</title>
    <url>/2015/08/16/OC-%E5%8D%83%E4%BD%8D%E5%88%86%E9%9A%94%E7%AC%A6%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E5%AD%97/</url>
    <content><![CDATA[<p>工作中总是碰到很多需求，比如金额需要以千位分隔的方式显示，这是OC版本转换方法，其它语言的可参考，代码如下：</p>
<span id="more"></span>

<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token comment">/**
 转换目标字符串为千位分隔显示

 @param digitString 目标字符串
 @return 转换结果字符串
 */</span>
<span class="token operator">+</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>groupedThousandsDigitStringWithStr<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>digitString <span class="token punctuation">&#123;</span>
    
    <span class="token comment">// 判断小数部位</span>
    NSRange rangeOfPoint <span class="token operator">=</span> <span class="token punctuation">[</span>digitString rangeOfString<span class="token punctuation">:</span><span class="token string">@"."</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSString <span class="token operator">*</span>pointStr <span class="token operator">=</span> <span class="token string">@""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rangeOfPoint<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        pointStr <span class="token operator">=</span> <span class="token punctuation">[</span>digitString substringFromIndex<span class="token punctuation">:</span>rangeOfPoint<span class="token punctuation">.</span>location<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 去掉小数部位</span>
    digitString <span class="token operator">=</span> <span class="token punctuation">[</span>digitString substringToIndex<span class="token punctuation">:</span>rangeOfPoint<span class="token punctuation">.</span>location<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 去掉小数位后长度小于3直接返回原字符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>digitString<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>digitString stringByAppendingString<span class="token punctuation">:</span>pointStr<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    NSMutableString <span class="token operator">*</span>processString <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span>digitString<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    NSInteger location <span class="token operator">=</span> processString<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span>
    NSMutableArray <span class="token operator">*</span>processArray <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>location <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        NSString <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">[</span>processString substringWithRange<span class="token punctuation">:</span><span class="token function">NSMakeRange</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token punctuation">[</span>processArray addObject<span class="token punctuation">:</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>location <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> location <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            NSString <span class="token operator">*</span>t <span class="token operator">=</span> <span class="token punctuation">[</span>processString substringWithRange<span class="token punctuation">:</span><span class="token function">NSMakeRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>processArray addObject<span class="token punctuation">:</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        location <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    NSMutableArray <span class="token operator">*</span>resultsArray <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableArray array<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSInteger k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span>str <span class="token keyword">in</span> processArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
        NSMutableString <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString stringWithString<span class="token punctuation">:</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> processArray<span class="token punctuation">.</span>count <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">[</span>tmp insertString<span class="token punctuation">:</span><span class="token string">@","</span> atIndex<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span>resultsArray addObject<span class="token punctuation">:</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">[</span>resultsArray addObject<span class="token punctuation">:</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    NSMutableString <span class="token operator">*</span>resultString <span class="token operator">=</span> <span class="token punctuation">[</span>NSMutableString string<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSInteger i <span class="token operator">=</span> resultsArray<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        NSString <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token punctuation">[</span>resultsArray objectAtIndex<span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span>resultString appendString<span class="token punctuation">:</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">return</span> <span class="token punctuation">[</span>resultString stringByAppendingString<span class="token punctuation">:</span>pointStr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>格式化</tag>
        <tag>OC字符串</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title>OC用AFN做Soap请求webService</title>
    <url>/2016/01/10/OC%E7%94%A8AFN%E5%81%9ASoap%E8%AF%B7%E6%B1%82webService/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好吧，标题有点拗口。我平时一般不发帖子，因为感觉太花时间了，还是喜欢宅着研究技术。但这个帖子网上资料还是没有很详细的，周末了明天休息，所以现在写下来总结一下，也希望能帮助有这方面需求的开发者朋友，如果错误之处还请谅解，欢迎指出。排版大家就不要在意了，我也不清楚这个支不支持markdown，就直接手动简单排一下。</p>
<span id="more"></span>

<p>进入主题，最近公司做一个新项目，后台是webService，要做iOS版本的客户端，由于我以前不怎么了解这方面，所以云里雾里得摸索了两天，因为后台人员也不清楚我具体要传什么给他，所以。。。。我就两边跑。。。。最终我确定问题还是在于后端，今天上午完美解决，对webService和WSDL以及CXF有了个大概的了解。</p>
<p>我就不做过多的概念介绍了，我很懒不愿复制粘贴，只要说一些细节让大家少走弯路就可以。</p>
<p>在继续往下之前你需要先去了解一些概念：SOAP、WSDL、CXF，和他们之间的关系。这里我觉得这个帖子比较好，推荐一下，Web Service笔记（三）：wsdl 与 soap协议详解 , 对XML或者HTML稍微有点了解看了这篇文章之后对WSDL基本都能大体了解了，这里也感谢一下作者。</p>
<p>假定现在你对它们有个大体的了解，SOAP请求就是你发一段XML给后台，然后后台返回数据给你，它是通用的，参数后台会在XML中提取，所以我们在这个过程中其实就是在于传的XML的内容，本文也会讲到中间遇到的一些细节。</p>
<p>首先不要把它想的很复杂，弄通了封装一下，其实这种方式传的东西个人感觉和普通的GET&#x2F;POST差不多，甚或更方便。WSDL文档由于我现在不在公司连不上服务器所以就不介绍。</p>
<h2 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h2><p>首先XML内容，你的SOAP协议版本要和后台一致，不然后台报错会说版本不一致之类的，这里列出，请自行对比。</p>
<h2 id="SOAP-1-1"><a href="#SOAP-1-1" class="headerlink" title="SOAP 1.1"></a>SOAP 1.1</h2><h3 id="以下是-SOAP-1-1-请求和响应示例。所显示的占位符需替换为实际值。"><a href="#以下是-SOAP-1-1-请求和响应示例。所显示的占位符需替换为实际值。" class="headerlink" title="以下是 SOAP 1.1 请求和响应示例。所显示的占位符需替换为实际值。"></a>以下是 SOAP 1.1 请求和响应示例。所显示的占位符需替换为实际值。</h3><ul>
<li>请求</li>
</ul>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">POST &#x2F;WebServices&#x2F;MobileCodeWS.asmx HTTP&#x2F;1.1
Host: webservice.webxml.com.cn
Content-Type: text&#x2F;xml; charset&#x3D;utf-8
Content-Length: length
SOAPAction: &quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;getMobileCodeInfo&quot;


&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;soap:Envelope xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:soap&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;
  &lt;soap:Body&gt;
    &lt;getMobileCodeInfo xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;mobileCode&gt;string&lt;&#x2F;mobileCode&gt;
      &lt;userID&gt;string&lt;&#x2F;userID&gt;
    &lt;&#x2F;getMobileCodeInfo&gt;
  &lt;&#x2F;soap:Body&gt;
&lt;&#x2F;soap:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应</li>
</ul>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">HTTP&#x2F;1.1 200 OK
Content-Type: text&#x2F;xml; charset&#x3D;utf-8
Content-Length: length

&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;soap:Envelope xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:soap&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;
  &lt;soap:Body&gt;
    &lt;getMobileCodeInfoResponse xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;getMobileCodeInfoResult&gt;string&lt;&#x2F;getMobileCodeInfoResult&gt;
    &lt;&#x2F;getMobileCodeInfoResponse&gt;
  &lt;&#x2F;soap:Body&gt;
&lt;&#x2F;soap:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="SOAP-1-2"><a href="#SOAP-1-2" class="headerlink" title="SOAP 1.2"></a>SOAP 1.2</h2><h3 id="以下是-SOAP-1-2-请求和响应示例。所显示的占位符需替换为实际值。"><a href="#以下是-SOAP-1-2-请求和响应示例。所显示的占位符需替换为实际值。" class="headerlink" title="以下是 SOAP 1.2 请求和响应示例。所显示的占位符需替换为实际值。"></a>以下是 SOAP 1.2 请求和响应示例。所显示的占位符需替换为实际值。</h3><ul>
<li>请求</li>
</ul>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">POST &#x2F;WebServices&#x2F;MobileCodeWS.asmx HTTP&#x2F;1.1
Host: webservice.webxml.com.cn
Content-Type: application&#x2F;soap+xml; charset&#x3D;utf-8
Content-Length: length

&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;soap12:Envelope xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:soap12&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2003&#x2F;05&#x2F;soap-envelope&quot;&gt;
  &lt;soap12:Body&gt;
    &lt;getMobileCodeInfo xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;mobileCode&gt;string&lt;&#x2F;mobileCode&gt;
      &lt;userID&gt;string&lt;&#x2F;userID&gt;
    &lt;&#x2F;getMobileCodeInfo&gt;
  &lt;&#x2F;soap12:Body&gt;
&lt;&#x2F;soap12:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>响应</li>
</ul>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">HTTP&#x2F;1.1 200 OK
Content-Type: application&#x2F;soap+xml; charset&#x3D;utf-8
Content-Length: length

&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;soap12:Envelope xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:soap12&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2003&#x2F;05&#x2F;soap-envelope&quot;&gt;
  &lt;soap12:Body&gt;
    &lt;getMobileCodeInfoResponse xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;getMobileCodeInfoResult&gt;string&lt;&#x2F;getMobileCodeInfoResult&gt;
    &lt;&#x2F;getMobileCodeInfoResponse&gt;
  &lt;&#x2F;soap12:Body&gt;
&lt;&#x2F;soap12:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><strong>直接说注意点，拿SOAP 1.1 请求做例子，要传的XML文档为:</strong></p>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;
&lt;soap:Envelope xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns:xsd&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema&quot; xmlns:soap&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot;&gt;
  &lt;soap:Body&gt;
    &lt;getMobileCodeInfo xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;mobileCode&gt;string&lt;&#x2F;mobileCode&gt;
      &lt;userID&gt;string&lt;&#x2F;userID&gt;
    &lt;&#x2F;getMobileCodeInfo&gt;
  &lt;&#x2F;soap:Body&gt;
&lt;&#x2F;soap:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>&lt;soap: Body&gt;</strong> 标签以外的不用改，head一般也不用传，要调用的方法和参数都包在body里面，比如这个例子中， <strong>getMobileCodeInfo</strong> 是WSDL文档发布的你要调用的方法名，其后接的xmlns是你wsdl文档中对应的 <strong>targetNameSpace</strong> ，这个和你JAVA中的 <strong>package</strong> 名对应，比如你后台JAVA代码中该方法中import的package为 <code>com.xxxx.oooo</code> 那么这里的xmlns就是 <code>ooo.xxxx.com</code> ，<code>mobileCode和userID</code>是这个方法中接收的参数名，那么也就是说该方法在其JAVA后台大概是这个样子</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> getMobileCodeInfo <span class="token punctuation">(</span><span class="token annotation punctuation">@WebParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"mobileCode"</span> <span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"userID"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> mobileCode<span class="token punctuation">,</span> <span class="token class-name">String</span> userID<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>对应的WSDL中该operation的input下也应该有两个name就是mobileCode和userID，注意@WebParam(name&#x3D;”mobileCode” , name&#x3D;”userID”) 不能少，这个注解让后台认识参数名，少了后台会一直报unexpected element ，我们后台一开始就少了这个，搞了很久。这种情况是参数分开传的情况，有的后台的参数直接一个request，但是里面包含有几个键值对也其实就是相当于几个参数，刚接触的新手在这里很容易绕弯，比如我后台有这个个方法  public login (WebParam(name&#x3D;”req” ) String req) ，很明显这里只接一个参数，而且叫做req，但是这个请求就是需要账户名和密码，所以在对应的xml中文档应这样写body中内容</p>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;soap12:Body&gt;
    &lt;login xmlns&#x3D;&quot;http:&#x2F;&#x2F;WebXml.com.cn&#x2F;&quot;&gt;
      &lt;req&gt;&#123;@&quot;userNameKey&quot;: zhangsan, @&quot;password&quot;: pwdpwd&#125;&lt;&#x2F;req&gt;
    &lt;&#x2F;login&gt;
&lt;&#x2F;soap12:Body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="NSURLSession请求soap"><a href="#NSURLSession请求soap" class="headerlink" title="NSURLSession请求soap"></a>NSURLSession请求soap</h2><p>最后请求地址就是你的wsdl文档中的Endpoint address地址，请求体就是该XML，发个POST请求就完事啦，这里又有事了，本人是强迫症，因为一开始就用的AFN请求，咋请求咋报错，于是跟着网上找的DEMO换NSURLConnection，一不小心成功了一次，但是这个iOS已经废弃了不喜欢，于是用NSURLSession，恩也成功了，但是还是感觉好麻烦，发个NSURLSession请求soap的代码:</p>
 <pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"> NSString <span class="token operator">*</span>soapStr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\
 &lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\
 xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\
 &lt;soap:Header>\
 &lt;/soap:Header>\
 &lt;soap:Body>\
 &lt;login xmlns=\"targetNameSpace地址/\">\
 &lt;param1>test&lt;/param1>\
 &lt;param2>test&lt;/param2>\
 &lt;/login>\
 &lt;/soap:Body>\
 &lt;/soap:Envelope>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 NSURL <span class="token operator">*</span>url<span class="token operator">=</span><span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span><span class="token string">@"你自己wsdl文档中对应的endpoint address"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 NSMutableURLRequest <span class="token operator">*</span>request<span class="token operator">=</span><span class="token punctuation">[</span>NSMutableURLRequest requestWithURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token comment">// 访问方式</span>
 <span class="token punctuation">[</span>request setHTTPMethod<span class="token punctuation">:</span><span class="token string">@"POST"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token comment">// 设置请求头(请求头也可以不设置，前两个设不设置都一样，应该默认的，但是SOAPAction我怎么都设置不对，不设置也可以，干脆不设置了)</span>
 <span class="token comment">// [request addValue:@"text/xml; charset=utf-8" forHTTPHeaderField:@"Content-Type"];</span>
<span class="token comment">//  [request addValue:[NSString stringWithFormat:@"%zd", soapStr.length] forHTTPHeaderField:@"Content-Length"];</span>
 <span class="token comment">//    [request addValue:@"nameSpace/methodName" forHTTPHeaderField:@"SOAPAction"];</span>
  
 <span class="token comment">// body内容</span>
 <span class="token punctuation">[</span>request setHTTPBody<span class="token punctuation">:</span><span class="token punctuation">[</span>soapStr dataUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 NSURLSession <span class="token operator">*</span>session <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLSession sharedSession<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 NSURLSessionDataTask <span class="token operator">*</span>task <span class="token operator">=</span> <span class="token punctuation">[</span>session dataTaskWithRequest<span class="token punctuation">:</span>request completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSData <span class="token operator">*</span> _Nullable data<span class="token punctuation">,</span> NSURLResponse <span class="token operator">*</span> _Nullable response<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nullable error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 NSString <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span>data  encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"进入成功回调Session-----结果：%@----请求地址：%@"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> response<span class="token punctuation">.</span>URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
 <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"Session----失败----%@"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token punctuation">[</span>task resume<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="AFHTTPRequestOperation-请求"><a href="#AFHTTPRequestOperation-请求" class="headerlink" title="AFHTTPRequestOperation 请求"></a>AFHTTPRequestOperation 请求</h2><p>经过和后台七改八改都无果，我干脆自己了解这些文档规范，在上午确定我操作没错之后，直接说后台那边有问题，然后后台改，重启服务器我请求没有任何进展，最后竟然是什么问题你们知道么。。前一天其实我已经传对了XML，只是后台改动的代码放错了地方，只放到了正式服没有放测试服，我也是，，，醉了，，不过也好，要是那么顺畅我就不会去过多了解这方面了。<br>好了，要传什么，注意点都讲了，现在到了客户端的问题，用官方SDK请求是不是感觉很麻烦？是的，对于用惯了AFN或者自己封装的网络请求工具类的人来说如果每次都要写这多么代码发一次请求太痛苦了，于是我想可不可以用AFN请求SOAP，一开始想用manager发请求，直接把XML当params发POST肯定是直接挂了，于是想要设置HTTPBody要不用AFHTTPRequestOperation？没错这样确实可以，代码如下：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec">NSMutableURLRequest <span class="token operator">*</span>request<span class="token operator">=</span><span class="token punctuation">[</span>NSMutableURLRequest requestWithURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">[</span>request setHTTPMethod<span class="token punctuation">:</span><span class="token string">@"POST"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token punctuation">[</span>request setHTTPBody<span class="token punctuation">:</span><span class="token punctuation">[</span>soapStr dataUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 AFHTTPRequestOperation <span class="token operator">*</span>operation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>AFHTTPRequestOperation alloc<span class="token punctuation">]</span> initWithRequest<span class="token punctuation">:</span>request<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token comment">// 设置返回数据格式</span>
 operation<span class="token punctuation">.</span>responseSerializer <span class="token operator">=</span> <span class="token punctuation">[</span>AFHTTPResponseSerializer serializer<span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token punctuation">[</span>operation setCompletionBlockWithSuccess<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>AFHTTPRequestOperation <span class="token operator">*</span> _Nonnull operation<span class="token punctuation">,</span> id  _Nonnull responseObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 NSString <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span>responseObject  encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
 <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"AFN--成功--结果：%@----返回数据%@"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> responseObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span> failure<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>AFHTTPRequestOperation <span class="token operator">*</span> _Nonnull operation<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nonnull error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"AFN--失败--%@"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
 <span class="token punctuation">[</span>operation start<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这一看感觉和NSURLSession没多大差别，还是想用manager，关键问题就在于设置request的HTTBbody为XML，但是AFHTTPSessionManager已经把request封装了，默认用的params，怎么改？于是想改动或者添加AFN内部方法，但是总感觉这样不好，万一更新库了又要搞一遍。于是想能否拦截这个request，或者通过manager.requestSerializer设置HTTPBody，敲set浏览一下没有HTTPBody字眼的，用KVC也不行，那样还是相当于把XML当params传了，伤心绝望之时看到这个方法:</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"> <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setQueryStringSerializationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span>NSString <span class="token operator">*</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span>request<span class="token punctuation">,</span> NSDictionary <span class="token operator">*</span>parameters<span class="token punctuation">,</span> NSError <span class="token operator">*</span>__autoreleasing <span class="token operator">*</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// </span>
<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="简单封装-AFHTTPSessionManager-请求"><a href="#简单封装-AFHTTPSessionManager-请求" class="headerlink" title="简单封装 AFHTTPSessionManager 请求"></a>简单封装 AFHTTPSessionManager 请求</h2><p>一看里面有request 有 params 高兴了，说不定在这里能拦截，于是直接写</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setQueryStringSerializationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span>NSString <span class="token operator">*</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span>request<span class="token punctuation">,</span> NSDictionary <span class="token operator">*</span>parameters<span class="token punctuation">,</span> NSError <span class="token operator">*</span>__autoreleasing <span class="token operator">*</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> soapStr<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>请求成功，happy。<br>接下来另一个问题了，简单封装一下，我收到的是二进制，所以把AFN封装成了个工具类，供大家参考，欢迎提出改进</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token comment">/**
*  请求SOAP，返回NSData
*
*  @param url      请求地址
*  @param soapBody soap的XML中方法和参数段
*  @param success  成功block
*  @param failure  失败block
*/</span>
<span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>SOAPData<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>url soapBody<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>soapBody success<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>id responseObject<span class="token punctuation">)</span><span class="token punctuation">)</span>success failure<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">^</span><span class="token punctuation">)</span><span class="token punctuation">(</span>NSError <span class="token operator">*</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>failure <span class="token punctuation">&#123;</span>
     
    NSString <span class="token operator">*</span>soapStr <span class="token operator">=</span> <span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span>
                         <span class="token string">@"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\
                         &lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\
                         xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\
                         &lt;soap:Header>\
                         &lt;/soap:Header>\
                         &lt;soap:Body>%@&lt;/soap:Body>\
                         &lt;/soap:Envelope>"</span><span class="token punctuation">,</span>soapBody<span class="token punctuation">]</span><span class="token punctuation">;</span>
     
    AFHTTPSessionManager <span class="token operator">*</span>manager <span class="token operator">=</span> <span class="token punctuation">[</span>AFHTTPSessionManager manager<span class="token punctuation">]</span><span class="token punctuation">;</span>
    manager<span class="token punctuation">.</span>responseSerializer <span class="token operator">=</span> <span class="token punctuation">[</span>AFXMLParserResponseSerializer serializer<span class="token punctuation">]</span><span class="token punctuation">;</span>
     
    <span class="token comment">// 设置请求超时时间</span>
    manager<span class="token punctuation">.</span>requestSerializer<span class="token punctuation">.</span>timeoutInterval <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
     
    <span class="token comment">// 返回NSData</span>
    manager<span class="token punctuation">.</span>responseSerializer <span class="token operator">=</span> <span class="token punctuation">[</span>AFHTTPResponseSerializer serializer<span class="token punctuation">]</span><span class="token punctuation">;</span>
     
    <span class="token comment">// 设置请求头，也可以不设置</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token string">@"application/soap+xml; charset=utf-8"</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Content-Type"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setValue<span class="token punctuation">:</span><span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"%zd"</span><span class="token punctuation">,</span> soapStr<span class="token punctuation">.</span>length<span class="token punctuation">]</span> forHTTPHeaderField<span class="token punctuation">:</span><span class="token string">@"Content-Length"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
 
    <span class="token comment">// 设置HTTPBody</span>
    <span class="token punctuation">[</span>manager<span class="token punctuation">.</span>requestSerializer setQueryStringSerializationWithBlock<span class="token punctuation">:</span><span class="token operator">^</span>NSString <span class="token operator">*</span><span class="token punctuation">(</span>NSURLRequest <span class="token operator">*</span>request<span class="token punctuation">,</span> NSDictionary <span class="token operator">*</span>parameters<span class="token punctuation">,</span> NSError <span class="token operator">*</span>__autoreleasing <span class="token operator">*</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> soapStr<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
     
    <span class="token punctuation">[</span>manager POST<span class="token punctuation">:</span>url parameters<span class="token punctuation">:</span>soapStr success<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURLSessionDataTask <span class="token operator">*</span> _Nonnull task<span class="token punctuation">,</span> id  _Nonnull responseObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 把返回的二进制数据转为字符串</span>
         NSString <span class="token operator">*</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSString alloc<span class="token punctuation">]</span> initWithData<span class="token punctuation">:</span>responseObject encoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span><span class="token punctuation">;</span>
         
        <span class="token comment">// 利用正则表达式取出&lt;return>&lt;/return>之间的字符串</span>
        NSRegularExpression <span class="token operator">*</span>regular <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSRegularExpression alloc<span class="token punctuation">]</span> initWithPattern<span class="token punctuation">:</span><span class="token string">@"(?&lt;=return\\>).*(?=&lt;/return)"</span> options<span class="token punctuation">:</span>NSRegularExpressionCaseInsensitive error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
         
        NSDictionary <span class="token operator">*</span>dict <span class="token operator">=</span> <span class="token punctuation">[</span>NSDictionary dictionary<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>NSTextCheckingResult <span class="token operator">*</span>checkingResult <span class="token keyword">in</span> <span class="token punctuation">[</span>regular matchesInString<span class="token punctuation">:</span>result options<span class="token punctuation">:</span><span class="token number">0</span> range<span class="token punctuation">:</span><span class="token function">NSMakeRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             
            <span class="token comment">// 得到字典</span>
            dict <span class="token operator">=</span> <span class="token punctuation">[</span>NSJSONSerialization JSONObjectWithData<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>result substringWithRange<span class="token punctuation">:</span>checkingResult<span class="token punctuation">.</span>range<span class="token punctuation">]</span> dataUsingEncoding<span class="token punctuation">:</span>NSUTF8StringEncoding<span class="token punctuation">]</span> options<span class="token punctuation">:</span>NSJSONReadingMutableLeaves error<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 请求成功并且结果有值把结果传出去</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">&amp;&amp;</span> dict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">success</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
         
    <span class="token punctuation">&#125;</span> failure<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURLSessionDataTask <span class="token operator">*</span> _Nullable task<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nonnull error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">failure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>原文地址：<a href="http://www.cocoachina.com/bbs/read.php?tid-456019.html">OC用AFN做Soap请求webService</a></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>差不多了，如果有什么问题指正欢迎大家留言。排版真的很丑，大家见谅，洗洗睡了。</p>
<blockquote>
<p>Author: VanJay <br>如需转载，请注明出处</p>
</blockquote>
]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>AFN</tag>
        <tag>Soap</tag>
        <tag>WebService</tag>
      </tags>
  </entry>
  <entry>
    <title>UITabBar 点击动画与切换 VC 动画实现</title>
    <url>/2019/06/09/UITabBar-%E7%82%B9%E5%87%BB%E5%8A%A8%E7%94%BB%E4%B8%8E%E5%88%87%E6%8D%A2-VC-%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>假如一个 APP 能带来良好的交互体验，那么它一定是”活的”。</p>
</blockquote>
<span id="more"></span>

<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><img src="/images/iOS/effect.gif"/>

<p>show me the code.</p>
<h2 id="tabBarController-切换-selectedViewController-的动画添加"><a href="#tabBarController-切换-selectedViewController-的动画添加" class="headerlink" title="tabBarController 切换 selectedViewController 的动画添加"></a>tabBarController 切换 selectedViewController 的动画添加</h2><pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">- (BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController &#123;
    NSUInteger shouldSelectIndex &#x3D; [tabBarController.viewControllers indexOfObject:viewController];
    if (tabBarController.selectedIndex &#x3D;&#x3D; shouldSelectIndex) &#123;
        return YES;
    &#125;

    CATransition *animation &#x3D; [CATransition animation];
    animation.duration &#x3D; 0.3;
    animation.timingFunction &#x3D; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
    animation.type &#x3D; kCATransitionPush;
    if (tabBarController.selectedIndex &gt; shouldSelectIndex) &#123;
        animation.subtype &#x3D; kCATransitionFromLeft;
    &#125; else &#123;
        animation.subtype &#x3D; kCATransitionFromRight;
    &#125;
    [[[tabBarController valueForKey:@&quot;_viewControllerTransitionView&quot;] layer] addAnimation:animation forKey:@&quot;animation&quot;];

    return YES;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="点击-UITabBarItem添加动画效果"><a href="#点击-UITabBarItem添加动画效果" class="headerlink" title="点击 UITabBarItem添加动画效果"></a>点击 UITabBarItem添加动画效果</h2><pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">- (void)tabBar:(UITabBar *)tabBar didSelectItem:(UITabBarItem *)item &#123;
    NSInteger index &#x3D; [self.tabBar.items indexOfObject:item];
    [self animationWithIndex:index];
&#125;

#pragma mark - private methods
- (void)animationWithIndex:(NSInteger)index &#123;
    NSMutableArray *tabBarbuttonArray &#x3D; [NSMutableArray array];
    &#x2F;&#x2F; 找到所有的 UITabBarButton
    for (UIView *tabBarButton in self.tabBar.subviews) &#123;
        if ([tabBarButton isKindOfClass:NSClassFromString(@&quot;UITabBarButton&quot;)]) &#123;
            [tabBarbuttonArray addObject:tabBarButton];
        &#125;
    &#125;
    &#x2F;&#x2F; tabBarButton 排序
    [tabBarbuttonArray sortUsingComparator:^NSComparisonResult(UIView *_Nonnull obj1, UIView *_Nonnull obj2) &#123;
        return CGRectGetMinX(obj1.frame) &gt; CGRectGetMinX(obj2.frame);
    &#125;];

    UIView *tabbarBtn &#x3D; tabBarbuttonArray[index];
    &#x2F;&#x2F; 找到UITabBarButton中的imageView，加动画
    for (UIView *sub in tabbarBtn.subviews) &#123;
        if ([sub isKindOfClass:NSClassFromString(@&quot;UITabBarSwappableImageView&quot;)]) &#123;
            [self preformAnimationForView:sub];
        &#125;
    &#125;
&#125;

- (void)preformAnimationForView:(UIView *)view &#123;
    [view.layer addAnimation:[self scaleAnimation] forKey:nil];
&#125;

&#x2F;**
 重力效果弹跳
 *&#x2F;
- (CAKeyframeAnimation *)gravityElasticAnimation &#123;
    CAKeyframeAnimation *animation &#x3D; [CAKeyframeAnimation animationWithKeyPath:@&quot;transform.translation.y&quot;];
    animation.values &#x3D; @[@0.0, @-4.15, @-7.26, @-9.34, @-10.37, @-9.34, @-7.26, @-4.15, @0.0, @2.0, @-2.9, @-4.94, @-6.11, @-6.42, @-5.86, @-4.44, @-2.16, @0.0];
    animation.duration &#x3D; 0.8;
    animation.beginTime &#x3D; CACurrentMediaTime();
    animation.removedOnCompletion &#x3D; YES;
    return animation;
&#125;

&#x2F;**
 缩放动画
 *&#x2F;
- (CABasicAnimation *)scaleAnimation &#123;
    CABasicAnimation *animation &#x3D; [CABasicAnimation animationWithKeyPath:@&quot;transform.scale&quot;];
    animation.timingFunction &#x3D; [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
    animation.duration &#x3D; 0.2;
    animation.repeatCount &#x3D; 1;
    animation.removedOnCompletion &#x3D; YES;
    animation.autoreverses &#x3D; YES;
    animation.fromValue &#x3D; @1;
    animation.toValue &#x3D; @[@0.7, @1];

    return animation;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Swift-5-版本"><a href="#Swift-5-版本" class="headerlink" title="Swift 5 版本"></a>Swift 5 版本</h1><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">extension</span> <span class="token class-name">BaseTabBarController</span><span class="token punctuation">:</span> <span class="token class-name">UITabBarControllerDelegate</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">func</span> <span class="token function-definition function">tabBarController</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tabBarController<span class="token punctuation">:</span> <span class="token class-name">UITabBarController</span><span class="token punctuation">,</span> animationControllerForTransitionFrom <span class="token omit keyword">_</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> to <span class="token omit keyword">_</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">TabBarTransition</span><span class="token punctuation">(</span>viewControllers<span class="token punctuation">:</span> tabBarController<span class="token punctuation">.</span>viewControllers<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">var</span> scaleAnimation<span class="token punctuation">:</span> <span class="token class-name">CABasicAnimation</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> animation <span class="token operator">=</span> <span class="token class-name">CABasicAnimation</span><span class="token punctuation">(</span>keyPath<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"transform.scale"</span></span><span class="token punctuation">)</span>
        animation<span class="token punctuation">.</span>timingFunction <span class="token operator">=</span> <span class="token class-name">CAMediaTimingFunction</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token punctuation">.</span>easeInEaseOut<span class="token punctuation">)</span>
        animation<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">0.2</span>
        animation<span class="token punctuation">.</span>repeatCount <span class="token operator">=</span> <span class="token number">1</span>
        animation<span class="token punctuation">.</span>isRemovedOnCompletion <span class="token operator">=</span> <span class="token boolean">true</span>
        animation<span class="token punctuation">.</span>autoreverses <span class="token operator">=</span> <span class="token boolean">true</span>
        animation<span class="token punctuation">.</span>fromValue <span class="token operator">=</span> <span class="token number">1</span>
        animation<span class="token punctuation">.</span>toValue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>

        <span class="token keyword">return</span> animation
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tabBar</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tabBar<span class="token punctuation">:</span> <span class="token class-name">UITabBar</span><span class="token punctuation">,</span> didSelect item<span class="token punctuation">:</span> <span class="token class-name">UITabBarItem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> orderedTabBarItemViews<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIView</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> interactionViews <span class="token operator">=</span> tabBar<span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>filter <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span> <span class="token keyword">is</span> <span class="token class-name">UIControl</span> <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> interactionViews<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>minX <span class="token operator">&lt;</span> <span class="token short-argument">$1</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>minX <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">guard</span>
            <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>tabBar<span class="token punctuation">.</span>items<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">let</span> imageView <span class="token operator">=</span> orderedTabBarItemViews<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>subviews<span class="token punctuation">.</span>first <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UIImageView</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 找到UITabBarButton中的imageView，加动画</span>
        imageView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scaleAnimation<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>TabBarTransition.swift:</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span>
<span class="token comment">//  TabBarTransition.swift</span>
<span class="token comment">//  ViPay</span>
<span class="token comment">//</span>
<span class="token comment">//  Created by VanJay on 2019/6/30.</span>
<span class="token comment">//  Copyright © 2019 VanJay. All rights reserved.</span>
<span class="token comment">//</span>

<span class="token keyword">import</span> <span class="token class-name">UIKit</span>

<span class="token keyword">class</span> <span class="token class-name">TabBarTransition</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> viewControllers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIViewController</span><span class="token punctuation">]</span><span class="token operator">?</span>
    <span class="token keyword">let</span> transitionDuration<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span> <span class="token operator">=</span> <span class="token number">0.3</span>

    <span class="token keyword">init</span><span class="token punctuation">(</span>viewControllers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIViewController</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers <span class="token operator">=</span> viewControllers
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">func</span> <span class="token function-definition function">transitionDuration</span><span class="token punctuation">(</span>using <span class="token omit keyword">_</span><span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TimeInterval</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> transitionDuration
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">func</span> <span class="token function-definition function">animateTransition</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">guard</span>
            <span class="token keyword">let</span> fromVC <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">viewController</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UITransitionContextViewControllerKey</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">let</span> fromView <span class="token operator">=</span> fromVC<span class="token punctuation">.</span>view<span class="token punctuation">,</span>
            <span class="token keyword">let</span> fromIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>forViewController<span class="token punctuation">:</span> fromVC<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">let</span> toVC <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">viewController</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UITransitionContextViewControllerKey</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token keyword">let</span> toView <span class="token operator">=</span> toVC<span class="token punctuation">.</span>view<span class="token punctuation">,</span>
            <span class="token keyword">let</span> toIndex <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>forViewController<span class="token punctuation">:</span> toVC<span class="token punctuation">)</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">let</span> frame <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">initialFrame</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> fromVC<span class="token punctuation">)</span>
        <span class="token keyword">var</span> fromFrameEnd <span class="token operator">=</span> frame
        <span class="token keyword">var</span> toFrameStart <span class="token operator">=</span> frame
        fromFrameEnd<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> toIndex <span class="token operator">></span> fromIndex <span class="token operator">?</span> frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">-</span> frame<span class="token punctuation">.</span>width <span class="token punctuation">:</span> frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">+</span> frame<span class="token punctuation">.</span>width
        toFrameStart<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> toIndex <span class="token operator">></span> fromIndex <span class="token operator">?</span> frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">+</span> frame<span class="token punctuation">.</span>width <span class="token punctuation">:</span> frame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">-</span> frame<span class="token punctuation">.</span>width
        toView<span class="token punctuation">.</span>frame <span class="token operator">=</span> toFrameStart

        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">&#123;</span>
            transitionContext<span class="token punctuation">.</span>containerView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>toView<span class="token punctuation">)</span>
            <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>transitionDuration<span class="token punctuation">,</span> animations<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
                fromView<span class="token punctuation">.</span>frame <span class="token operator">=</span> fromFrameEnd
                toView<span class="token punctuation">.</span>frame <span class="token operator">=</span> frame
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> completion<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> success <span class="token keyword">in</span>
                fromView<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">func</span> <span class="token function-definition function">getIndex</span><span class="token punctuation">(</span>forViewController vc<span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">guard</span> <span class="token keyword">let</span> vcs <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>viewControllers <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token nil constant">nil</span> <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> thisVC<span class="token punctuation">)</span> <span class="token keyword">in</span> vcs<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> thisVC <span class="token operator">==</span> vc <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> index <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token nil constant">nil</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>UITabBar</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 编译 Android 源码</title>
    <url>/2019/01/05/Ubuntu%2018.04%20%E7%BC%96%E8%AF%91%20Android%20%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>Android 源码编译的四个流程:</p>
</blockquote>
<ul>
<li>源码下载;</li>
<li>构建编译环境;</li>
<li>编译源码;</li>
<li>模拟器运行</li>
</ul>
<h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><ul>
<li><p>首先确保自己已经安装了Git.</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> 
<span class="token function">git</span> config –global user.email “your_email” 
<span class="token function">git</span> config –global user.name “your_name”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
</ul>
<span id="more"></span>

<ul>
<li><p>使用清华大学镜像</p>
<ul>
<li><a href="https://link.juejin.im/?target=https://mirror.tuna.tsinghua.edu.cn/help/AOSP/">Android 镜像使用帮助</a></li>
<li>首先要下载repo 工具</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/bin
<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/bin:<span class="token environment constant">$PATH</span>
<span class="token function">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">></span> ~/bin/repo
<span class="token function">chmod</span> a+x ~/bin/repo
// 拒绝连接可以使用tuna的git-repo镜像,将地址换成清华大学的镜像地址，详情查看网址https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用每月更新的初始化包（也可以传统的初始化方法，因为网络慢会下载失败，还是直接把初始化包下载下来再进行同步）<br><br/>下载地址 <a href="https://link.juejin.im/?target=https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar">每月更新的初始化包</a></p>
</li>
<li><p>由于所有代码都是从隐藏的 .repo 目录中 checkout 出来的，所以只保留了 .repo 目录，下载后解压 再 repo sync 一遍即可得到完整的目录</p>
<p>  使用方法如下:</p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token parameter variable">-c</span> https://mirrors.tuna.tsinghua.edu.cn/aosp-mo nthly/aosp-latest.tar <span class="token comment"># 下载初始化包</span>
<span class="token function">tar</span> xvf aosp-latest.tar
<span class="token builtin class-name">cd</span> AOSP   <span class="token comment"># 解压得到的 AOSP 工程目录</span>
<span class="token comment"># 这时 ls 的话什么也看不到，因为只有一个隐藏的 .repo 目录</span>
repo <span class="token function">sync</span> <span class="token comment"># 正常同步一遍即可得到完整目录</span>
<span class="token comment"># 或 repo sync -l 仅checkout代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>同步完代码之后需要直接进行编译的话就是编译主分支的源码，如果需要特定版本，则需要自己切换分支，再次同步就切换到指定分支的源码了，执行以下命令（这里切换到8.0版本 支持设备 Pixel XL、Pixel）<br>分支列表 <a href="https://link.juejin.im/?target=https://source.android.com/source/build-numbers%23source-code-tags-and-builds">代号、标记和细分版本号</a></p>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">repo init <span class="token parameter variable">-u</span> git://mirrors.ustc.edu.cn/aosp/platform/manifest <span class="token parameter variable">-b</span> android-8.0.0_r2
repo <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
</ul>
<h1 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a>构建编译环境</h1><h2 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h2><ul>
<li>64位的操作系统只能编译2.3.x以上的版本,如果你想要编译2.3.x以下的,那么需要32位的操作系统.<br>磁盘空间越多越好,至少在100GB以上.意思就是,你可以去买个大点的硬盘了啊<br>如果你想要在是在虚拟机运行linux,那么至少需要16GB的RAM&#x2F;swap.</li>
</ul>
<h2 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h2><ul>
<li>安装 openJDK 8</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>依赖设置:</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">git</span> flex bison gperf build-essential libncurses5-dev:i386 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> dpkg-dev libsdl1.2-dev libesd0-dev
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core gnupg flex bison gperf build-essential  
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span> <span class="token function">curl</span> zlib1g-dev gcc-multilib g++-multilib 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libc6-dev-i386 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32ncurses5-dev x11proto-core-dev libx11-dev 
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgl1-mesa-dev libxml2-utils xsltproc <span class="token function">unzip</span> m4
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32z-dev ccache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一项一项安装太麻烦，你可以保存以下内容到<code>install_dependency.sh</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># !/bin/bash</span>

<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">git</span> flex bison gperf build-essential libncurses5-dev:i386 <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> dpkg-dev libsdl1.2-dev libesd0-dev <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core gnupg flex bison gperf build-essential <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span> <span class="token function">curl</span> zlib1g-dev gcc-multilib g++-multilib <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libc6-dev-i386 <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32ncurses5-dev x11proto-core-dev libx11-dev <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgl1-mesa-dev libxml2-utils xsltproc <span class="token function">unzip</span> m4 <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32z-dev ccache <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>给予执行权限</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> a+x ./install_dependency.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装依赖</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./install_dependency.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>依赖设置中有可能会出现“无法定位软件包 libesd0-dev” 这个问题解决方案：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>添加镜像源</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>操作系统要求</li>
</ul>
<p>| Android版本 | 编译要求的Ubuntu最低版本 |<br>| :——: | :——: | :——: |<br>| Android 6.0至AOSP master | Ubuntu 14.04 |<br>| Android 2.3.x至Android 5.x | Ubuntu 12.04 |<br>| Android 1.5至Android 2.2.x | Ubuntu 10.04 |</p>
<ul>
<li>JDK版本要求</li>
</ul>
<p>| Android版本 | 编译要求的JDK版本 |<br>| :——: | :——: | :——: |<br>| AOSP的Android主线 | OpenJDK 8 |<br>| Android 7.x至android 8.0 | OpenJDK 8 |<br>| Android 5.x至android 6.0 | Oracle JDK 7 |<br>| Android 2.3.x至Android 4.4.x | Oracle JDK 6 |<br>| Android 1.5至Android 2.2.x | Oracle JDK 5 |</p>
<ul>
<li><p>官方编译环境搭建文档地址<br><a href="https://link.juejin.im/?target=https://source.android.com/source/initializing%23installing-required-packages-ubuntu-1404">搭建编译环境</a></p>
</li>
<li><h2 id="初始化编译环境"><a href="#初始化编译环境" class="headerlink" title="初始化编译环境
  "></a>初始化编译环境
  </h2>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> build/envsetup.sh 
或者
<span class="token builtin class-name">.</span> build/envsetup.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>选择目标</li>
</ul>
  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lunch aosp_arm64-eng<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。<br>  如果您没有提供任何参数就运行命令，lunch 将提示您从菜单中选择一个目标。<br>  所有编译目标都采用 BUILD-BUILDTYPE 形式，其中 BUILD 是表示特定功能组合的代号。<br>  BUILDTYPE 是以下类型之一：</p>
</li>
</ul>
<p>| 编译类型 | 使用情况 |<br>| :——: | :——: | :——: |<br>| user | 权限受限；适用于生产环境（没有root权和dedug等） |<br>| userdebug | 在user版本的基础上开放了root权限和debug权限 |<br>| eng | 开发工程师的版本,拥有最大的权限,此外还附带了许多debug工具 |</p>
<h1 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h1><p>您可以使用make编译任何代码。<br/><br>GNUMake可以借助 <code>-jN</code> 参数处理并行任务，通常使用的任务数N介于编译时所用计算机上硬件线程数的1-2倍之间。例如，在一台双核 E5520 计算机（2 个 CPU，每个 CPU 4 个内核，每个内核2个线程）上，要实现最快的编译速度，可以使用介于<code>make -j16</code> 到 <code>make -j32</code> 之间的命令。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="PS-假如编译报错，直接把错误项往谷歌丢找答案"><a href="#PS-假如编译报错，直接把错误项往谷歌丢找答案" class="headerlink" title="PS: 假如编译报错，直接把错误项往谷歌丢找答案"></a>PS: 假如编译报错，直接把错误项往谷歌丢找答案</h2><h1 id="编译完成运行"><a href="#编译完成运行" class="headerlink" title="编译完成运行"></a>编译完成运行</h1><p>依次输入以下命令（如果是在编译成功源码之后直接想运行模拟器，则直接输入emulator命令就行，因为前面编译源码已经输入过以上两条命令）</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">.</span> build/envsetup.sh
lunch<span class="token punctuation">(</span>选择刚才你编译源码设置的目标版本<span class="token punctuation">)</span>
emulator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://link.juejin.im/?target=https://source.android.com/source/initializing%23optimizing-a-build-environment">搭建编译环境</a></p>
<p><a href="https://forum.xda-developers.com/android/general/build-aosp-extended-ubuntu-18-04-bionic-t3796500">Build Aosp Extended on Ubuntu 18.04 (Bionic Beaver)</a></p>
<p><a href="https://0x90e.github.io/download-android-source-code-and-build/">Download Android Source Code and Build</a></p>
<p><a href="https://link.juejin.im/?target=https://blog.csdn.net/mcryeasy/article/details/60466837">动手实现Android源码（AOSP）的下载、编译、运行、导入、调试</a></p>
<p><a href="https://link.juejin.im/?target=https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">Android 镜像使用帮助</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Android</tag>
        <tag>Android source build</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 搭建 Jenkins</title>
    <url>/2018/09/12/Ubuntu-18-04-%E6%90%AD%E5%BB%BA-Jenkins/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>工欲善其事，必先利其器</p>
</blockquote>
<p>打包是开发过程中必不可少的一步，随着项目的壮大，打包时间越来越长，如果一直手动操作，浪费时间不说，还容易出错。记录一下安装<code>Jenkins</code>的过程，以备不时之需。</p>
<span id="more"></span>

<h1 id="环境（要求）"><a href="#环境（要求）" class="headerlink" title="环境（要求）"></a>环境（要求）</h1><ul>
<li>宿主机系统：Ubuntu 18.04</li>
<li><code>root</code>用户最高权限</li>
</ul>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="安装-JAVA"><a href="#安装-JAVA" class="headerlink" title="安装 JAVA"></a>安装 <code>JAVA</code></h2><p><code>Jenkins</code>是基于<code>JAVA</code>的应用程序，所以要先安装<code>Java OpenJDK</code>。</p>
<h3 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h3><p>安装包<code>software-properties-common</code>，添加<code>java OpenJDK PPA </code>仓库源</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt install software-properties-common apt-transport-https -y
sudo add-apt-repository ppa:openjdk-r&#x2F;ppa -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装JAVA-8"><a href="#安装JAVA-8" class="headerlink" title="安装JAVA 8"></a>安装<code>JAVA 8</code></h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt install openjdk-8-jdk -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="检查-JAVA-是否安装成功"><a href="#检查-JAVA-是否安装成功" class="headerlink" title="检查 JAVA 是否安装成功"></a>检查 <code>JAVA</code> 是否安装成功</h4><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装-Jenkins"><a href="#安装-Jenkins" class="headerlink" title="安装 Jenkins"></a>安装 <code>Jenkins</code></h2><p><code>Jenkins</code>提供<code>Ubuntu</code>安装包，从该仓库安装</p>
<h3 id="添加Jenkins签名"><a href="#添加Jenkins签名" class="headerlink" title="添加Jenkins签名"></a>添加<code>Jenkins</code>签名</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">wget -q -O - https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian-stable&#x2F;jenkins.io.key | sudo apt-key add <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="添加Jenkins仓库"><a href="#添加Jenkins仓库" class="headerlink" title="添加Jenkins仓库"></a>添加<code>Jenkins</code>仓库</h3><h4 id="添加稳定版"><a href="#添加稳定版" class="headerlink" title="添加稳定版"></a>添加稳定版</h4><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt-add-repository &quot;deb https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian-stable binary&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="添加最新版"><a href="#添加最新版" class="headerlink" title="添加最新版"></a>添加最新版</h4><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt-add-repository &quot;deb http:&#x2F;&#x2F;pkg.jenkins-ci.org&#x2F;debian binary&#x2F;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="更新apt，安装Jenkins"><a href="#更新apt，安装Jenkins" class="headerlink" title="更新apt，安装Jenkins"></a>更新<code>apt</code>，安装<code>Jenkins</code></h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt update
sudo apt install jenkins -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="启动Jenkins并加入开机自启"><a href="#启动Jenkins并加入开机自启" class="headerlink" title="启动Jenkins并加入开机自启"></a>启动<code>Jenkins</code>并加入开机自启</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">systemctl start jenkins
systemctl enable jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="检查Jenkins是否启动"><a href="#检查Jenkins是否启动" class="headerlink" title="检查Jenkins是否启动"></a>检查<code>Jenkins</code>是否启动</h3><p><code>Jenkins</code>已经启动，默认端口是<code>8080</code>,检查一下是否已运行</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">netstat -plntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ufw allow ssh
ufw allow http
ufw allow https
ufw enable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果需要从外部机器打开<code>Jenkins</code>，记得开启防火墙端口，以默认<code>8080</code>端口为例</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo firewall-cmd --permanent --add-port&#x3D;8080&#x2F;tcp
sudo firewall-cmd --reload
sudo firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="启动Jenkins"><a href="#启动Jenkins" class="headerlink" title="启动Jenkins"></a>启动<code>Jenkins</code></h1><p>浏览器打开<a href="localhost:8080"><code>localhost:8080</code></a>，不出意外进入<code>Jenkins</code>界面了，<code>Jenkins</code>会有一个初始的管理密码，查看：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装推荐的插件"><a href="#安装推荐的插件" class="headerlink" title="安装推荐的插件"></a>安装推荐的插件</h2><p>复制该密码到浏览器，将进入到<code>Jenkins</code>初始化界面，按照指引安装推荐的插件，等待结束。如果一直提示网络离线，请确保没有使用 VPN，如果用了<code>Shadowsocks</code>，走<code>PAC</code>模式都不行，请关闭。</p>
<h2 id="安装其它插件"><a href="#安装其它插件" class="headerlink" title="安装其它插件"></a>安装其它插件</h2><h3 id="正常联网安装"><a href="#正常联网安装" class="headerlink" title="正常联网安装"></a>正常联网安装</h3><p>如果网络一直没问题的话，在<code>jenkins</code>内可以安装插件就在 <code>Manage Jenkins</code> -&gt; <code>Manage Plugins</code> -&gt; <code>Available</code>里面搜索想要安装的插件，安装完后记得重启<code>Jenkins</code>，如果网络一直不好，可以选择下面的方式离线安装。</p>
<h3 id="离线下载安装"><a href="#离线下载安装" class="headerlink" title="离线下载安装"></a>离线下载安装</h3><p>去 <a href="https://plugins.jenkins.io/">https://plugins.jenkins.io</a> 下载<code>Jenkins</code>插件，下载好后在<code>Jenkins</code>页面安装，在 <code>Manage Jenkins</code> -&gt; <code>Manage Plugins</code> -&gt; <code>Advanced</code> -&gt; <code>Upload Plugin</code>里上传安装。这里建议安装<code>Environment Injector Plugin</code>、<code>build-name-setter</code>，第一个是在构建时可以在运行时引入环境变量，在<code>master-slave</code>模式下尤为有用，第二个是可以动态修改构建名称，默认的是<code>#1</code>、<code>#2</code> 这样直接根据构建次数命名的非常不直观，自定义以后就能实现类似于<code>DongKe_ad_hoc_#9_origin/ftr-1.5.0_bbeec66325a14413ae17257793028ceb5cd6204b </code>这样非常直观的名称。</p>
<h1 id="使用-Jenkins"><a href="#使用-Jenkins" class="headerlink" title="使用 Jenkins"></a>使用 <code>Jenkins</code></h1><p>新建 <code>Item</code>开始使用，具体使用方法谷歌，其实不难。也可以查看 <a href="https://wiki.jenkins.io/">WIKI</a>。</p>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>如果更改了用户组，记得修改权限，否则<code>Jenkins</code>将抛出<code>IO error</code>无法启动。比如本来<code>/var/lib/jenkins</code>目录所有者是<code>usera</code>，现在需要更改为<code>userb</code>所有：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo chown -R userb:userb &#x2F;var&#x2F;lib&#x2F;jenkins
# 修改权限，我是直接给了777
sudo chmod -R 777 &#x2F;var&#x2F;lib&#x2F;jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>工程自动化</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
        <tag>CI</tag>
        <tag>持续集成</tag>
        <tag>工程自动化</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 查看分区内文件及文件夹占用大小</title>
    <url>/2013/04/30/Ubuntu%20%E6%9F%A5%E7%9C%8B%E5%88%86%E5%8C%BA%E5%86%85%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E5%A4%B9%E5%8D%A0%E7%94%A8%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h1 id="查看磁盘占用"><a href="#查看磁盘占用" class="headerlink" title="查看磁盘占用"></a>查看磁盘占用</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vanjay@VanJay:~$ <span class="token function">df</span> <span class="token parameter variable">-h</span>
文件系统        容量  已用  可用 已用% 挂载点
udev            <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /dev
tmpfs           789M  <span class="token number">2</span>.0M  787M    <span class="token number">1</span>% /run
/dev/sdb5       <span class="token number">9</span>.4G  <span class="token number">8</span>.0G  926M   <span class="token number">90</span>% /
tmpfs           <span class="token number">3</span>.9G   31M  <span class="token number">3</span>.9G    <span class="token number">1</span>% /dev/shm
tmpfs           <span class="token number">5</span>.0M  <span class="token number">4</span>.0K  <span class="token number">5</span>.0M    <span class="token number">1</span>% /run/lock
tmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G    <span class="token number">0</span>% /sys/fs/cgroup
/dev/loop0       88M   88M     <span class="token number">0</span>  <span class="token number">100</span>% /snap/core/5662<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h1 id="分区空间都哪去了？"><a href="#分区空间都哪去了？" class="headerlink" title="/ 分区空间都哪去了？"></a><code>/</code> 分区空间都哪去了？</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vanjay@VanJay:~$ <span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-hsx</span> /* <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rh</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">40</span>
16G	/home
<span class="token number">3</span>.9G	/usr
<span class="token number">2</span>.4G	/var
792M	/lib
451M	/swapfile
252M	/opt
140M	/boot
21M	/root
14M	/etc
13M	/bin
12M	/sbin
<span class="token number">2</span>.0M	/run
132K	/tmp
40K	/snap
16K	/lost+found
<span class="token number">8</span>.0K	/media
<span class="token number">4</span>.0K	/srv
<span class="token number">4</span>.0K	/mnt
<span class="token number">4</span>.0K	/lib64
<span class="token number">4</span>.0K	/cdrom
<span class="token number">0</span>	/vmlinuz.old
<span class="token number">0</span>	/vmlinuz
<span class="token number">0</span>	/sys
<span class="token number">0</span>	/proc
<span class="token number">0</span>	/initrd.img.old
<span class="token number">0</span>	/initrd.img
<span class="token number">0</span>	/dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="home分区被什么占用了？"><a href="#home分区被什么占用了？" class="headerlink" title="home分区被什么占用了？"></a><code>home</code>分区被什么占用了？</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vanjay@VanJay:~$ <span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-hsx</span> /home/* <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rh</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">35</span>
<span class="token number">7</span>.8G	/home/data
<span class="token number">7</span>.6G	/home/vanjay
16K	/home/lost+found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h1 id="交互式查看"><a href="#交互式查看" class="headerlink" title="交互式查看"></a>交互式查看</h1><h2 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ncdu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="比如查看-x2F-分区"><a href="#比如查看-x2F-分区" class="headerlink" title="比如查看&#x2F;分区"></a>比如查看&#x2F;分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncdu <span class="token number">1.12</span> ~ Use the arrow keys to navigate, press ? <span class="token keyword">for</span> <span class="token builtin class-name">help</span>
--- / ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    <span class="token number">3.9</span> GiB <span class="token punctuation">[</span><span class="token comment">##########] /usr</span>
    <span class="token number">2.4</span> GiB <span class="token punctuation">[</span><span class="token comment">######    ] /var</span>
  <span class="token number">791.2</span> MiB <span class="token punctuation">[</span><span class="token comment">#         ] /lib</span>
  <span class="token number">450.6</span> MiB <span class="token punctuation">[</span><span class="token comment">#         ]  swapfile</span>
  <span class="token number">251.2</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /opt
  <span class="token number">139.8</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /boot
   <span class="token number">20.7</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /root
   <span class="token number">13.7</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /etc
   <span class="token number">12.3</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /bin
   <span class="token number">11.3</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /sbin
    <span class="token number">3.6</span> MiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  .__deepin.lft
  <span class="token number">132.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /tmp
   <span class="token number">40.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /snap
e  <span class="token number">16.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /lost+found
    <span class="token number">8.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /media
    <span class="token number">4.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /lib64
e   <span class="token number">4.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /srv
e   <span class="token number">4.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /mnt
e   <span class="token number">4.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /cdrom
    <span class="token number">4.0</span> KiB <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  .__deepin.num
@   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  initrd.img.old
@   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  initrd.img
@   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  vmlinuz.old
@   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span>  vmlinuz
<span class="token operator">></span>   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /sys
<span class="token operator">></span>   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /run
<span class="token operator">></span>   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /proc
<span class="token operator">></span>   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /home
<span class="token operator">></span>   <span class="token number">0.0</span>   B <span class="token punctuation">[</span>          <span class="token punctuation">]</span> /dev

 Total disk usage:   <span class="token number">7.9</span> GiB  Apparent size:   <span class="token number">7.8</span> GiB  Items: <span class="token number">209677</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可使用方向键逐级查看</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 添加、修改交换空间</title>
    <url>/2019/01/05/Ubuntu-18-04-%E6%B7%BB%E5%8A%A0%E3%80%81%E4%BF%AE%E6%94%B9%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<h1 id="检查系统的交换信息"><a href="#检查系统的交换信息" class="headerlink" title="检查系统的交换信息"></a>检查系统的交换信息</h1><p>查看是否已经存在<code>swapfile</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">swapon</span> <span class="token parameter variable">--show</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果您没有收到任何输出，这意味着您的系统当前没有可用的交换空间。</p>
<p>您可以使用<code>free</code>实用程序验证没有活动交换：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">free</span> <span class="token parameter variable">-h</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:           <span class="token number">7</span>.7G        <span class="token number">6</span>.0G        <span class="token number">1</span>.2G         97M        439M        <span class="token number">1</span>.3G
Swap:          <span class="token number">8</span>.0G        <span class="token number">4</span>.1G        <span class="token number">3</span>.9G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<span id="more"></span>

<h1 id="检查硬盘驱动器分区上的可用空间"><a href="#检查硬盘驱动器分区上的可用空间" class="headerlink" title="检查硬盘驱动器分区上的可用空间"></a>检查硬盘驱动器分区上的可用空间</h1><p>在我们创建交换文件之前，我们将检查当前的磁盘使用情况，以确保我们有足够的空间。 通过输入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">df</span> <span class="token parameter variable">-h</span>
Filesystem      Size  Used Avail Use% Mounted on
udev            <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /dev
tmpfs           789M  <span class="token number">2</span>.0M  787M   <span class="token number">1</span>% /run
/dev/sda2       234G   80G  142G  <span class="token number">36</span>% /
tmpfs           <span class="token number">3</span>.9G   40M  <span class="token number">3</span>.9G   <span class="token number">2</span>% /dev/shm
tmpfs           <span class="token number">5</span>.0M  <span class="token number">4</span>.0K  <span class="token number">5</span>.0M   <span class="token number">1</span>% /run/lock
tmpfs           <span class="token number">3</span>.9G     <span class="token number">0</span>  <span class="token number">3</span>.9G   <span class="token number">0</span>% /sys/fs/cgroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>在这种情况下，带有&#x2F;在Mounted on列上的设备是我们的磁盘，确保高于我们将要创建的交换空间大小。<br>虽然对交换空间的适当大小有很多意见，但这实际上取决于您的个人偏好和您的应用程序要求。 通常，等于或加倍系统RAM的量是一个很好的起点。 另一个好的经验法则是，如果您只是将其用作RAM后备，那么任何超过4G的交换都可能是不必要的。</p>
<h1 id="修改swapfile"><a href="#修改swapfile" class="headerlink" title="修改swapfile"></a>修改swapfile</h1><h2 id="如果第一步存在swapfile，则需要先禁用"><a href="#如果第一步存在swapfile，则需要先禁用" class="headerlink" title="如果第一步存在swapfile，则需要先禁用"></a>如果第一步存在<code>swapfile</code>，则需要先禁用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> swapoff /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="修改swapfile空间的大小为8G"><a href="#修改swapfile空间的大小为8G" class="headerlink" title="修改swapfile空间的大小为8G"></a>修改<code>swapfile</code>空间的大小为8G</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/swapfile <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">8192</span>
或者
<span class="token function">sudo</span> fallocate <span class="token parameter variable">-l</span> 8G /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="设置文件为swapfile类型"><a href="#设置文件为swapfile类型" class="headerlink" title="设置文件为swapfile类型"></a>设置文件为<code>swapfile</code>类型</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkswap</span> /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h2><p>我们需要锁定文件的权限，以便只有具有root权限的用户才能读取内容。 这可以防止普通用户访问该文件，这会产生重大的安全隐患。</p>
<p>通过键入以下内容使该文件只能由root访问：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>键入以下命令验证权限更改：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">ls</span> <span class="token parameter variable">-lh</span> /swapfile
-rw------- <span class="token number">1</span> root root <span class="token number">8</span>.0G Jan  <span class="token number">5</span> <span class="token number">14</span>:29 /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="启用swapfile"><a href="#启用swapfile" class="headerlink" title="启用swapfile"></a>启用<code>swapfile</code></h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">swapon</span> /swapfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="使交换文件永久化"><a href="#使交换文件永久化" class="headerlink" title="使交换文件永久化"></a>使交换文件永久化</h1><p>我们最近的更改已启用当前会话的交换文件。 但是，如果我们重新启动，服务器将不会自动保留交换设置。 我们可以通过将交换文件添加到<code>/etc/fstab</code>文件来更改此设置。</p>
<p>备份<code>/etc/fstab</code>文件，以防出现任何问题：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/fstab /etc/fstab.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>键入以下命令，将交换文件信息添加到<code>/etc/fstab</code>文件的末尾：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'/swapfile none swap sw 0 0'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>接下来，我们将查看一些我们可以更新的设置以调整我们的交换空间。</p>
<h1 id="调整您的交换设置（附）"><a href="#调整您的交换设置（附）" class="headerlink" title="调整您的交换设置（附）"></a>调整您的交换设置（附）</h1><p>您可以配置一些选项，这些选项会在处理交换时对系统的性能产生影响。</p>
<h2 id="调整Swappiness属性"><a href="#调整Swappiness属性" class="headerlink" title="调整Swappiness属性"></a>调整Swappiness属性</h2><p><code>swappiness</code>参数配置系统将数据从RAM交换到交换空间的频率。 这是介于0和100之间的值，表示百分比。</p>
<p>值接近于零时，除非绝对必要，否则内核不会将数据交换到磁盘。 请记住，与交换文件的交互是“昂贵的”，因为它们比与RAM的交互花费更长的时间，并且它们可能导致性能的显着降低。 告诉系统不要太依赖交换通常会使您的系统更快。</p>
<p>接近100的值将尝试将更多数据放入交换中以努力保持更多RAM空间。 根据应用程序的内存配置文件或服务器的使用情况，在某些情况下可能会更好。</p>
<p>我们可以通过输入以下内容来查看当前的swappiness值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">cat</span> /proc/sys/vm/swappiness
<span class="token number">60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>对于桌面，<code>swappiness</code>设置为60并不是一个糟糕的值。 对于服务器，您可能希望将其移近0。</p>
<p>我们可以使用<code>sysctl</code>命令将<code>swappiness</code>设置为不同的值。</p>
<p>例如，要将<code>swappiness</code>设置为10，我们可以键入：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span>
vm.swappiness <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此设置将持续到下次重新引导。 我们可以通过在<code>/etc/sysctl.conf</code>文件中添加该行来自动设置此值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在底部，您可以添加：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>完成后保存并关闭文件。</p>
<h2 id="调整缓存压力设置"><a href="#调整缓存压力设置" class="headerlink" title="调整缓存压力设置"></a>调整缓存压力设置</h2><p>您可能想要修改的另一个相关值是<code>vfs_cache_pressure</code>，此设置配置系统将选择多少缓存<code>inode</code>和<code>dentry</code>信息而不是其他数据。</p>
<p>基本上，这是关于文件系统的访问数据。 这通常是非常昂贵的查询和非常频繁的请求，所以这是你的系统缓存的一个很好的事情。 您可以通过再次查询proc文件系统来查看当前值：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">cat</span> /proc/sys/vm/vfs_cache_pressure
<span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>由于它当前已配置，我们的系统会过快地从缓存中删除<code>inode</code>信息。 我们可以通过键入以下内容将其设置为更保守的设置（如50）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tungee@tungee-Macmini:~$ <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token assign-left variable">vm.vfs_cache_pressure</span><span class="token operator">=</span><span class="token number">50</span>
vm.vfs_cache_pressure <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>同样，这仅适用于我们当前的会话。 我们可以通过将其添加到配置文件来改变它，就像我们使用<code>swappiness</code>设置一样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/sysctl.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在底部，添加指定新值的行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">vm.vfs_cache_pressure</span><span class="token operator">=</span><span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>完成后保存并关闭文件。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>swap 空间</tag>
      </tags>
  </entry>
  <entry>
    <title>Wap APP开发心得</title>
    <url>/2017/05/03/Wap-APP%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>经过了一个多月，加班加点，总算完成基本完成了这个Wap APP，可以作为 Version one 面见客户了，感受不多。</p>
<p>MUI 结合 Hbuilder 使用 HTML5+ 开发APP整体来说还是挺顺畅的，虽然文档不完整，但是有开发经验的一眼看过去就知道怎么用了，以后做些不是大型的APP或许会成为我的首选。</p>
<span id="more"></span>

<p>算来这也算是我第三次做一个完整的 Wap 类型的 APP了，总体来说这次是最满意的，前面两个都是用的 JSP，很多特性也是依赖其完成的，但这次是纯原生页面，实现了做这个之前感觉很难的问题（至少去年这个时候感觉好难），当然了，这中间少不了 5+ 和 MUI 的功劳，遗憾的是没用上 Vue，忙的时候总是感叹自己时间不够，太多想学的东西没时间学，但些许零碎的空闲时间一有了又无法埋头去学，这样不好啊~ </p>
<p>这个 APP 先发布 iOS 端， 安卓端还有些许适配问题，相信这次之后，对Wap 开发 APP 能够有一个比较深的认识。</p>
]]></content>
      <categories>
        <category>APP开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>MUI</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 开启 ssh 登录</title>
    <url>/2013/04/02/Ubuntu-%E5%BC%80%E5%90%AF-ssh-%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p>电脑多了，总是需要切来切去，工作或者在家里都不止一台电脑，jenkins 构建机、网盘机等，linux 服务机我这用的基本都是 Ubuntu，记录下 Ubuntu 开启 ssh 登录。</p>
<span id="more"></span>

<h2 id="查看是否安装了-ssh"><a href="#查看是否安装了-ssh" class="headerlink" title="查看是否安装了 ssh"></a>查看是否安装了 ssh</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ps -e | grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="安装ssh-server服务"><a href="#安装ssh-server服务" class="headerlink" title="安装ssh-server服务"></a>安装ssh-server服务</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt-get install openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="查看安装的服务"><a href="#查看安装的服务" class="headerlink" title="查看安装的服务"></a>查看安装的服务</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">dpkg -l | grep ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再次<code>ps -e | grep ssh</code>查看 ssh 是否运行</p>
<h2 id="远程登录测试"><a href="#远程登录测试" class="headerlink" title="远程登录测试"></a>远程登录测试</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ssh user@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="开启允许密码登录"><a href="#开启允许密码登录" class="headerlink" title="开启允许密码登录"></a>开启允许密码登录</h2><p>在有些云服务器，比如亚马逊的轻量应用服务器上，默认是关闭密码登录的，只能使用密钥登录，比较麻烦（但是安全），我们可以在从服务商后台远程登录后，设置允许ssh登录并重启ssh服务。</p>
<p>修改 root 用户和服务商默认创建的用户密码（此处以centos用户为例）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 root 用户密码</span>
<span class="token function">sudo</span> <span class="token function">passwd</span> root
<span class="token comment"># 设置用户 centos 密码</span>
<span class="token function">sudo</span> <span class="token function">passwd</span> centos
<span class="token comment"># 以 root 用户登录</span>
<span class="token function">su</span> root
<span class="token comment"># 修改允许密码登录（此处使用	sed 修改），如果稳妥些最好手动修改，修改重要数据记得备份</span>
<span class="token function">sed</span> <span class="token parameter variable">-ri</span> <span class="token string">'s/^#?(PasswordAuthentication)\s+(yes|no)/\1 yes/'</span> /etc/ssh/sshd_config <span class="token operator">&amp;&amp;</span>
<span class="token function">sed</span> <span class="token parameter variable">-ri</span> <span class="token string">'s/^#?(PermitRootLogin)\s+(yes|no)/\1 yes/'</span> /etc/ssh/sshd_config <span class="token operator">&amp;&amp;</span>
<span class="token function">sed</span> <span class="token parameter variable">-ri</span> <span class="token string">'s/^/#/;s/sleep 10"\s+/&amp;\n/'</span> /root/.ssh/authorized_keys
<span class="token comment"># 或者手动修改</span>
<span class="token function">vi</span> /etc/ssh/sshd_config 
<span class="token comment"># 或者</span>
<span class="token function">nano</span> /etc/ssh/sshd_config
<span class="token comment"># 修改完重启 ssh 服务</span>
<span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 LTS 安装部署 Seafile</title>
    <url>/2018/10/01/Ubuntu-18-04-LTS-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2-Seafile/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>新入职的公司内部同步一些文件使用的 <code>Seafile</code>，没部署远程，只使用的内网，由于这个 <code>seafile</code> 是一个前同事搭建的（之前的 iOSer，我来替代他了，阴差阳错。。。），可能那时他也不是太熟吧，把文件存放目录放在了安装位置的挂载分区，导致长时间使用下来，该分区磁盘空间满了，无法继续运行，于是我简单 <code>google</code> 了一番，开始转移目录，找到了 <code>seafile-data</code> 目录之后，发现查看都没权限，包括 <code>cp -R</code>、<code>mv</code> 都无法运行，直接给了<code>755</code>权限，<code>mv seafile-data</code> 目录至新目录，更改 <code>seafile.ini</code> 文件，指向新目录，重启 <code>seafile</code>，发现 <code>seafile</code> 已经无法启动……下意识重启一下电脑，还是不行，这时看下禅道，测试又提了一堆 <code>BUG</code>，就先放下开始修 BUG 了。第二天早上过来继续，发现系统都进不去了，登录界面无法输入密码，没办法只好命令行登入系统，再次 <code>google</code> 了解到 <code>seafile</code> 存放文件的形式类似于 <code>svn</code> 或 <code>git</code> ，也是那种打散存放并内部记录 <code>state</code> 和带有 <code>commit log</code> 的，看到了官方有修复工具，尝试无果，放弃了，系统也崩了（多年linux 经验解决不了，尝试了几个小时，<code>google</code> 了解到貌似是 <code>Ubuntu 16.04 LTS</code> 的 <code>bug</code> 所致，有个旧内核依赖怎么都干不掉，导致所有的 <code>dpkg -i</code> 都运行不了），这台机器上安装了 <code>jenkins</code> 和 <code>seafile</code>，问过了别无其他，心想 <code>jenkins</code> 我也熟练部署了，只能硬着头皮去跟组长说要重装系统，于是有了这篇文章。</p>
<span id="more"></span>

<h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><p>下载 Ububtu 系统，选了最新的长期支持版本 18.04，UI 大改了，看了挺喜欢，安排下载。这步没啥说，随便拿了个5年前的捣鼓用的 4G U盘，在 mac 制作了一个 Ubuntu 的安装盘。从 U盘启动，安装系统。</p>
<h2 id="安装-Seafile-服务器端"><a href="#安装-Seafile-服务器端" class="headerlink" title="安装 Seafile 服务器端"></a>安装 Seafile 服务器端</h2><h3 id="更新下系统"><a href="#更新下系统" class="headerlink" title="更新下系统"></a>更新下系统</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">apt-get update 
apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="安装-python-2-7-及其它依赖"><a href="#安装-python-2-7-及其它依赖" class="headerlink" title="安装 python 2.7 及其它依赖"></a>安装 python 2.7 及其它依赖</h3><p>由于 <code>seafile</code> 使用的 py 2.7，但 <code>Ubuntu</code> 默认集成的是 3+ 版本，所以要安装。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">apt-get install python
apt-get install python2.7 libpython2.7 python-setuptools python-pil python-ldap python-urllib3 ffmpeg python-pip python-mysqldb python-memcache
pip install pillow moviepy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="安装-Mariadb"><a href="#安装-Mariadb" class="headerlink" title="安装 Mariadb"></a>安装 Mariadb</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo apt install mariadb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="开始安装-seafile"><a href="#开始安装-seafile" class="headerlink" title="开始安装 seafile"></a>开始安装 seafile</h3><h4 id="下载-Seafile-服务器端程序"><a href="#下载-Seafile-服务器端程序" class="headerlink" title="下载 Seafile 服务器端程序"></a>下载 Seafile 服务器端程序</h4><p>去 <a href="https://www.seafile.com/download/">Seafile官方下载地址</a> 复制 服务器端 -&gt; Linux 服务器端 -&gt; 64bit 链接，比如现在最新的是 <code>http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.2.5_x86-64.tar.gz</code>，目录的话建议安装到 &#x2F;opt 下面，但是数据目录使用磁盘空间比较大的地方，比如我这边是是安装位置和数据目录都放在了 <code>/home/data/seafile</code> 下，过程如下：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">cd &#x2F;home
mkdir -p data&#x2F;seafile &amp;&amp; cd data&#x2F;seafile
wget http:&#x2F;&#x2F;seafile-downloads.oss-cn-shanghai.aliyuncs.com&#x2F;seafile-server_6.2.5_x86-64.tar.gz
tar -xzf seafile-server_*
mkdir installed &amp;&amp; mv seafile-server_6.2.5_x86-64.tar.gz installed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="安装-seafile-服务端"><a href="#安装-seafile-服务端" class="headerlink" title="安装 seafile 服务端"></a>安装 seafile 服务端</h4><p>因为依赖环境和数据库都已经安装好了，这边我是使用的 <code>Mariadb</code>，所以用的是 <code>seafile</code> 写好的 <code>setup-seafile-mysql.sh</code> 脚本进行 setup，中间会提示你输入 <code>seafile-data</code> 数据存放目录，记得输入你指定的目录，比如我这里应该填<code>/home/data/seafile/seafile-data</code>，当然如果你已经在<code>/home/data/seafile/seafile-server-6.2.5</code>则直接 Enter 默认即可，它会自动去上层目录创建<code>seafile-data</code>目录。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">cd seafile-server-6.2.5
sudo .&#x2F;setup-seafile-mysql.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>一路按引导完成，根据提示，输入服务器名、IP、数据目录（默认为<code>../seafile-data</code>）、<code>seahub</code> 端口、<code>seafile-server</code>监听端口（默认8082，不可更改），<code>ifconfig</code> 查看自己内网 ip，查完成之后确认设置，目录会变成如下：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">vanjay@VanJay:&#x2F;home&#x2F;data$ sudo tree -L 3
.
└── seafile
    ├── ccnet
    │   ├── ccnet.sock
    │   ├── misc
    │   ├── mykey.peer
    │   └── seafile.ini
    ├── conf
    │   ├── ccnet.conf
    │   ├── seafdav.conf
    │   ├── seafile.conf
    │   ├── seahub_settings.py
    │   └── seahub_settings.pyc
    ├── installed
    │   └── seafile-server_6.2.5_x86-64.tar.gz
    ├── logs
    │   ├── ccnet.log
    │   ├── controller.log
    │   ├── seafile.log
    │   ├── seahub.log
    │   └── seahub_django_request.log
    ├── pids
    │   ├── ccnet.pid
    │   └── seaf-server.pid
    ├── seafile-data
    │   ├── commits
    │   ├── fs
    │   ├── httptemp
    │   ├── library-template
    │   ├── storage
    │   └── tmpfiles
    ├── seafile-server-6.2.5
    │   ├── check_init_admin.py
    │   ├── reset-admin.sh
    │   ├── runtime
    │   ├── seaf-fsck.sh
    │   ├── seaf-fuse.sh
    │   ├── seaf-gc.sh
    │   ├── seafile
    │   ├── seafile.sh
    │   ├── seahub
    │   ├── seahub.sh
    │   ├── setup-seafile-mysql.py
    │   ├── setup-seafile-mysql.sh
    │   ├── setup-seafile.sh
    │   └── upgrade
    ├── seafile-server-latest -&gt; seafile-server-6.2.5
    └── seahub-data
        └── avatars

22 directories, 26 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="启动-x2F-停止-Seafile"><a href="#启动-x2F-停止-Seafile" class="headerlink" title="启动&#x2F;停止 Seafile"></a>启动&#x2F;停止 Seafile</h4><p>启动<code>Seafile-server</code>和<code>Seahub</code>，第一次启动会提示建立管理员账号。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">.&#x2F;seafile.sh start
.&#x2F;seahub.sh start &lt;端口号&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>此时通过浏览器本地访问 <code>localhost:端口号</code>，应该可以出现登录页面。如果出现网页乱码，可以删除<code>/tmp/seahub_cache</code>再重启seahub，即可恢复正常。</p>
<p>常用命令：</p>
<p>关闭</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">.&#x2F;seahub.sh stop # 停止 Seahub
.&#x2F;seafile.sh stop # 停止 Seafile 进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>重启</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">.&#x2F;seafile.sh restart # 停止当前的 Seafile 进程，然后重启 Seafile
.&#x2F;seahub.sh restart  # 停止当前的 Seahub 进程，并在 8000 端口重新启动 Seahub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用 <code>pgrep</code> 命令检查 <code>seafile/seahub</code> 进程是否还在运行中</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">pgrep -f seafile-controller # 查看 Seafile 进程
pgrep -f &quot;seahub&quot; # 查看 Seahub 进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>使用 <code>pkill</code> 命令杀掉相关进程</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">pkill -f seafile-controller # 结束 Seafile 进程
pkill -f &quot;seahub&quot; # 结束 Seafile 进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2><p>本地可以访问了，但从外部访问就不行了，需要配置下防火墙，当然你也直接关闭防火墙。</p>
<p><strong>开关防火墙</strong></p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ufw disable # 关闭
ufw enable # 开启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>也可添加端口</strong>，端口8082，必须添加，这是 <code>seafile-file</code> 端口，不可更改。8000为 seahub 默认监听端口，如果自定义 seahub 监听端口，这里记得添加。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">firewall-cmd --permanent --add-port&#x3D;8000&#x2F;tcp
firewall-cmd --permanent --add-port&#x3D;8082&#x2F;tcp
firewall-cmd --permanent --add-service http
firewall-cmd --reload
firewall-cmd --list-all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="安装-Ubuntu-Seafile-客户端"><a href="#安装-Ubuntu-Seafile-客户端" class="headerlink" title="安装 Ubuntu Seafile 客户端"></a>安装 Ubuntu Seafile 客户端</h2><p>开始使用吧。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo add-apt-repository ppa:seafile&#x2F;seafile-client
sudo apt-get update
sudo apt-get install seafile-gui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="添加执行用户和配置目录权限"><a href="#添加执行用户和配置目录权限" class="headerlink" title="添加执行用户和配置目录权限"></a>添加执行用户和配置目录权限</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">useradd vanjay -s &#x2F;sbin&#x2F;nologin -d &#x2F;home&#x2F;data&#x2F;seafile
chown -R vanjay:vanjay &#x2F;home&#x2F;data&#x2F;seafile&#x2F;
chown -R vanjay:vanjay &#x2F;tmp&#x2F;seahub_cache&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="配置开机自启动-Seafile"><a href="#配置开机自启动-Seafile" class="headerlink" title="配置开机自启动 Seafile"></a>配置开机自启动 Seafile</h2><p><strong>对于运行 systemd 的系统（例如 Debian 8 以及更新的版本，Ubuntu 15.04以及更新的版本），创建 systemd 服务管理文件</strong>（注意自行更改 User 、Group 和Seafile 路径）</p>
<ul>
<li>创建 <code>seafile service</code></li>
</ul>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;seafile.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><strong>注意！注意！注意！</strong> 这里有个大坑，花了我一个晚上去解决！<br>由于官方提供了开机启动 <code>service</code> 脚本，一般都是直接拿来用，改改路径用户名就好，但是！我在 Ubuntu 18.04 开机启动 seafile 上花了整整一个晚上！，<code>systemctl status seafile</code>查看服务状态，由于 seafile 启动依赖数据库，所以需要先等待数据库服务启动完毕再启动，我这安装的是 <code>mariadb</code> ，所以要在 After 后面加上 <code>mariadb.service</code>，重启正常自启了，阿弥陀佛！</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[Unit]
Description&#x3D;Seafile
# add mysql.service or postgresql.service depending on your database to the line below
After&#x3D;network.target mariadb.service

[Service]
Type&#x3D;oneshot
ExecStart&#x3D;&#x2F;home&#x2F;data&#x2F;seafile&#x2F;seafile-server-latest&#x2F;seafile.sh start
ExecStop&#x3D;&#x2F;home&#x2F;data&#x2F;seafile&#x2F;seafile-server-latest&#x2F;seafile.sh stop
RemainAfterExit&#x3D;yes
User&#x3D;vanjay
Group&#x3D;vanjay

[Install]
WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>创建 <code>seahub service</code></li>
</ul>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;seahub.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输入如下内容，用户、用户组、路径改为自己的 seafile 路径。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">[Unit]
Description&#x3D;Seafile hub
After&#x3D;network.target seafile.service

[Service]
# change start to start-fastcgi if you want to run fastcgi
ExecStart&#x3D;&#x2F;home&#x2F;data&#x2F;seafile&#x2F;seafile-server-latest&#x2F;seahub.sh start
ExecStop&#x3D;&#x2F;home&#x2F;data&#x2F;seafile&#x2F;seafile-server-latest&#x2F;seahub.sh stop
User&#x3D;vanjay
Group&#x3D;vanjay
Type&#x3D;oneshot
RemainAfterExit&#x3D;yes

[Install]
WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="设置服务开机自启动"><a href="#设置服务开机自启动" class="headerlink" title="设置服务开机自启动"></a>设置服务开机自启动</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sudo systemctl daemon-reload
sudo systemctl enable seafile
sudo systemctl enable seahub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="配置邮件通知服务"><a href="#配置邮件通知服务" class="headerlink" title="配置邮件通知服务"></a>配置邮件通知服务</h2><p>编辑你 seafile 目录下的 <code>conf/seahub_settings.py</code>文件，比如我这里应该 <code>vim /home/data/seafile/conf/seahub_settings.py</code>，加入如下内容，我只尝试了阿里企业邮箱和 qq 邮箱，仅供参考，<code>EMAIL_HOST</code> 填写发送邮件服务器，<code>EMAIL_PORT</code> 填写发送邮件服务器端口，改完重启 <code>seafile</code> 生效。</p>
<h3 id="QQ-邮箱，EMAIL-HOST-PASSWORD-是授权码，去-qq-邮箱设置获取。"><a href="#QQ-邮箱，EMAIL-HOST-PASSWORD-是授权码，去-qq-邮箱设置获取。" class="headerlink" title="QQ 邮箱，EMAIL_HOST_PASSWORD 是授权码，去 qq 邮箱设置获取。"></a>QQ 邮箱，<code>EMAIL_HOST_PASSWORD</code> 是授权码，去 qq 邮箱设置获取。</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">EMAIL_USE_SSL &#x3D; True
EMAIL_HOST &#x3D; &#39;smtp.qq.com&#39;
EMAIL_HOST_USER &#x3D; &#39;your_qq_number@qq.com&#39;
EMAIL_HOST_PASSWORD &#x3D; &#39;your_auth_code&#39;
EMAIL_PORT &#x3D; &#39;465&#39;
DEFAULT_FROM_EMAIL &#x3D; EMAIL_HOST_USER
SERVER_EMAIL &#x3D; EMAIL_HOST_USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="阿里企业邮箱，EMAIL-HOST-PASSWORD-是邮箱密码。"><a href="#阿里企业邮箱，EMAIL-HOST-PASSWORD-是邮箱密码。" class="headerlink" title="阿里企业邮箱，EMAIL_HOST_PASSWORD 是邮箱密码。"></a>阿里企业邮箱，<code>EMAIL_HOST_PASSWORD</code> 是邮箱密码。</h3><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">EMAIL_USE_SSL &#x3D; False
EMAIL_HOST &#x3D; &#39;smtp.mxhichina.com&#39;
EMAIL_HOST_USER &#x3D; &#39;username@xxx.com&#39;
EMAIL_HOST_PASSWORD &#x3D; &#39;your_password&#39;
EMAIL_PORT &#x3D; &#39;25&#39;
DEFAULT_FROM_EMAIL &#x3D; EMAIL_HOST_USER
SERVER_EMAIL &#x3D; EMAIL_HOST_USER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>参考链接：</p>
<p><a href="https://manual-cn.seafile.com/">Seafile 中文文档</a></p>
<p><a href="https://blog.littlefox.me/set_up_your_own_seafile_server/">搭建一个属于自己的Seafile网盘</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Seafile</tag>
        <tag>个人云盘</tag>
      </tags>
  </entry>
  <entry>
    <title>cocoapods 私有库的搭建和使用</title>
    <url>/2019/04/01/cocoapods-%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>cocoapods</code>是非常好用的一个iOS 依赖管理工具，使用它可以方便的管理和更新项目中所使用到的第三方库，以及将自己的项目中的公共组件交由它去管理，实现工程组件化。</p>
<span id="more"></span>

<h1 id="创建私有-repo"><a href="#创建私有-repo" class="headerlink" title="创建私有 repo"></a>创建私有 repo</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>什么是 <code>repo</code>？他是所有的Pods的一个索引，就是一个容器，所有的Pods都在这个里面，他实际是一个<code>git</code>仓库，但是当你使用了<code>cocoapods</code>后他会被<code>clone</code>到本地的 <code>~/.cocoapods/repos</code> 目录下，可以进入到这个目录看到 <code>master</code> 文件夹就是这个官方的 repo。</p>
<h2 id="创建-Specs-git-仓库"><a href="#创建-Specs-git-仓库" class="headerlink" title="创建 Specs git 仓库"></a>创建 Specs git 仓库</h2><p>这个 <code>Specs</code> 用来管理自己的私有 <code>pods</code> ，类似于官方 <a href="https://github.com/cocoapods/Specs">https://github.com/cocoapods/Specs</a>，我们也需要创建一个 <code>git</code> 仓库，只要你有访问权限，你可以把 <code>git</code> 仓库建在 <code>github</code>、<code>coding</code>、<code>bitbucket</code> 等，当然也可以建立在公司自己部署的 <code>git</code> 服务器（可以内网，只是到时 <code>pod install</code> 只在内网才能用）。cocoapod 官方的 <code>pod repo</code>名字叫 <code>master</code>，阿里云的叫 <a href="https://github.com/aliyun/aliyun-Specs.git">aliyun</a>，这里举例使用 <code>tianxu-Specs</code> 作为<code>repo</code> 名，在 <code>git</code> 服务器上创建 <code>tianxu-Specs</code> <code>repository</code>：</p>
<h2 id="关联远程-git-Specs-repository到本地-repo"><a href="#关联远程-git-Specs-repository到本地-repo" class="headerlink" title="关联远程 git Specs repository到本地 repo"></a>关联远程 git Specs repository到本地 repo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜ <span class="token builtin class-name">cd</span> ~/.cocoapods/repos

~/.cocoapods/repos
➜ pod repo <span class="token function">add</span> tianxu git@your_git_url:wangwanjie/tianxu-Specs.git
Cloning spec repo <span class="token variable"><span class="token variable">`</span>tianxu<span class="token variable">`</span></span> from <span class="token variable"><span class="token variable">`</span>git@your_git_url:wangwanjie/tianxu-Specs.git<span class="token variable">`</span></span>

~/.cocoapods/repos took 4s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时如果成功的话进入到 <code>~/.cocoapods/repos</code> 目录下就可以看到WTSpecs这个目录了。至此第一步创建私有<code>Spec repo</code>完成。也可使用 <code>pod repo list</code> 查看。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜ pod repo list

master
- Type: <span class="token function">git</span> <span class="token punctuation">(</span>master<span class="token punctuation">)</span>
- URL:  https://github.com/cocoapods/Specs.git
- Path: /Users/VanJay/.cocoapods/repos/master

tianxu
fatal: ambiguous argument <span class="token string">'HEAD'</span><span class="token builtin class-name">:</span> unknown revision or path not <span class="token keyword">in</span> the working tree.
Use <span class="token string">'--'</span> to separate paths from revisions, like this:
<span class="token string">'git &lt;command> [&lt;revision>...] -- [&lt;file>...]'</span>
- Type: <span class="token function">git</span> <span class="token punctuation">(</span>unknown<span class="token punctuation">)</span>
- URL:  git@your_git_url:wangwanjie/tianxu-Specs.git
- Path: /Users/VanJay/.cocoapods/repos/tianxu

<span class="token number">2</span> repos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>PS：如果有其他合作人员共同使用这个私有Spec repo的话在他有对应Git仓库的权限的前提下执行相同的命令添加这个Spec repo即可。</p>
<h1 id="创建私有-pod"><a href="#创建私有-pod" class="headerlink" title="创建私有 pod"></a>创建私有 pod</h1><p>repo 已经建立好了，接下来就是往里面放对应的 pod，也就是我们要使用的私有 pod，比如将网络封装层从项目抽出来作为公用组件，取名 TXNetwork，</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜ <span class="token builtin class-name">cd</span> ~/Documents/Work/Chaos

Documents/Work/Chaos
➜ pod lib create TXNetwork
Cloning <span class="token variable"><span class="token variable">`</span>https://github.com/cocoapods/pod-template.git<span class="token variable">`</span></span> into <span class="token variable"><span class="token variable">`</span>TXNetwork<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
Configuring TXNetwork template.

------------------------------

To get you started we need to ask a few questions, this should only take a minute.

If this is your first <span class="token function">time</span> we recommend running through with the guide:
 - https://guides.cocoapods.org/making/using-pod-lib-create.html
 <span class="token punctuation">(</span> hold cmd and click links to <span class="token function">open</span> <span class="token keyword">in</span> a browser. <span class="token punctuation">)</span>


What platform <span class="token keyword">do</span> you want to use?? <span class="token punctuation">[</span> iOS / macOS <span class="token punctuation">]</span>
 <span class="token operator">></span> iOS

What language <span class="token keyword">do</span> you want to use?? <span class="token punctuation">[</span> Swift / ObjC <span class="token punctuation">]</span>
 <span class="token operator">></span> Objc

Would you like to include a demo application with your library? <span class="token punctuation">[</span> Yes / No <span class="token punctuation">]</span>
 <span class="token operator">></span> Yes

Which testing frameworks will you use? <span class="token punctuation">[</span> Specta / Kiwi / None <span class="token punctuation">]</span>
 <span class="token operator">></span> Specta

Would you like to <span class="token keyword">do</span> view based testing? <span class="token punctuation">[</span> Yes / No <span class="token punctuation">]</span>
 <span class="token operator">></span> No

What is your class prefix?
 <span class="token operator">></span> TX

Running pod <span class="token function">install</span> on your new library.

Analyzing dependencies
Fetching podspec <span class="token keyword">for</span> <span class="token variable"><span class="token variable">`</span>TXNetwork<span class="token variable">`</span></span> from <span class="token variable"><span class="token variable">`</span><span class="token punctuation">..</span>/<span class="token variable">`</span></span>
Downloading dependencies
Installing Expecta <span class="token punctuation">(</span><span class="token number">1.0</span>.6<span class="token punctuation">)</span>
Installing Specta <span class="token punctuation">(</span><span class="token number">1.0</span>.7<span class="token punctuation">)</span>
Installing TXNetwork <span class="token punctuation">(</span><span class="token number">0.1</span>.0<span class="token punctuation">)</span>
Generating Pods project
Integrating client project

<span class="token punctuation">[</span><span class="token operator">!</span><span class="token punctuation">]</span> Please close any current Xcode sessions and use <span class="token variable"><span class="token variable">`</span>TXNetwork.xcworkspace<span class="token variable">`</span></span> <span class="token keyword">for</span> this project from now on.
Sending stats
Pod installation complete<span class="token operator">!</span> There are <span class="token number">3</span> dependencies from the Podfile and <span class="token number">3</span> total pods installed.

 Ace<span class="token operator">!</span> you<span class="token string">'re ready to go!
 We will start you off by opening your project in Xcode
  open '</span>TXNetwork/Example/TXNetwork.xcworkspace'

To learn <span class="token function">more</span> about the template see <span class="token variable"><span class="token variable">`</span>https://github.com/cocoapods/pod-template.git<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
To learn <span class="token function">more</span> about creating a new pod, see <span class="token variable"><span class="token variable">`</span>http://guides.cocoapods.org/making/making-a-cocoapod<span class="token variable">`</span></span><span class="token builtin class-name">.</span>

Documents/Work/Chaos took 3m 45s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>pod</code> 配置自身视情况而定，<code>pod lib create</code> 的问题根据该 <code>pod</code> 情况选择。</p>
<h2 id="关联-pod-到远程-git-仓库"><a href="#关联-pod-到远程-git-仓库" class="headerlink" title="关联 pod 到远程 git 仓库"></a>关联 pod 到远程 git 仓库</h2><p>在 <code>git</code> 服务器上创建 <code>TXNetworking</code> <code>repository</code>，关联。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> TXNetwork

TXNetwork on  master <span class="token punctuation">[</span>?<span class="token punctuation">]</span>
➜ <span class="token function">git</span> remote <span class="token function">add</span> origin https://your_git_url/wangwanjie/TXNetworking

TXNetwork on  master <span class="token punctuation">[</span>?<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="添加代码"><a href="#添加代码" class="headerlink" title="添加代码"></a>添加代码</h2><p>把 <code>pod</code> 代码和资源文件对应放置到 <code>TXNetwork/Classes</code> 和 <code>TXNetwork/Assets</code>，完成之后打 tag 并推送代码。</p>
<h3 id="提交代码到远程仓库"><a href="#提交代码到远程仓库" class="headerlink" title="提交代码到远程仓库"></a>提交代码到远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Initial commit"</span>
<span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="给当前的版本加上tag，提交到远程仓库"><a href="#给当前的版本加上tag，提交到远程仓库" class="headerlink" title="给当前的版本加上tag，提交到远程仓库"></a>给当前的版本加上tag，提交到远程仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token number">0.1</span>.0 <span class="token parameter variable">-m</span> <span class="token string">'v0.1.0'</span> HEAD
<span class="token function">git</span> push origin tag <span class="token number">0.1</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="编写-podspec"><a href="#编写-podspec" class="headerlink" title="编写 podspec"></a>编写 podspec</h2><p>建议参考<code>cocoapods</code>上面的来做，照着那些第三库的<code>podspec</code>文件写就行了，<a href="https://guides.cocoapods.org/syntax/podspec.html">官方参考</a></p>
<p>这是该 <code>demo</code> 的 <code>podspec</code>:</p>
<pre class="line-numbers language-none"><code class="language-none">#
# Be sure to run &#96;pod lib lint TXNetwork.podspec&#39; to ensure this is a
# valid spec before submitting.
#
# Any lines starting with a # are optional, but their use is encouraged
# To learn more about a Podspec see https:&#x2F;&#x2F;guides.cocoapods.org&#x2F;syntax&#x2F;podspec.html
#

Pod::Spec.new do |s|
  s.name             &#x3D; &#39;TXNetwork&#39;
  s.version          &#x3D; &#39;0.1.0&#39;
  s.summary          &#x3D; &#39;介绍 pod 的描述.&#39;

# This description is used to generate tags and improve search results.
#   * Think: What does it do? Why did you write it? What is the focus?
#   * Try to keep it short, snappy and to the point.
#   * Write the description between the DESC delimiters below.
#   * Finally, don&#39;t worry about the indent, cocoapods strips it!

  s.description      &#x3D; &lt;&lt;-DESC
    介绍 pod 的详细描述。
                       DESC

  s.homepage         &#x3D; &#39;https:&#x2F;&#x2F;your_git_url&#x2F;wangwanjie&#x2F;TXNetworking&#39;
  # s.screenshots     &#x3D; &#39;www.example.com&#x2F;screenshots_1&#39;, &#39;www.example.com&#x2F;screenshots_2&#39;
  s.license          &#x3D; &#123; :type &#x3D;&gt; &#39;MIT&#39;, :file &#x3D;&gt; &#39;LICENSE&#39; &#125;
  s.author           &#x3D; &#123; &#39;wangwanjie&#39; &#x3D;&gt; &#39;wangwanjie1993@gmail.com&#39; &#125;
  s.source           &#x3D; &#123; :git &#x3D;&gt; &#39;https:&#x2F;&#x2F;your_git_url&#x2F;wangwanjie&#x2F;TXNetworking.git&#39;, :tag &#x3D;&gt; s.version.to_s &#125;
  # s.social_media_url &#x3D; &#39;https:&#x2F;&#x2F;twitter.com&#x2F;&lt;TWITTER_USERNAME&gt;&#39;

  s.ios.deployment_target &#x3D; &#39;8.0&#39;

  s.source_files &#x3D; &#39;TXNetwork&#x2F;Classes&#x2F;**&#x2F;*.&#123;h,m&#125;&#39;
  
  # s.resource_bundles &#x3D; &#123;
  #   &#39;TXNetwork&#39; &#x3D;&gt; [&#39;TXNetwork&#x2F;Assets&#x2F;*.png&#39;]
  # &#125;

   s.public_header_files &#x3D; &#39;TXNetwork&#x2F;Classes&#x2F;AFHTTPSessionManager+Retry.h&#39;
  # s.frameworks &#x3D; &#39;UIKit&#39;, &#39;MapKit&#39;
   s.dependency &#39;AFNetworking&#39;, &#39;~&gt; 3.0&#39;
   s.requires_arc &#x3D; true

end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="验证-podspec"><a href="#验证-podspec" class="headerlink" title="验证 podspec"></a>验证 <code>podspec</code></h2><p>如果填写有误，根据提示修改。</p>
<pre class="line-numbers language-none"><code class="language-none">pod lib lint --allow-warnings

 -&gt; TXNetwork (0.1.0)
    - NOTE  | [TXNetwork&#x2F;ObjcAssociatedObjectHelpers] xcodebuild:  note: Using new build system
    - NOTE  | [TXNetwork&#x2F;ObjcAssociatedObjectHelpers] xcodebuild:  note: Planning build
    - NOTE  | [TXNetwork&#x2F;ObjcAssociatedObjectHelpers] xcodebuild:  note: Constructing build description
    - WARN  | xcodebuild:  &#x2F;Users&#x2F;VanJay&#x2F;Documents&#x2F;Work&#x2F;Chaos&#x2F;TXNetwork&#x2F;TXNetwork&#x2F;Classes&#x2F;AFHTTPSessionManager+Retry.m:159:38: warning: this block declaration is not a prototype [-Wstrict-prototypes]
    - WARN  | [iOS] xcodebuild:  &#x2F;Users&#x2F;VanJay&#x2F;Documents&#x2F;Work&#x2F;Chaos&#x2F;TXNetwork&#x2F;TXNetwork&#x2F;Classes&#x2F;AFHTTPSessionManager+Retry.m:151:172: warning: values of type &#39;NSInteger&#39; should not be used as format arguments; add an explicit cast to &#39;long&#39; instead [-Wformat]
    - WARN  | [iOS] xcodebuild:  &#x2F;Users&#x2F;VanJay&#x2F;Documents&#x2F;Work&#x2F;Chaos&#x2F;TXNetwork&#x2F;TXNetwork&#x2F;Classes&#x2F;AFHTTPSessionManager+Retry.m:157:129: warning: values of type &#39;NSInteger&#39; should not be used as format arguments; add an explicit cast to &#39;long&#39; instead [-Wformat]
    - WARN  | [iOS] xcodebuild:  &#x2F;Users&#x2F;VanJay&#x2F;Documents&#x2F;Work&#x2F;Chaos&#x2F;TXNetwork&#x2F;TXNetwork&#x2F;Classes&#x2F;AFHTTPSessionManager+Retry.m:182:118: warning: values of type &#39;NSInteger&#39; should not be used as format arguments; add an explicit cast to &#39;long&#39; instead [-Wformat]

TXNetwork passed validation.

TXNetwork on  master [!] took 23s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在-Example-执行验证-pod-是否可用"><a href="#在-Example-执行验证-pod-是否可用" class="headerlink" title="在 Example 执行验证 pod 是否可用"></a>在 Example 执行验证 pod 是否可用</h2><pre class="line-numbers language-none"><code class="language-none">cd Example
pod install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="向Spec-repo提交podspec"><a href="#向Spec-repo提交podspec" class="headerlink" title="向Spec repo提交podspec"></a>向Spec repo提交podspec</h2><p>向<code>Spec repo</code>提交<code>podspec</code>需要确定podspec必须通过验证无误。 向我们的私有Spec repo提交podspec只需要一个命令：</p>
<pre class="line-numbers language-none"><code class="language-none">pod repo push tianxu TXNetwork.podspec --allow-warnings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="检验-pod-是否可-search"><a href="#检验-pod-是否可-search" class="headerlink" title="检验 pod 是否可 search"></a>检验 pod 是否可 search</h2><pre class="line-numbers language-none"><code class="language-none">pod search 

-&gt; TXNetwork (0.1.0)
   介绍 pod 的描述.
   pod &#39;TXNetwork&#39;, &#39;~&gt; 0.1.0&#39;
   - Homepage: https:&#x2F;&#x2F;your_git_url&#x2F;wangwanjie&#x2F;TXNetworking
   - Source:   https:&#x2F;&#x2F;your_git_url&#x2F;wangwanjie&#x2F;TXNetworking.git
   - Versions: 0.1.0 [tianxu repo]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="使用私有-repo"><a href="#使用私有-repo" class="headerlink" title="使用私有 repo"></a>使用私有 repo</h1><p>指定 <code>Specs</code> 的位置,自定义添加自己的<code>podspec</code>。公司内部使用 <code>cocoapods</code>， 官方 <code>source</code> 是隐式的需要的，一旦你指定了其他 <code>source</code>，<code>Podfile</code> 里你就需要也把官方的指定上。</p>
<pre class="line-numbers language-none"><code class="language-none">source &#39;https:&#x2F;&#x2F;github.com&#x2F;cocoapods&#x2F;Specs.git&#39;  # 官方库
source &#39;https:&#x2F;&#x2F;your_git_url&#x2F;wangwanjie&#x2F;tianxu-Specs.git&#39; # 私有库

target &#39;NewProject&#39; do
  # Uncomment the next line if you&#39;re using Swift or would like to use dynamic frameworks
  # use_frameworks!

  # Pods for NewProject
  pod &#39;TXNetwork&#39;
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>pod</tag>
        <tag>cocoapods</tag>
      </tags>
  </entry>
  <entry>
    <title>docker hud 拉取镜像慢解决办法</title>
    <url>/2023/11/17/docker-hud-%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F%E6%85%A2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在日常的Docker使用中，我们可能会遇到一个常见的问题：在特定机器上拉取Docker镜像非常缓慢，甚至无法连接到外网。这种情况通常发生在网络限制较多的环境中，如一些公司的内部网络或地理位置较偏远的区域。但幸运的是，如果我们手头有一台可以“翻墙”并访问外网的本地机器，就可以采用一种曲线救国的方法来解决这个问题。本文将介绍如何通过skopeo工具，高效地在本地机器上拉取Docker镜像，并将其迁移到目标机器上。</p>
<span id="more"></span>

<h2 id="尝试过的解决方案"><a href="#尝试过的解决方案" class="headerlink" title="尝试过的解决方案"></a>尝试过的解决方案</h2><p>在找到最终的解决方案之前，我尝试了几种其他方法：</p>
<ul>
<li><a href="https://github.com/NotGlop/docker-drag">docker-drag</a>：这个工具虽然理念不错，但在实际操作中并未奏效。</li>
<li><a href="https://github.com/moby/moby/blob/master/contrib/download-frozen-image-v2.sh">download-frozen-image-v2.sh</a>：这是Moby项目的一个脚本，但同样没有解决我的问题。</li>
</ul>
<p>最终，我发现了 <a href="https://github.com/containers/skopeo">skopeo</a>，这个工具完美地解决了我的问题。</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-安装skopeo"><a href="#1-安装skopeo" class="headerlink" title="1. 安装skopeo"></a>1. 安装skopeo</h3><p>首先，无论是在目标机器还是操作机器上，都需要安装skopeo。安装方法可以参考 <a href="https://github.com/containers/skopeo/blob/main/install.md">skopeo Installation Guide</a>。</p>
<h3 id="2-使用操作机器下载镜像"><a href="#2-使用操作机器下载镜像" class="headerlink" title="2. 使用操作机器下载镜像"></a>2. 使用操作机器下载镜像</h3><p>在操作机器上，运行以下命令来下载Docker镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">skopeo copy --override-os linux --override-arch amd64 docker://tinymediamanager/tinymediamanager:latest dir:./tinymediamanager_image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里的参数解释如下：</p>
<ul>
<li>–override-os linux 和 –override-arch amd64 用于指定目标操作系统和架构。</li>
<li>docker:&#x2F;&#x2F;tinymediamanager&#x2F;tinymediamanager:latest 指定了要拉取的镜像。</li>
<li>dir:.&#x2F;tinymediamanager_image 表示将镜像保存到当前目录下的 tinymediamanager_image 文件夹。</li>
</ul>
<h3 id="3-压缩镜像文件夹"><a href="#3-压缩镜像文件夹" class="headerlink" title="3. 压缩镜像文件夹"></a>3. 压缩镜像文件夹</h3><p>为了更快地将文件传输到目标机器，我们可以将下载的镜像文件夹压缩成tar文件：</p>
<pre class="line-numbers language-none"><code class="language-none">tar -czf tinymediamanager.tar .&#x2F;tinymediamanager_image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="4-传输至目标机器"><a href="#4-传输至目标机器" class="headerlink" title="4. 传输至目标机器"></a>4. 传输至目标机器</h3><p>使用 scp 命令将tar文件传输到目标机器：</p>
<pre class="line-numbers language-none"><code class="language-none">scp -i $HOME&#x2F;.ssh&#x2F;id_rsa -r -P your_port .&#x2F;tinymediamanager.tar root@your_ip:&#x2F;root&#x2F;docker_image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="5-在目标机器解压tar"><a href="#5-在目标机器解压tar" class="headerlink" title="5. 在目标机器解压tar"></a>5. 在目标机器解压tar</h3><p>登录目标机器后，执行以下命令来解压tar文件：</p>
<pre class="line-numbers language-none"><code class="language-none">tar -xzf tinymediamanager.tar -C &#x2F;root&#x2F;docker_images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="6-在目标机器导入镜像"><a href="#6-在目标机器导入镜像" class="headerlink" title="6. 在目标机器导入镜像"></a>6. 在目标机器导入镜像</h3><p>最后，使用skopeo在目标机器上导入镜像：</p>
<pre class="line-numbers language-none"><code class="language-none">skopeo copy dir:&#x2F;root&#x2F;docker_images&#x2F;tinymediamanager_image docker-daemon:tinymediamanager&#x2F;tinymediamanager:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用skopeo，我们不仅解决了拉取Docker镜像慢的问题，还学习了如何高效地在不同机器间迁移Docker镜像。感谢开源社区及<a href="https://github.com/containers/skopeo">skopeo贡献者们</a>的辛勤付出和创新精神！</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>运维</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>git 开发中常见误操作及个人认为的最佳解决办法</title>
    <url>/2016/08/03/git-%E5%BC%80%E5%8F%91%E4%B8%AD%E5%B8%B8%E8%A7%81%E8%AF%AF%E6%93%8D%E4%BD%9C%E5%8F%8A%E4%B8%AA%E4%BA%BA%E8%AE%A4%E4%B8%BA%E7%9A%84%E6%9C%80%E4%BD%B3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>这篇文章记录的是在使用<code>git</code>过程中遇到的问题及我的解决办法，普通的使用这里不会记录，遇到了更多问题之后我会来更新这篇文章。</p>
<span id="more"></span>

<h2 id="commit时选错了对应文件"><a href="#commit时选错了对应文件" class="headerlink" title="commit时选错了对应文件"></a><code>commit</code>时选错了对应文件</h2><p>提交记录一般只做一件事情就好，可以的话，适当的细分是很有必要的，当然对应的关联的改动文件也要正确，但是如果是一次改动中动了多个文件，但是改了两个需求，又想分两次提交，当然是多选该功能改动的文件然后写<code>commit log</code>，但是如果不小心选错了或者多选择了不相关文件并已经<code>commit</code>了的话，可是使用<code>git reset</code>来恢复，先<code>git log</code>复制最新一次的上一次的<code>commit id</code>，执行<code>git reset --soft desc_commit_id</code>，此时代码便会恢复到你刚刚提交之前，改动都还在但是错误的 <code>commit log</code> 不见了，这是强迫症最舒服的地方，此时你可以重新选择文件再次提交，干净的<code>commit log</code>是不是很舒服？</p>
<p><strong>注意</strong><code>git reset</code>是有点危险的操作，在不确定是否一定抛弃已有改动，不要使用<code>git reset --hard</code>，注意这里的参数，<code>--hard</code>和<code>--soft</code>，前者会恢复到当次 <code>commit id</code>并且<code>discard</code>了<code>commit id</code>之前所有的<code>commit id</code>的改动，如果远程端没有记录，那么你将丢失未保存的所有改动，切记切记；而后者只会删除你不需要的<code>commit log</code>，但是该<code>commit id</code>之前所有的<code>commit id</code>的改动都还在，只是’commit log’被清了，此时你可以重新写<code>log</code>，如果已经推送到了远程，发现很及时的话，先<code>git pull</code>最新代码，确保没有同事新提交过代码，直接用<code>reset</code>之后的记录覆盖远端，如果有同事提交了，可以<code>git reset --soft</code>之后<code>cheery pick</code>该记录再覆盖远端。</p>
<p>慢慢细读并跟着走的话应该可以看懂了，这里还是实例记录下：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  Desktop  mkdir example
☁  Desktop  cd example
☁  example  git init
Initialized empty Git repository in &#x2F;Users&#x2F;VanJay&#x2F;Desktop&#x2F;example&#x2F;.git&#x2F;
☁  example [master] git add .
☁  example [master] git clone https:&#x2F;&#x2F;github.com&#x2F;dracula&#x2F;xcode.git
☁  example [master] git commit -m &quot;Initial commit&quot;
On branch master

Initial commit

nothing to commit
☁  example [master] git log
fatal: your current branch &#39;master&#39; does not have any commits yet
☁  example [master] touch a.file
☁  example [master] ⚡ git add .
☁  example [master] ⚡ git commit -m &quot;Added a.file&quot;
[master (root-commit) fa2ed5d] Added a.file
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 a.file
☁  example [master] git log
☁  example [master] touch b.file
☁  example [master] ⚡ touch c.file
☁  example [master] ⚡ git add .
☁  example [master] ⚡ git commit help
error: pathspec &#39;help&#39; did not match any file(s) known to git.
☁  example [master] ⚡ git commit --help
☁  example [master] ⚡ git commit -m &quot;Added b.file&quot;
[master 0a03cd8] Added b.file
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 b.file
 create mode 100644 c.file
☁  example [master] git log
☁  example [master] git reset --soft fa2ed5d01756b3b63b00488418c1a73eb30c4d66
☁  example [master] ⚡ git status
On branch master
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)

	new file:   b.file
	new file:   c.file
☁  example [master] ⚡ git log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到在提交了 <code>b.file</code>和<code>c.file</code>之后恢复了之前的状态，<code>git log</code>查看只有一次<code>commit log</code>了，这个时候可以重新写<code>log</code>提交。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 企业版应用一键更新</title>
    <url>/2017/03/22/iOS-%E4%BC%81%E4%B8%9A%E7%89%88%E5%BA%94%E7%94%A8%E4%B8%80%E9%94%AE%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>如果后台没有获取版本号的接口，自己就直接从下载企业版应用指向的 <code>plist</code> 文件中获取吧，如果有，就不用这么麻烦还要去下载整个 <code>plist</code> 文件了，直接根据拿到的版本好与本地对比即可。</p>
<span id="more"></span>


<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">mark <span class="token operator">-</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">mark 检查更新</span></span>
<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>checkForUpdating <span class="token punctuation">&#123;</span>
    <span class="token comment">// 先清空之前下载的缓存文件</span>
    NSString <span class="token operator">*</span>tmpDirectory <span class="token operator">=</span> <span class="token function">NSTemporaryDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    NSFileManager <span class="token operator">*</span>fileManager <span class="token operator">=</span> <span class="token punctuation">[</span>NSFileManager defaultManager<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSError <span class="token operator">*</span>error<span class="token punctuation">;</span>
    NSArray <span class="token operator">*</span>cacheFiles <span class="token operator">=</span> <span class="token punctuation">[</span>fileManager contentsOfDirectoryAtPath<span class="token punctuation">:</span>tmpDirectory error<span class="token punctuation">:</span><span class="token operator">&amp;</span>error<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSString <span class="token operator">*</span>file <span class="token keyword">in</span> cacheFiles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        error <span class="token operator">=</span> nil<span class="token punctuation">;</span>
        <span class="token punctuation">[</span>fileManager removeItemAtPath<span class="token punctuation">:</span><span class="token punctuation">[</span>tmpDirectory stringByAppendingPathComponent<span class="token punctuation">:</span>file<span class="token punctuation">]</span> error<span class="token punctuation">:</span><span class="token operator">&amp;</span>error<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token comment">// 从服务器下载plist文件</span>
    NSURLRequest <span class="token operator">*</span>downloadRequest <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLRequest requestWithURL<span class="token punctuation">:</span><span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span>CheckUpdatingPlistUrl<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSURLSessionConfiguration <span class="token operator">*</span>sessionConfig <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLSessionConfiguration defaultSessionConfiguration<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSURLSession <span class="token operator">*</span>urlSession <span class="token operator">=</span> <span class="token punctuation">[</span>NSURLSession sessionWithConfiguration<span class="token punctuation">:</span>sessionConfig delegate<span class="token punctuation">:</span>nil delegateQueue<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
    NSURLSessionDownloadTask <span class="token operator">*</span>task <span class="token operator">=</span> <span class="token punctuation">[</span>urlSession downloadTaskWithRequest<span class="token punctuation">:</span>downloadRequest completionHandler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>NSURL <span class="token operator">*</span> _Nullable location<span class="token punctuation">,</span> NSURLResponse <span class="token operator">*</span> _Nullable response<span class="token punctuation">,</span> NSError <span class="token operator">*</span> _Nullable error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"获取下载服务器版本失败:\n%@"</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            NSDictionary <span class="token operator">*</span>dict <span class="token operator">=</span> <span class="token punctuation">[</span>NSDictionary dictionaryWithContentsOfURL<span class="token punctuation">:</span>location<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 服务器版本号</span>
            NSString <span class="token operator">*</span>serverVersion <span class="token operator">=</span> dict<span class="token punctuation">[</span><span class="token string">@"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">@"metadata"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">@"bundle-version"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 本地版本号</span>
            NSString <span class="token operator">*</span>localVersion <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>NSBundle mainBundle<span class="token punctuation">]</span> infoDictionary<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">@"CFBundleShortVersionString"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 对比版本号，升序</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>localVersion compare<span class="token punctuation">:</span>serverVersion options<span class="token punctuation">:</span>NSNumericSearch<span class="token punctuation">]</span> <span class="token operator">==</span> NSOrderedAscending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                
                <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">&#123;</span>
                     <span class="token comment">// 先提示安装</span>
                    FCAlertView <span class="token operator">*</span>alert <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>FCAlertView alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">[</span>alert showAlertWithTitle<span class="token punctuation">:</span><span class="token string">@"提示"</span> withSubtitle<span class="token punctuation">:</span><span class="token string">@"新版本已发布，点击确定开始更新"</span> withCustomImage<span class="token punctuation">:</span>nil withDoneButtonTitle<span class="token punctuation">:</span>nil andButtons<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    alert<span class="token punctuation">.</span>hideDoneButton <span class="token operator">=</span> YES<span class="token punctuation">;</span>
                    alert<span class="token punctuation">.</span>bounceAnimations <span class="token operator">=</span> YES<span class="token punctuation">;</span>
                    alert<span class="token punctuation">.</span>colorScheme <span class="token operator">=</span> alert<span class="token punctuation">.</span>flatOrange<span class="token punctuation">;</span>
                    <span class="token punctuation">[</span>alert makeAlertTypeCaution<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    alert<span class="token punctuation">.</span>subTitleColor <span class="token operator">=</span> <span class="token punctuation">[</span>UIColor redColor<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">[</span>alert addButton<span class="token punctuation">:</span><span class="token string">@"确定"</span> withActionBlock<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">&#123;</span>
                        
                       <span class="token comment">// 模拟器不支持</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>TARGET_IPHONE_SIMULATOR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"模拟器不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
                        <span class="token comment">// 真机执行安装</span>
                        NSURL <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span><span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"itms-services://?action=download-manifest&amp;url=%@"</span><span class="token punctuation">,</span> CheckUpdatingPlistUrl<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token punctuation">[</span><span class="token punctuation">[</span>UIApplication sharedApplication<span class="token punctuation">]</span> openURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        
                        <span class="token comment">// 动画退出App</span>
                        UIWindow <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token punctuation">[</span>UIApplication sharedApplication<span class="token punctuation">]</span><span class="token punctuation">.</span>keyWindow<span class="token punctuation">;</span>
                        <span class="token punctuation">[</span>UIView animateWithDuration<span class="token punctuation">:</span><span class="token number">.5f</span> animations<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">&#123;</span>
                            window<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                            CGFloat width <span class="token operator">=</span> window<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
                            CGFloat height <span class="token operator">=</span> window<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
                            window<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span> completion<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>BOOL finished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                        
                    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token punctuation">[</span>alert addButton<span class="token punctuation">:</span><span class="token string">@"下次再说"</span> withActionBlock<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>task resume<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那个 <code>FCAlertView</code> 没有可以用原生的，比如：</p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token comment">// 对比版本号，升序</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>localVersion compare<span class="token punctuation">:</span>serverVersion options<span class="token punctuation">:</span>NSNumericSearch<span class="token punctuation">]</span> <span class="token operator">==</span> NSOrderedAscending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    __weak <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span> weakSelf <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>
    <span class="token function">dispatch_async</span><span class="token punctuation">(</span><span class="token function">dispatch_get_main_queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">^</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 先提示安装</span>
        UIAlertController <span class="token operator">*</span>alertVc <span class="token operator">=</span> <span class="token punctuation">[</span>UIAlertController alertControllerWithTitle<span class="token punctuation">:</span><span class="token string">@"提示"</span> message<span class="token punctuation">:</span><span class="token string">@"新版本已发布，点击确定开始更新"</span> preferredStyle<span class="token punctuation">:</span>UIAlertControllerStyleAlert<span class="token punctuation">]</span><span class="token punctuation">;</span>
        UIAlertAction <span class="token operator">*</span>confirmAct <span class="token operator">=</span> <span class="token punctuation">[</span>UIAlertAction actionWithTitle<span class="token punctuation">:</span><span class="token string">@"确定"</span> style<span class="token punctuation">:</span>UIAlertActionStyleDefault handler<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>UIAlertAction <span class="token operator">*</span> _Nonnull action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            
            <span class="token comment">// 模拟器不支持</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>TARGET_IPHONE_SIMULATOR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token function">WJLog</span><span class="token punctuation">(</span><span class="token string">@"模拟器不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
            <span class="token comment">// 真机执行安装</span>
            NSURL <span class="token operator">*</span>url <span class="token operator">=</span> <span class="token punctuation">[</span>NSURL URLWithString<span class="token punctuation">:</span><span class="token punctuation">[</span>NSString stringWithFormat<span class="token punctuation">:</span><span class="token string">@"itms-services://?action=download-manifest&amp;url=%@"</span><span class="token punctuation">,</span> CheckUpdatingPlistUrl<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">[</span><span class="token punctuation">[</span>UIApplication sharedApplication<span class="token punctuation">]</span> openURL<span class="token punctuation">:</span>url<span class="token punctuation">]</span><span class="token punctuation">;</span>
            
            <span class="token comment">// 动画退出App</span>
            UIWindow <span class="token operator">*</span>window <span class="token operator">=</span> <span class="token punctuation">[</span>UIApplication sharedApplication<span class="token punctuation">]</span><span class="token punctuation">.</span>keyWindow<span class="token punctuation">;</span>
            <span class="token punctuation">[</span>UIView animateWithDuration<span class="token punctuation">:</span><span class="token number">.5f</span> animations<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">&#123;</span>
                window<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                CGFloat width <span class="token operator">=</span> window<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
                CGFloat height <span class="token operator">=</span> window<span class="token punctuation">.</span>bounds<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
                window<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token function">CGRectMake</span><span class="token punctuation">(</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> completion<span class="token punctuation">:</span><span class="token operator">^</span><span class="token punctuation">(</span>BOOL finished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            
        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 取消</span>
        UIAlertAction <span class="token operator">*</span>cancelAct <span class="token operator">=</span> <span class="token punctuation">[</span>UIAlertAction actionWithTitle<span class="token punctuation">:</span><span class="token string">@"下次再说"</span> style<span class="token punctuation">:</span>UIAlertActionStyleDefault handler<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token punctuation">[</span>alertVc addAction<span class="token punctuation">:</span>confirmAct<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">[</span>alertVc addAction<span class="token punctuation">:</span>cancelAct<span class="token punctuation">]</span><span class="token punctuation">;</span>
        
        <span class="token punctuation">[</span>weakSelf<span class="token punctuation">.</span>window<span class="token punctuation">.</span>rootViewController presentViewController<span class="token punctuation">:</span>alertVc animated<span class="token punctuation">:</span>YES completion<span class="token punctuation">:</span>nil<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS 应用更新</tag>
        <tag>企业版应用更新</tag>
        <tag>打包</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 使用 cocoapods 组件化心得记录</title>
    <url>/2020/03/11/iOS-%E4%BD%BF%E7%94%A8-cocoapods-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BF%83%E5%BE%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2020年2月10日，在疫情的影响之下，公司只能远程开工，这天算是上班的第一天，上午召开了公司全体员工远程会议，宣贯了一些通知和公司计划。结论是：公司之前做的支付产品“ViPay”暂时停止步伐，转而进军其他领域，从宣贯至今，风头时而有变化，一会儿裁员一会又是做外包的，最后确切消息是要做一个超级 App，有点类似国内的支付宝和美团，所以之前我加了几百个小时班优化的客户端就这样夭折了，但是组件要抽出来做他用，还要为后期做容器接入第三方做准备，折腾了这么多天，记录一些小心得。</p>
<span id="more"></span>


<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>组件化的方案采用的是用 cocoapods 管理，<a href="https://www.vanjay.cn/2019/04/01/cocoapods-%E7%A7%81%E6%9C%89%E5%BA%93%E7%9A%84%E6%90%AD%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8/">搭建私有库</a>，根据职责区分区分模块，因为项目还没真正开始，是正准备阶段，暂时是这么划分的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HDKit
├── Chaos-specs 				私有 cocoapods 仓库
├── HDCashierKit 			收银台，因为此块需要单独给第三方
├── HDServiceKit				基础服务
├── HDUIKit 					UI 组件
├── HDVendorKit 				对第三方库的二次加工或封装
└── xmind 					各模块脑图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="少啰嗦，先看东西"><a href="#少啰嗦，先看东西" class="headerlink" title="少啰嗦，先看东西"></a>少啰嗦，先看东西</h2><h3 id="部分成果"><a href="#部分成果" class="headerlink" title="部分成果"></a>部分成果</h3><img src="/images/iOS/module/uikit.png"/>
<img src="/images/iOS/module/servicekit1.png"/>
<img src="/images/iOS/module/servicekit2.png"/>

<p>四个库同时进行（因为相互间可能有依赖），为了能够快速验证一些想法和做法，我是这么放在一个 workspace 工作的</p>
<img src="/images/iOS/module/desktop.png"/>

<h3 id="看看其中两个库的-podspec"><a href="#看看其中两个库的-podspec" class="headerlink" title="看看其中两个库的 podspec"></a>看看其中两个库的 podspec</h3><h4 id="HDUIKit"><a href="#HDUIKit" class="headerlink" title="HDUIKit"></a>HDUIKit</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Pod<span class="token double-colon punctuation">::</span><span class="token class-name">Spec</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> <span class="token operator">|</span>s<span class="token operator">|</span>
  s<span class="token punctuation">.</span>name             <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HDUIKit"</span></span>
  s<span class="token punctuation">.</span>version          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0.4.5"</span></span>
  s<span class="token punctuation">.</span>summary          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"混沌 iOS 项目组件库"</span></span>
  s<span class="token punctuation">.</span>description      <span class="token operator">=</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;-</span><span class="token symbol">DESC</span></span><span class="token string">
                       HDUIKit 是一系列 iOS 组件的组成，用于快速在其他项目使用或者第三方接入
                       </span><span class="token delimiter"><span class="token symbol">DESC</span></span></span>
  s<span class="token punctuation">.</span>homepage         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"https://git.vipaylife.com/vipay/HDUIKit"</span></span>
  s<span class="token punctuation">.</span>license          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'MIT'</span></span>
  s<span class="token punctuation">.</span>author           <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"VanJay"</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"wangwanjie1993@gmail.com"</span></span><span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span>source           <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token symbol">:git</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"git@git.vipaylife.com:vipay/HDUIKit.git"</span></span><span class="token punctuation">,</span> <span class="token symbol">:tag</span> <span class="token operator">=></span> s<span class="token punctuation">.</span>version<span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span>social_media_url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://git.vipaylife.com/vipay/HDUIKit'</span></span>
  s<span class="token punctuation">.</span>requires_arc     <span class="token operator">=</span> <span class="token boolean">true</span>
  s<span class="token punctuation">.</span>documentation_url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://git.vipaylife.com/vipay/HDUIKit'</span></span>
  s<span class="token punctuation">.</span>screenshot       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://xxx.png'</span></span>

  s<span class="token punctuation">.</span>platform         <span class="token operator">=</span> <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'9.0'</span></span>
  s<span class="token punctuation">.</span>frameworks       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Foundation'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'UIKit'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'CoreGraphics'</span></span>
  s<span class="token punctuation">.</span>source_files     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/HDUIKit.h'</span></span>
  s<span class="token punctuation">.</span>pod_target_xcconfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">'OTHER_LDFLAGS'</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">'-lObjC'</span></span> <span class="token punctuation">&#125;</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'Core'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/HDUIKit.h'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/Core'</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/*/*'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDWeakObjectContainer'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDLog'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDRuntime'</span></span>
    ss<span class="token punctuation">.</span>frameworks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'AVFoundation'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'MainFrame'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/MainFrame'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDNavigationBar'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDAppTheme'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIImage'</span></span>
    ss<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDUIKitMainFrameResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDUIKit/MainFrame/Resources/*.*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDNavigationBar'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/MainFrame/HDNavigationBar'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/MainFrame/HDNavigationBar/*/*'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDRuntime'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Core/Runtime'</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/&#123;NSMethodSignature&#125;+HDUIKit.&#123;h,m&#125;'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDLog'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'MethodSwizzle'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/NSObject/NSObject+HD_Swizzle.&#123;h,m&#125;'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'DispatchMainQueueSafe'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/DispatchMainQueueSafe'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDAppTheme'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Theme'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIColor'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDWeakObjectContainer'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDWeakObjectContainer/HDWeakObjectContainer.&#123;h,m&#125;'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'WJFrameLayout'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/WJFrameLayout'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'WJFunctionThrottle'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/WJFunctionThrottle'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDLog'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDLog'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDCodeGenerator'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Vender/HDCodeGenerator'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/Vender/HDCodeGenerator/*/*'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'UIKitExtensions'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/*/*'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Core'</span></span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'UIView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'NSString'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/NSString'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'UIColor'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIColor'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/NSString'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'UIImage'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIImage'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/NSString'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'UIButton'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/UIKitExtensions/UIButton'</span></span>
    <span class="token keyword">end</span>

  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'Components'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Core'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDAppTheme'</span></span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDButton'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDButton'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDCyclePagerView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDCyclePagerView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDFloatLayoutView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDFloatLayoutView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDGridView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDGridView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDKeyBoard'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDKeyBoard'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDButton'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/WJFrameLayout'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDRatingStarView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDRatingStarView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDTextView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDTextView'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/MultipleDelegates'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDTips'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDTips'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/ToastView'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/ProgressView'</span></span>
      sss<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDUIKitTipsResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDUIKit/Components/HDTips/Resources/*.*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'MultipleDelegates'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/MultipleDelegates'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'ProgressView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/ProgressView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'ToastView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/ToastView'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDVisualEffectView'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDActionAlertView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDActionAlertView'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/DispatchMainQueueSafe'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDAlertView'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDAlertView'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDActionAlertView'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/HDAppTheme'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/WJFrameLayout'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'NAT'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>sss<span class="token operator">|</span>
      sss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDUIKit/Components/NAT'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'FFToast'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'~> 1.2.0'</span></span>
      sss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDAlertView'</span></span>
    <span class="token keyword">end</span>

  <span class="token keyword">end</span>

<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="HDServiceKit"><a href="#HDServiceKit" class="headerlink" title="HDServiceKit"></a>HDServiceKit</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Pod<span class="token double-colon punctuation">::</span><span class="token class-name">Spec</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> <span class="token operator">|</span>s<span class="token operator">|</span>
  s<span class="token punctuation">.</span>name             <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"HDServiceKit"</span></span>
  s<span class="token punctuation">.</span>version          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0.4.3"</span></span>
  s<span class="token punctuation">.</span>summary          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"混沌 iOS 服务"</span></span>
  s<span class="token punctuation">.</span>description      <span class="token operator">=</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;-</span><span class="token symbol">DESC</span></span><span class="token string">
                       HDServiceKit 是一系列服务以及能力，用于快速在其他项目使用或者第三方接入
                       </span><span class="token delimiter"><span class="token symbol">DESC</span></span></span>
  s<span class="token punctuation">.</span>homepage         <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"https://git.vipaylife.com/vipay/HDServiceKit"</span></span>
  s<span class="token punctuation">.</span>license          <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'MIT'</span></span>
  s<span class="token punctuation">.</span>author           <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"VanJay"</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"wangwanjie1993@gmail.com"</span></span><span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span>source           <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token symbol">:git</span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"git@git.vipaylife.com:vipay/HDServiceKit.git"</span></span><span class="token punctuation">,</span> <span class="token symbol">:tag</span> <span class="token operator">=></span> s<span class="token punctuation">.</span>version<span class="token punctuation">.</span>to_s<span class="token punctuation">&#125;</span>
  s<span class="token punctuation">.</span>social_media_url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://git.vipaylife.com/vipay/HDServiceKit'</span></span>
  s<span class="token punctuation">.</span>requires_arc     <span class="token operator">=</span> <span class="token boolean">true</span>
  s<span class="token punctuation">.</span>documentation_url <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://git.vipaylife.com/vipay/HDServiceKit'</span></span>
  s<span class="token punctuation">.</span>screenshot       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'https://xxx.png'</span></span>

  s<span class="token punctuation">.</span>platform         <span class="token operator">=</span> <span class="token symbol">:ios</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'9.0'</span></span>
  s<span class="token punctuation">.</span>frameworks       <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'Foundation'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'UIKit'</span></span>
  s<span class="token punctuation">.</span>source_files     <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDServiceKit.h'</span></span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDCache'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>libraries <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'pthread'</span></span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDCache'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDCache/*/*'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'YYModel'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'~> 1.0.4'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'UICKeyChainStore'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'~> 2.1.2'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'AntiCrash'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>requires_arc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/AntiCrash/NSObjectSafe.h'</span></span><span class="token punctuation">]</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/AntiCrash'</span></span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/MethodSwizzle'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'Location'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/Location'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDServiceKit/Location/*/*'</span></span>
    ss<span class="token punctuation">.</span>frameworks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'CoreLocation'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'MapKit'</span></span>
    ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDUIKit/HDLog'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'FileOperation'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/FileOperation'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDReachability'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDReachability'</span></span>
  <span class="token keyword">end</span>

  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDPodAsset'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDPodAsset'</span></span>
  <span class="token keyword">end</span>
  
  s<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'HDWebViewHost'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
    ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDServiceKit/FileOperation'</span></span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'Core'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
      ss<span class="token punctuation">.</span>libraries <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'xml2'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'z'</span></span>
      ss<span class="token punctuation">.</span>frameworks <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'SafariServices'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'WebKit'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'MobileCoreServices'</span></span>
      ss<span class="token punctuation">.</span>xcconfig <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">"HEADER_SEARCH_PATHS"</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"$(SDKROOT)/usr/include/libxml2"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"$(SDKROOT)/usr/include/libz"</span></span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span>
      ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Core'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Core/**/*.&#123;h,m&#125;'</span></span>
      ss<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDWebViewHostCoreResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Core/Resources/*.*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDUIKit/MainFrame'</span></span>
      ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDServiceKit/HDReachability'</span></span>
      ss<span class="token punctuation">.</span>dependency <span class="token string-literal"><span class="token string">'HDUIKit/Components/HDTips'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'RemoteDebug'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
      ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/RemoteDebug'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/RemoteDebug/GCDWebServer/**/*'</span></span>
      ss<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDWebViewHostRemoteDebugResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/RemoteDebug/src/*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Core'</span></span>
      ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDServiceKit/HDPodAsset'</span></span>
    <span class="token keyword">end</span>

    ss<span class="token punctuation">.</span>subspec <span class="token string-literal"><span class="token string">'Preloader'</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>ss<span class="token operator">|</span>
      ss<span class="token punctuation">.</span>source_files <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Preloader/*/*'</span></span>
      ss<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDWebViewHostPreloaderResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Preloader/html/*.*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
      ss<span class="token punctuation">.</span>dependency  <span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Core'</span></span>
    <span class="token keyword">end</span>

  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h4><ul>
<li>subspec 的资源文件最好自己管理，不然如果 subspec 在被别处单独引入的时候，资源文件不会被拉取</li>
<li>一些分类文件，内部调用错综复杂，如果要考虑划分很细到每个 subspec 将痛苦不堪，建议这些文件统一放在 Core ，必要引入，如果使用了分类，记得添加配置 <code>s.pod_target_xcconfig = &#123; &#39;OTHER_LDFLAGS&#39; =&gt; &#39;-lObjC&#39; &#125;</code></li>
</ul>
<ul>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html">cocoapods document</a> 官方文档最新、最权威</li>
</ul>
<h2 id="提高效率"><a href="#提高效率" class="headerlink" title="提高效率"></a>提高效率</h2><p>如果你没有自己一套的便利快捷的工作流，光是文件夹和工程间切换就足以让大部分人头痛，而且还容易出错，一向懒得我在经历了一上午的折磨后就着手写脚本解放双手了。</p>
<h3 id="自动生成头文件"><a href="#自动生成头文件" class="headerlink" title="自动生成头文件"></a>自动生成头文件</h3><p>开发三方库时，往往会建立一个 import 了其他所有公用类的头文件，但是如果每增加一个功能或组件就要手动更新这个文件，实在太痛苦，可想而知，这是一项痛苦的工作，而且极度容易出错，所以我写了一个 python 脚本，在 xcode build 时自动触发，生成最新头文件，自动查找 podspec 文件，自动获取版本号，当然，也可以脱离 xcode build 执行，脚本内部做了简单判断，脚本内容如下：</p>
<p><code>HeaderFileGenerator.py</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> os


<span class="token comment"># 判断是否存在 podspec 文件</span>
<span class="token keyword">def</span> <span class="token function">isExistPodspec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    allFiles <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    isExist <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">for</span> fileName <span class="token keyword">in</span> allFiles<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'.podspec'</span> <span class="token keyword">in</span> fileName<span class="token punctuation">:</span>
            isExist <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token comment"># 记得跳出循环</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            isExist <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> isExist

<span class="token comment"># 自动获取 podspec 文件</span>
<span class="token keyword">def</span> <span class="token function">getPodspecFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    listFile <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 文件后缀名，自动查找</span>
    file_extension <span class="token operator">=</span> <span class="token string">"podspec"</span>
    <span class="token keyword">for</span> fileName <span class="token keyword">in</span> listFile<span class="token punctuation">:</span>
        <span class="token keyword">if</span> fileName<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>file_extension<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> fileName

    os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"say 未找到"</span> <span class="token operator">+</span> file_extension <span class="token operator">+</span> <span class="token string">"文件"</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">"not found"</span>

<span class="token comment"># 自动获取版本号</span>
<span class="token keyword">def</span> <span class="token function">getPodspecVersion</span><span class="token punctuation">(</span>podspecFileName<span class="token punctuation">)</span><span class="token punctuation">:</span>
    podspec_path <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> podspecFileName
    versionLine <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>podspec_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'s.version'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
            versionLine <span class="token operator">=</span> line
            <span class="token keyword">break</span>

    version <span class="token operator">=</span> <span class="token string">''</span>
    splitStr <span class="token operator">=</span> versionLine<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>splitStr<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>
        version <span class="token operator">=</span> splitStr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> version

<span class="token keyword">if</span> <span class="token keyword">not</span> isExistPodspec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># xcode build 触发</span>
    <span class="token comment"># 回到上级目录</span>
    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># podspec 文件</span>
podspecFileName <span class="token operator">=</span> getPodspecFile<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 库名称</span>
podName <span class="token operator">=</span> podspecFileName<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token comment"># 根目录</span>
ROOT_DIR_PATH <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> podName
<span class="token comment"># 版本</span>
version <span class="token operator">=</span> getPodspecVersion<span class="token punctuation">(</span>podspecFileName<span class="token punctuation">)</span>
<span class="token comment"># 头文件名称</span>
HeaderFileFullName <span class="token operator">=</span> podName <span class="token operator">+</span> <span class="token string">'.h'</span>

<span class="token comment"># 递归收集所有文件</span>
<span class="token keyword">def</span> <span class="token function">fileListForDir</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> dir_path<span class="token punctuation">,</span> subdir_list<span class="token punctuation">,</span> file_list <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 隐私头文件目录不导入</span>
        <span class="token keyword">if</span> dir_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Private'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'过滤隐私目录:'</span><span class="token operator">+</span>dir_path<span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token comment"># 可以在这里设置过滤不相关目录</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span><span class="token punctuation">(</span>dir_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">".git"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> dir_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">".gitee"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> dir_path<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">".svn"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">or</span> dir_path<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'lproj'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> dir_path<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'xcassets'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> fname <span class="token keyword">in</span> file_list<span class="token punctuation">:</span>
                <span class="token comment"># if fname != HeaderFileFullName and (fname.lower().endswith(".h") or fname.lower().endswith(".c")):</span>
                <span class="token keyword">if</span> fname <span class="token operator">!=</span> HeaderFileFullName <span class="token keyword">and</span> <span class="token punctuation">(</span>fname<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">".h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> fname<span class="token punctuation">)</span>
                    <span class="token comment"># 这是全路径</span>
                    <span class="token comment"># fileList.append(full_path + fname)</span>
                    fileList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>fname<span class="token punctuation">)</span>
    <span class="token keyword">return</span> fileList


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始生成头文件'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'根目录：'</span> <span class="token operator">+</span> ROOT_DIR_PATH<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'版本号：'</span> <span class="token operator">+</span> version<span class="token punctuation">)</span>

    fileContent <span class="token operator">=</span> <span class="token triple-quoted-string string">'''//
//  %s.h
//  %s
//
//  Created by VanJay on 2020/2/26.
//  Copyright © 2020 VanJay. All rights reserved.
//  This file is generated automatically.

#ifndef %s_h
#define %s_h

#import &lt;UIKit/UIKit.h>

/// 版本号
static NSString * const %s_VERSION = @"%s";

'''</span> <span class="token operator">%</span> <span class="token punctuation">(</span>podName<span class="token punctuation">,</span> podName<span class="token punctuation">,</span> podName<span class="token punctuation">,</span> podName<span class="token punctuation">,</span> podName<span class="token punctuation">,</span> version<span class="token punctuation">)</span>

    <span class="token comment"># 文件名列表</span>
    fileList <span class="token operator">=</span> fileListForDir<span class="token punctuation">(</span>ROOT_DIR_PATH<span class="token punctuation">)</span>
    <span class="token keyword">for</span> filename <span class="token keyword">in</span> fileList<span class="token punctuation">:</span>
        fileContent <span class="token operator">+=</span> <span class="token triple-quoted-string string">'''#if __has_include("%s")
#import "%s"
#endif

'''</span> <span class="token operator">%</span> <span class="token punctuation">(</span>filename<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>

    <span class="token comment"># 拼接尾部</span>
    fileContent <span class="token operator">+=</span> <span class="token string">'#endif /* %s_h */'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>podName<span class="token punctuation">)</span>

    <span class="token comment"># 写入文件</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>ROOT_DIR_PATH <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> HeaderFileFullName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"生成头文件成功"</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="设置-Xcode-build-触发"><a href="#设置-Xcode-build-触发" class="headerlink" title="设置 Xcode build 触发"></a>设置 Xcode build 触发</h4><p>在工程设置 <code>Build Phases</code> 点击加号选择 <code>New Run Script Phase</code>，重命名为<code>Create Umbrella Header File</code>（可选），输入内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># 生成头文件</span>
python3 <span class="token punctuation">..</span>/HeaderFileGenerator.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="脚本触发"><a href="#脚本触发" class="headerlink" title="脚本触发"></a>脚本触发</h4><p> 也可在自动构建的脚本中触发，见下文</p>
<h3 id="自动化发布"><a href="#自动化发布" class="headerlink" title="自动化发布"></a>自动化发布</h3><ul>
<li>自动填写 commit log，自动打 tag，自动推送 tag 和对应分支代码到服务端</li>
<li>自动发布版本到 pod 私有库</li>
<li>自动打包成静态库</li>
</ul>
<p><strong>也可将自动自动更新头文件的脚本放置于此触发</strong>，内容如下：</p>
<p> <code>publish.sh</code></p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token comment">#!/bin/bash</span>

<span class="token comment"># 更新头文件</span>
python3 ./HeaderFileGenerator.py

<span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>"</span>
<span class="token comment"># 文件后缀名，自动查找</span>
<span class="token assign-left variable">file_extension</span><span class="token operator">=</span><span class="token string">"podspec"</span>
<span class="token assign-left variable">podspec_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> $directory <span class="token parameter variable">-name</span> <span class="token string">"*.<span class="token variable">$file_extension</span>"</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-print</span><span class="token variable">`</span></span>

<span class="token builtin class-name">echo</span> <span class="token string">"podspec路径:<span class="token variable">$podspec_path</span>"</span>

<span class="token assign-left variable">podspec_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $podspec_path<span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">"podspec名称:<span class="token variable">$podspec_name</span>"</span>

<span class="token comment"># 获取版本号</span>
<span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"s.version |s.version="</span> $podspec_path <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/'</span>s.version<span class="token string">'//g'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/'</span><span class="token operator">=</span><span class="token string">'//g'</span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/'</span><span class="token punctuation">\</span>"<span class="token string">'//g'</span><span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/'</span><span class="token punctuation">\</span>'<span class="token string">'//g'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/'</span><span class="token punctuation">[</span><span class="token punctuation">[</span>:space:<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token string">'//g'</span><span class="token variable">`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">"podspec版本:<span class="token variable">$version</span>"</span>

<span class="token builtin class-name">echo</span> <span class="token string">"开始提交代码并打 tag：<span class="token variable">$version</span>"</span>
<span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $podspec_name <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-f1</span><span class="token variable">)</span></span>
<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-f</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"published <span class="token variable">$filename</span> <span class="token variable">$version</span>"</span>

<span class="token function">git</span> push origin master

<span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token variable">$version</span>
<span class="token function">git</span> push origin :refs/tags/<span class="token variable">$version</span>

<span class="token function">git</span> tag <span class="token parameter variable">-a</span> <span class="token variable">$version</span> <span class="token parameter variable">-m</span> <span class="token string">"<span class="token variable">$version</span>"</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
<span class="token builtin class-name">echo</span> <span class="token string">"提交及推送代码、tags 结束<span class="token entity" title="\n">\n</span>"</span>

<span class="token builtin class-name">echo</span> <span class="token string">"开始发布 <span class="token variable">$filename</span> 版本 <span class="token variable">$version</span> 到 Chaos"</span>
<span class="token comment"># 清除缓存</span>
pod cache clean <span class="token parameter variable">--all</span>

pod repo push Chaos <span class="token string">"<span class="token variable">$&#123;podspec_name&#125;</span>"</span> --allow-warnings <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--sources</span><span class="token operator">=</span>https://github.com/CocoaPods/Specs.git,,your_private_pod_address
<span class="token builtin class-name">echo</span> <span class="token string">"发布 <span class="token variable">$filename</span> 版本 <span class="token variable">$version</span> 到 Chaos 结束<span class="token entity" title="\n">\n</span>"</span>

<span class="token builtin class-name">echo</span> <span class="token string">"开始打包 framework"</span>
pod package <span class="token variable">$&#123;podspec_name&#125;</span> --no-mangle --exclude-deps <span class="token parameter variable">--force</span> --spec-sources<span class="token operator">=</span>https://github.com/CocoaPods/Specs.git,your_private_pod_address
<span class="token builtin class-name">echo</span> <span class="token string">"打包 framework 结束<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="快速验证-podspec-有效性"><a href="#快速验证-podspec-有效性" class="headerlink" title="快速验证 podspec 有效性"></a>快速验证 podspec 有效性</h3><p> pod 仓库组件慢慢多了，每次需要发版都需要验证是否有错，如果每次都直接 pod lint，pod 会将所有的 subspec 都验证一遍，过程十分漫长，所以在确定已经开发的 subspec 没有问题的话，lint 的时候只需要验证正在开发的 subspec 有没有问题，这点只是做个提示，能够提高效率、节约时间，命令如下：</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pod lib lint --allow-warnings <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--sources</span><span class="token operator">=</span>your_private_cocoapods_address,https://github.com/CocoaPods/Specs.git <span class="token parameter variable">--subspec</span><span class="token operator">=</span>subspec_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="专注业务"><a href="#专注业务" class="headerlink" title="专注业务"></a>专注业务</h2><p>这样一来，就可以把精力集中在编码和业务上，省去的时间可以多倒几杯水，记得，多喝水。<br>每次写完新功能后，只需要执行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜ <span class="token function">sh</span> ./publish.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>就完事了。</p>
<h2 id="关于-bundle"><a href="#关于-bundle" class="headerlink" title="关于 bundle"></a>关于 bundle</h2><p>如果使用 <code>s.resource_bundles</code> 让 pod 帮我们生成 bundle，注意</p>
<ul>
<li>如果需要让所有 bundle 文件夹内文件在顶级目录（即同一级），匹配文件用 <code>*.*</code> 匹配：</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">s<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDWebViewHostPreloaderResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/Preloader/html/*.*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>如果需要让所有 bundle 文件夹内文件保持原来的层级结构，匹配文件时后缀名不要 <code>.*</code>，正确使用如下：</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">s<span class="token punctuation">.</span>resource_bundles <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">'HDWebViewHostRemoteDebugResources'</span></span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">'HDServiceKit/HDWebViewHost/RemoteDebug/src/*'</span></span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里要注意如果末尾的 <code>/*</code> 没写将产生另一个结果，你从该 bundle 获取资源都要在路径后拼接一个 <code>src</code>，所有记得写上，这样的话真实文件夹名称改变不会影响代码内获取路径。</p>
<h3 id="获取-bundle"><a href="#获取-bundle" class="headerlink" title="获取 bundle"></a>获取 bundle</h3><p>附上目前个人觉得比较可靠的获取 bundle 的方法，能够兼容 <code>Podfile</code> 内是否使用 <code>use_frameworks!</code> 两种情况</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">+ (NSBundle *)hd_WebViewHostCoreResources &#123;
    static NSBundle *resourceBundle &#x3D; nil;
    if (!resourceBundle) &#123;
        NSBundle *mainBundle &#x3D; [NSBundle mainBundle];
        NSString *resourcePath &#x3D; [mainBundle pathForResource:@&quot;Frameworks&#x2F;HDServiceKit.framework&#x2F;HDWebViewHostCoreResources&quot; ofType:@&quot;bundle&quot;];
        if (!resourcePath) &#123;
            resourcePath &#x3D; [mainBundle pathForResource:@&quot;HDWebViewHostCoreResources&quot; ofType:@&quot;bundle&quot;];
        &#125;
        resourceBundle &#x3D; [NSBundle bundleWithPath:resourcePath] ?: mainBundle;
    &#125;
    return resourceBundle;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><p>项目记得使用 <code>clang-format</code> 自动规范代码格式，毕竟看着不规范的代码难受的是自己。</p>
<h3 id="pod-package"><a href="#pod-package" class="headerlink" title="pod package"></a>pod package</h3><p> 需要先安装 <code>cocoapods</code> 插件</p>
 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> cocoapods-packager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="build-时自动从环境变量获取版本号，兼容-Xcode-11"><a href="#build-时自动从环境变量获取版本号，兼容-Xcode-11" class="headerlink" title="build 时自动从环境变量获取版本号，兼容 Xcode 11+"></a>build 时自动从环境变量获取版本号，兼容 Xcode 11+</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>cElementTree <span class="token keyword">as</span> ET

<span class="token comment"># 自动获取版本号</span>
<span class="token keyword">def</span> <span class="token function">autoFetchVersionNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    internal_version <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token comment"># 从 Info.plist 中读取 HDServiceKit 的版本号，将其定义为一个 static const 常量以便代码里获取</span>
    infoFilePath <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">'SRCROOT'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \
        <span class="token string">'/%s/%s-Info.plist'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>HeaderFileName<span class="token punctuation">,</span> HeaderFileName<span class="token punctuation">)</span>
    infoTree <span class="token operator">=</span> ET<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>infoFilePath<span class="token punctuation">)</span>
    infoDictList <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>infoTree<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'dict'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># 从 info.plist 获取版本号</span>
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>infoDictList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        element <span class="token operator">=</span> infoDictList<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">if</span> element<span class="token punctuation">.</span>text <span class="token operator">==</span> <span class="token string">'CFBundleShortVersionString'</span><span class="token punctuation">:</span>
            internal_version <span class="token operator">=</span> infoDictList<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text
            <span class="token keyword">break</span>

    <span class="token comment"># Xcode 11</span>
    <span class="token keyword">if</span> internal_version<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        internal_version <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">'MARKETING_VERSION'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> internal_version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>工程自动化</tag>
        <tag>iOS</tag>
        <tag>cocoapods</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 数字转 xx 万 xx 亿</title>
    <url>/2018/09/30/iOS-%E6%95%B0%E5%AD%97%E8%BD%AC-xx-%E4%B8%87-xx-%E4%BA%BF/</url>
    <content><![CDATA[<h2 id="App-开发显示-XX-万-xx-亿"><a href="#App-开发显示-XX-万-xx-亿" class="headerlink" title="App 开发显示 XX 万 xx 亿"></a>App 开发显示 XX 万 xx 亿</h2><p>APP开发中界面显示很多地方需要显示数字，但是如果数字过大，可能会有将数字显示成 xx 万、xx 百万、xx 亿的需求，简单封装了一下，备忘，以便日后使用。</p>
<h3 id="这是声明文件，调用者可以决定保留几位小数，是否需要四舍五入，也可依据代码自行扩展方法。"><a href="#这是声明文件，调用者可以决定保留几位小数，是否需要四舍五入，也可依据代码自行扩展方法。" class="headerlink" title="这是声明文件，调用者可以决定保留几位小数，是否需要四舍五入，也可依据代码自行扩展方法。"></a>这是声明文件，调用者可以决定保留几位小数，是否需要四舍五入，也可依据代码自行扩展方法。</h3><span id="more"></span>


<pre class="line-numbers language-Objective-C//" data-language="Objective-C//"><code class="language-Objective-C//">&#x2F;&#x2F;  TGCaculateNumberTool.h
&#x2F;&#x2F;  Tungee
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2018&#x2F;8&#x2F;22.
&#x2F;&#x2F;  Copyright © 2018年 Tungee. All rights reserved.
&#x2F;&#x2F;

#import &lt;Foundation&#x2F;Foundation.h&gt;

typedef NS_ENUM(NSInteger, TGCNRoundingMode) &#123;
    TGCNRoundingModeUpAndDown &#x3D; 0,  &#x2F;&#x2F;&#x2F;&lt; 四舍五入
    TGCNRoundingModeOnlyUp,         &#x2F;&#x2F;&#x2F;&lt; 只入不舍
    TGCNRoundingModeOnlyDown,       &#x2F;&#x2F;&#x2F;&lt; 只舍不入
&#125;;

@interface TGCaculateNumberTool : NSObject
&#x2F;**
 返回数字描述

 @param number 数字
 @param toFixed 保留小数位数
 @param roundingMode 是否四舍五入
 *&#x2F;
+ (NSString *)stringFromNumber:(double)number toFixedCount:(NSInteger)toFixed roundingMode:(TGCNRoundingMode)roundingMode;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="这是实现文件"><a href="#这是实现文件" class="headerlink" title="这是实现文件"></a>这是实现文件</h4><pre class="line-numbers language-Objective-C//" data-language="Objective-C//"><code class="language-Objective-C//">&#x2F;&#x2F;  TGCaculateNumberTool.m
&#x2F;&#x2F;  Tungee
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2018&#x2F;8&#x2F;22.
&#x2F;&#x2F;  Copyright © 2018年 Tungee. All rights reserved.
&#x2F;&#x2F;

#import &quot;TGCaculateNumberTool.h&quot;

@implementation TGCaculateNumberTool

static NSNumberFormatter *formater;
static NSDictionary *configDict;

+ (void)initialize &#123;
    if (self &#x3D;&#x3D; [TGCaculateNumberTool class]) &#123;
        formater &#x3D; [[NSNumberFormatter alloc] init];
        &#x2F;&#x2F; 可自行扩展
        configDict &#x3D; @&#123;
            @&quot;wan&quot;: @&#123;
                @&quot;unit&quot;: @&quot;万&quot;,
                @&quot;dividend&quot;: @(10000.0)
            &#125;,
            @&quot;yi&quot;: @&#123;
                @&quot;unit&quot;: @&quot;亿&quot;,
                @&quot;dividend&quot;: @(100000000.0)
            &#125;,
            @&quot;wanYi&quot;: @&#123;
                @&quot;unit&quot;: @&quot;万亿&quot;,
                @&quot;dividend&quot;: @(1000000000000.0)
            &#125;
        &#125;;
    &#125;
&#125;

+ (NSString *)stringFromNumber:(double)number toFixedCount:(NSInteger)toFixed roundingMode:(TGCNRoundingMode)roundingMode &#123;
    NSString *output;

    formater.maximumFractionDigits &#x3D; toFixed;

    if (roundingMode &#x3D;&#x3D; TGCNRoundingModeUpAndDown) &#123;
        formater.roundingMode &#x3D; NSNumberFormatterRoundHalfEven;  &#x2F;&#x2F; 四舍五入
    &#125; else if (roundingMode &#x3D;&#x3D; TGCNRoundingModeOnlyUp) &#123;
        formater.roundingMode &#x3D; NSNumberFormatterRoundCeiling;  &#x2F;&#x2F; 只入不舍
    &#125; else if (roundingMode &#x3D;&#x3D; TGCNRoundingModeOnlyDown) &#123;
        formater.roundingMode &#x3D; NSNumberFormatterRoundFloor;     &#x2F;&#x2F; 只舍不入
    &#125; else &#123;                                                     &#x2F;&#x2F; 默认
        formater.roundingMode &#x3D; NSNumberFormatterRoundHalfEven;  &#x2F;&#x2F; 四舍五入
    &#125;

    &#x2F;&#x2F; 如果要五入恰好传入临界值，则h对该值加1，换单位，避免出现10000万这样情况
    if (formater.roundingMode &#x3D;&#x3D; NSNumberFormatterRoundHalfEven || formater.roundingMode &#x3D;&#x3D; NSNumberFormatterRoundCeiling) &#123;
        if (number &#x3D;&#x3D; 9999 || number &#x3D;&#x3D; 99999999 || number &#x3D;&#x3D; 999999999999) &#123;
            number &#x3D; number + 1;
        &#125;
    &#125;

    if (number &lt;&#x3D; 0) &#123;
        output &#x3D; @&quot;0&quot;;
    &#125; else if (number &lt;&#x3D; 9999) &#123;
        output &#x3D; [NSString stringWithFormat:@&quot;%@&quot;, [formater stringFromNumber:@(number)]];
    &#125; else if (number &lt;&#x3D; 99999999) &#123;  &#x2F;&#x2F; 9999999
        double value &#x3D; (double)number &#x2F; [configDict[@&quot;wan&quot;][@&quot;dividend&quot;] doubleValue];
        output &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;, [formater stringFromNumber:@(value)], configDict[@&quot;wan&quot;][@&quot;unit&quot;]];
    &#125; else if (number &lt;&#x3D; 999999999999) &#123;  &#x2F;&#x2F; 999999999999
        double value &#x3D; (double)number &#x2F; [configDict[@&quot;yi&quot;][@&quot;dividend&quot;] doubleValue];
        output &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;, [formater stringFromNumber:@(value)], configDict[@&quot;yi&quot;][@&quot;unit&quot;]];
    &#125; else &#123;
        double value &#x3D; (double)number &#x2F; [configDict[@&quot;wanYi&quot;][@&quot;dividend&quot;] doubleValue];
        output &#x3D; [NSString stringWithFormat:@&quot;%@%@&quot;, [formater stringFromNumber:@(value)], configDict[@&quot;wanYi&quot;][@&quot;unit&quot;]];
    &#125;
    return output;
&#125;

&#x2F;**
 计算特定小数位数

 @param input 输入数字
 @param toFixed 保留小数位数
 @param isRounded 是否四舍五入
 *&#x2F;
&#x2F;&#x2F;+ (double)roundFloat:(double)input toFixedCount:(NSInteger)toFixed rounded:(BOOL)isRounded &#123;
&#x2F;&#x2F;
&#x2F;&#x2F;    double scale &#x3D; 1;
&#x2F;&#x2F;    if (toFixed &#x3D;&#x3D; 0) &#123;
&#x2F;&#x2F;        scale &#x3D; 1;
&#x2F;&#x2F;    &#125; else if (toFixed &#x3D;&#x3D; 1) &#123;
&#x2F;&#x2F;        scale &#x3D; 10;
&#x2F;&#x2F;    &#125; else if (toFixed &#x3D;&#x3D; 2) &#123;
&#x2F;&#x2F;        scale &#x3D; 100;
&#x2F;&#x2F;    &#125; else if (toFixed &#x3D;&#x3D; 3) &#123;
&#x2F;&#x2F;        scale &#x3D; 1000;
&#x2F;&#x2F;    &#125; else if (toFixed &#x3D;&#x3D; 4) &#123;
&#x2F;&#x2F;        scale &#x3D; 10000;
&#x2F;&#x2F;    &#125;
&#x2F;&#x2F;    if (isRounded) &#123;
&#x2F;&#x2F;        return (floorf(input * scale + 0.5)) &#x2F; scale;
&#x2F;&#x2F;    &#125; else &#123;
&#x2F;&#x2F;        return (floorf(input * scale - 0.5)) &#x2F; scale;
&#x2F;&#x2F;    &#125;
&#x2F;&#x2F;&#125;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>Objective</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS企业内部应用分发</title>
    <url>/2017/01/11/iOS%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E5%BA%94%E7%94%A8%E5%88%86%E5%8F%91/</url>
    <content><![CDATA[<blockquote>
<p>iOS 支持以无线方式安装企业内部应用，而无需使用 iTunes 或 App Store。</p>
</blockquote>
<p>VanJay</p>
<h2 id="格式要求"><a href="#格式要求" class="headerlink" title="格式要求"></a>格式要求</h2><p>应用格式要求:.ipa，并且使用企业内部预置描述文件进行构建，即经企业证书签名。</p>
<h3 id="无线安装要求："><a href="#无线安装要求：" class="headerlink" title="无线安装要求："></a>无线安装要求：</h3><ol>
<li>XML 清单文件（一个 plist 配置文件）</li>
<li>可让设备访问 Apple iTunes 服务器的网络配置（设备要能连接互联网，因为要校验）</li>
<li>对于 iOS 7.1 或更高版本， plist 文件和 ipa 文件需要放在 HTTPS 的服务器上<br>为了安装应用，用户使用特殊的 URL 前缀从您的网站上下载plist清单文件，您可以分发该特殊前缀的URL给用户或者放置于可供用户访问的互联网上。</li>
</ol>
<span id="more"></span>

<h2 id="准备分发企业内部应用"><a href="#准备分发企业内部应用" class="headerlink" title="准备分发企业内部应用:"></a>准备分发企业内部应用:</h2><ol>
<li>   创建应用的归档，格式为 *.ipa 格式，并且归档中包括企业内部预置描述文件，且使用分发证书签名；</li>
<li>   无线清单文件，您可以使用支持编辑 plist 文档的编辑器编写或者直接修改下面提供的范例，各字段意义范例中会写明；</li>
<li>   可直接供内连网或互联网访问的 HTTPS 服务器。</li>
</ol>
<h2 id="关于无线-plist-清单文件"><a href="#关于无线-plist-清单文件" class="headerlink" title="关于无线 plist 清单文件"></a>关于无线 plist 清单文件</h2><p>单文件是一个 XML plist 文件，可供 Apple 设备用来从您的 Web 服务器上查找、下载和安装应用。</p>
<h2 id="以下栏是必填项："><a href="#以下栏是必填项：" class="headerlink" title="以下栏是必填项："></a><strong>以下栏是必填项：</strong></h2><ol>
<li>URL：应用 (*.ipa) 文件的完全限定 HTTPS URL</li>
<li>display-image：57 x 57 px 的 PNG 图像，在下载和安装过程中显示，图片的 Web URL</li>
<li>full-size-image：512 x 512 px 的 PNG 图像，表示 iTunes 中相应的应用，图片的 Web URL</li>
<li>bundle-identifier：应用的包标识符，与 Xcode 项目中指定的完全一样</li>
<li>bundle-version：应用的包版本，在 Xcode 项目中指定</li>
<li>title：下载和安装过程中显示的应用的名称<br>样本清单文件还包含可选字段。例如，如果应用文件太大，并且想要在执行错误检验（TCP 通信通常会执行该检验）的基础上确保下载的完整性，可以使用 MD5 校验，使用见范例。<br>您也可以在一个plist文件中配置多个应用，一个 item 作为一项。</li>
</ol>
<h2 id="构建网站"><a href="#构建网站" class="headerlink" title="构建网站"></a>构建网站</h2><p>将这些项目上传到网站上可供已认证的用户访问的区域：</p>
<ol>
<li>应用 (.ipa) 文件</li>
<li>清单 (.plist) 文件<br>您的网站可以是链接到清单文件的单个页面。用户轻点 Web 链接后会下载清单文件，并触发下载和安装。<br><em>以下是示例链接：</em><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;a href&#x3D;&quot;itms-services:&#x2F;&#x2F;?action&#x3D;download-manifest&amp;url&#x3D;https:&#x2F;&#x2F;example.com&#x2F;manifest.plist&quot;&gt;安装应用&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<strong>虽然 URL 的协议部分是“itms-services”，但 iTunes Store 并不参与此过程。</strong></li>
</ol>
<h2 id="配置服务器-MIME-类型（一般不用配置）"><a href="#配置服务器-MIME-类型（一般不用配置）" class="headerlink" title="配置服务器 MIME 类型（一般不用配置）"></a>配置服务器 MIME 类型（一般不用配置）</h2><p>您可能需要配置 Web 服务器，让清单文件和应用文件可正确传输。</p>
<ul>
<li>对于 Server 应用，请将 MIME 类型添加到网页服务的 MIME 类型设置：<ul>
<li>application&#x2F;octet-stream ipa</li>
<li>text&#x2F;xml plist</li>
</ul>
</li>
<li>对于微软的互联网信息服务器 (IIS)，请使用 IIS Manager 在服务器的“属性”页面中添加 MIME 类型：<ul>
<li>.ipa application&#x2F;octet-stream</li>
<li>.plist text&#x2F;xml</li>
</ul>
</li>
</ul>
<h2 id="无线-iOS-应用分发故障诊断"><a href="#无线-iOS-应用分发故障诊断" class="headerlink" title="无线 iOS 应用分发故障诊断"></a>无线 iOS 应用分发故障诊断</h2><p>如果无线应用分发失败，并显示“无法下载”信息：</p>
<ol>
<li>请确定应用已正确进行签名。测试方法是使用 Apple Configurator 2 将它安装到设备上，然后查看是否发生错误。</li>
<li>请确定清单文件的链接是否正确，清单文件是否可供网络用户访问。</li>
<li>请确定 .ipa 文件（在清单文件中）的 URL 是否正确，并且该 .ipa 文件是否可供网络用户通过 HTTPS 访问。</li>
</ol>
<h2 id="网络配置要求"><a href="#网络配置要求" class="headerlink" title="网络配置要求"></a>网络配置要求</h2><p>如果设备连接到内网，那么您必须允许它访问以下站点：</p>
<pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;ax.init.itunes.apple.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用蜂窝移动网络下载应用时，设备会限制其当前文件大小。如果无法访问此站点，安装可能会失败。</p>
<p><code>https://ppq.apple.com</code> 设备会联系此网站，检查用来给预置描述文件签名的分发证书状态。</p>
<h2 id="应用更新"><a href="#应用更新" class="headerlink" title="应用更新"></a>应用更新</h2><ol>
<li>程序内检查 Server 端ipa版本和本地版本，比较是否已发布新版本，并提示用户更新。</li>
<li>如果用户想保留旧版本数据，请告知其不要卸载旧版本，并且新旧版本 bundle-identifier 相同。</li>
<li>更新方法：直接使用应用内部的openURL 方法，打开的是plist文件的web url 带 itms-services描述 链接（真机）。</li>
</ol>
<h2 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h2><ul>
<li>用户首次打开应用时，系统会通过联系 Apple 的 OCSP 服务器来验证分发证书。如果证书已撤销，应用将不会启动。为了验证状态，设备必须能够访问 ocsp.apple.com。</li>
<li>OCSP 响应会在设备上缓存一段时间（由 OCSP 服务器指定），当前为 3 到 7 天之间。在重新启动设备和缓存的响应过期之前，将不会再次检查证书的有效性。如果当时收到撤销命令，系统将阻止应用运行。<br><em>【警告】</em>撤销分发证书会导致使用该证书签名的所有应用失效。只有万不得已时才应撤销证书，比如确定专用密钥已丢失或确信证书已遭破解。</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 iOS 应用 plist 清单文件，可复制，保存为plist格式，也可从 <a href="https://github.com/wangwanjie/SharedResources/blob/master/example_zn.plist">这里</a> 下载</p>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;
&lt;plist version&#x3D;&quot;1.0&quot;&gt;
&lt;dict&gt;
  &lt;key&gt;items&lt;&#x2F;key&gt;
  &lt;array&gt;
   &lt;dict&gt;
     &lt;key&gt;assets&lt;&#x2F;key&gt;
      &lt;array&gt;
        &lt;dict&gt;
          &lt;key&gt;kind&lt;&#x2F;key&gt;
          &lt;string&gt;software-package&lt;&#x2F;string&gt;
          &lt;key&gt;md5-size&lt;&#x2F;key&gt;
          &lt;integer&gt;10485760&lt;&#x2F;integer&gt;
          &lt;key&gt;md5s&lt;&#x2F;key&gt;
          &lt;array&gt;
            &lt;string&gt;41fa64bb7a7cae5a46bfb45821ac8bba&lt;&#x2F;string&gt;
            &lt;string&gt;51fa64bb7a7cae5a46bfb45821ac8bba&lt;&#x2F;string&gt;
          &lt;&#x2F;array&gt;
          &lt;key&gt;url&lt;&#x2F;key&gt;
          &lt;string&gt;https:&#x2F;&#x2F;www.example.com&#x2F;apps&#x2F;foo.ipa&lt;&#x2F;string&gt;
        &lt;&#x2F;dict&gt;
        &lt;dict&gt;
         &lt;key&gt;kind&lt;&#x2F;key&gt;
         &lt;string&gt;display-image&lt;&#x2F;string&gt;
         &lt;key&gt;needs-shine&lt;&#x2F;key&gt;
         &lt;true&#x2F;&gt;
         &lt;key&gt;url&lt;&#x2F;key&gt;
         &lt;string&gt;https:&#x2F;&#x2F;www.example.com&#x2F;image.57x57.png&lt;&#x2F;string&gt;
        &lt;&#x2F;dict&gt;
        &lt;dict&gt;
         &lt;key&gt;kind&lt;&#x2F;key&gt;
         &lt;string&gt;full-size-image&lt;&#x2F;string&gt;
         &lt;key&gt;md5&lt;&#x2F;key&gt;
         &lt;string&gt;61fa64bb7a7cae5a46bfb45821ac8bba&lt;&#x2F;string&gt;
         &lt;key&gt;needs-shine&lt;&#x2F;key&gt;
         &lt;true&#x2F;&gt;
         &lt;key&gt;url&lt;&#x2F;key&gt;&lt;string&gt;https:&#x2F;&#x2F;www.example.com&#x2F;image.512x512.jpg&lt;&#x2F;string&gt;
        &lt;&#x2F;dict&gt;
      &lt;&#x2F;array&gt;
&lt;key&gt;metadata&lt;&#x2F;key&gt;
      &lt;dict&gt;
       &lt;key&gt;bundle-identifier&lt;&#x2F;key&gt;
       &lt;string&gt;com.example.fooapp&lt;&#x2F;string&gt;
       &lt;key&gt;bundle-version&lt;&#x2F;key&gt;
       &lt;string&gt;1.0&lt;&#x2F;string&gt;
       &lt;key&gt;kind&lt;&#x2F;key&gt;
       &lt;string&gt;software&lt;&#x2F;string&gt;
       &lt;key&gt;subtitle&lt;&#x2F;key&gt;
       &lt;string&gt;Apple&lt;&#x2F;string&gt;
       &lt;key&gt;title&lt;&#x2F;key&gt;
       &lt;string&gt;Example Corporate App&lt;&#x2F;string&gt;
      &lt;&#x2F;dict&gt;
    &lt;&#x2F;dict&gt;
  &lt;&#x2F;array&gt;
&lt;&#x2F;dict&gt;
&lt;&#x2F;plist&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="简单配置示例"><a href="#简单配置示例" class="headerlink" title="简单配置示例"></a>简单配置示例</h2><p>作为包体积较小的应用，如以下简单配置即可，从<a href="https://github.com/wangwanjie/SharedResources/blob/master/simple.plist">这里</a>下载</p>
<pre class="line-numbers language-XMl" data-language="XMl"><code class="language-XMl">&lt;!DOCTYPE plist PUBLIC &quot;-&#x2F;&#x2F;Apple&#x2F;&#x2F;DTD PLIST 1.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.apple.com&#x2F;DTDs&#x2F;PropertyList-1.0.dtd&quot;&gt;
&lt;plist version&#x3D;&quot;1.0&quot;&gt;
&lt;dict&gt;
	&lt;key&gt;items&lt;&#x2F;key&gt;
	&lt;array&gt;
		&lt;dict&gt;
			&lt;key&gt;assets&lt;&#x2F;key&gt;
			&lt;array&gt;
				&lt;dict&gt;
					&lt;key&gt;kind&lt;&#x2F;key&gt;
					&lt;string&gt;software-package&lt;&#x2F;string&gt;
					&lt;key&gt;url&lt;&#x2F;key&gt;
					&lt;string&gt;https:&#x2F;&#x2F;yourwebsite&#x2F;appName.ipa&lt;&#x2F;string&gt;
				&lt;&#x2F;dict&gt;
				&lt;dict&gt;
					&lt;key&gt;kind&lt;&#x2F;key&gt;
					&lt;string&gt;full-size-image&lt;&#x2F;string&gt;
					&lt;key&gt;needs-shine&lt;&#x2F;key&gt;
					&lt;true&#x2F;&gt;
					&lt;key&gt;url&lt;&#x2F;key&gt;
					&lt;string&gt;https:&#x2F;&#x2F;yourwebsite&#x2F;app_icon_full_size.png&lt;&#x2F;string&gt;
				&lt;&#x2F;dict&gt;
				&lt;dict&gt;
					&lt;key&gt;kind&lt;&#x2F;key&gt;
					&lt;string&gt;display-image&lt;&#x2F;string&gt;
					&lt;key&gt;needs-shine&lt;&#x2F;key&gt;
					&lt;true&#x2F;&gt;
					&lt;key&gt;url&lt;&#x2F;key&gt;
					&lt;string&gt;https:&#x2F;&#x2F;yourwebsite&#x2F;app_icon_download.png&lt;&#x2F;string&gt;
				&lt;&#x2F;dict&gt;
			&lt;&#x2F;array&gt;
			&lt;key&gt;metadata&lt;&#x2F;key&gt;
			&lt;dict&gt;
				&lt;key&gt;bundle-identifier&lt;&#x2F;key&gt;
				&lt;string&gt; your app bundle id &lt;&#x2F;string&gt;
				&lt;key&gt;bundle-version&lt;&#x2F;key&gt;
				&lt;string&gt;shortVersion&lt;&#x2F;string&gt;
				&lt;key&gt;kind&lt;&#x2F;key&gt;
				&lt;string&gt;software&lt;&#x2F;string&gt;
				&lt;key&gt;subtitle&lt;&#x2F;key&gt;
				&lt;string&gt;欢迎使用&lt;&#x2F;string&gt;
				&lt;key&gt;title&lt;&#x2F;key&gt;
				&lt;string&gt; app 名称&lt;&#x2F;string&gt;
			&lt;&#x2F;dict&gt;
		&lt;&#x2F;dict&gt;
	&lt;&#x2F;array&gt;
&lt;&#x2F;dict&gt;
&lt;&#x2F;plist&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<blockquote>
<p>Author: CoderJay <br>如需转载，请注明出处</p>
</blockquote>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>打包</tag>
        <tag>发布</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS里关于block的一些理解</title>
    <url>/2018/06/18/iOS%E9%87%8C%E5%85%B3%E4%BA%8Eblock%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>block实际上就是Objective-C语言对于闭包的实现。<br>block配合上dispatch_queue，可以方便地实现简单的多线程编程和异步编程。<br>（闭包是一个函数（或指向函数的指针），再加上该函数执行的外部的上下文变量（有时候也称作自由变量）。）</p>
<span id="more"></span>

<h2 id="block的写法"><a href="#block的写法" class="headerlink" title="block的写法"></a>block的写法</h2><p>回传值(^名字)(参数列);</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#x2F;&#x2F; 声明一个square的Block Pointer，其所指向的Block有一个int输入和int输出  
typedef int (^square)(int);  
&#x2F;&#x2F; 将Block实体指定给square  
square &#x3D; ^(int a)&#123; return a * a; &#125;;  
&#x2F;&#x2F; 调用方法，感觉是是不是很像function的用法？  
int result &#x3D; square(5);  
NSLog(@&quot;%d&quot;, result);  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当其作为Object-C method的传入值的话，需要把类型写在变量前面，然后加上小括号。比如下面这种写法：</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#x2F;&#x2F; square参数的类型是int(^)(int)  
-(void)objcMethod:(int(^)(int))square;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>block阵列的使用</p>
<pre class="line-numbers language-Objc" data-language="Objc"><code class="language-Objc">&#123;
    void (^blocks[3])(void);
    for (NSInteger i &#x3D; 0; i &lt; 3; i++) &#123;
        blocks[i] &#x3D; ^&#123;
            NSLog(@&quot;Hello:%i&quot;, i);
        &#125;;
    &#125;
    blocks[0](); &#x2F;&#x2F; result:Hello:0
    blocks[1](); &#x2F;&#x2F; result:Hello:1
    blocks[2](); &#x2F;&#x2F; result:Hello:2
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="存取变量"><a href="#存取变量" class="headerlink" title="存取变量"></a>存取变量</h2><blockquote>
<p>Block将使用到的、作用域附近的变量的值建立一份快照拷贝到栈上。</p>
</blockquote>
<ul>
<li>读取和Block pointer同一个Scope的变量值：</li>
</ul>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#123;  
    int outA &#x3D; 8;  
    int (^myPtr)(int) &#x3D; ^(int a)&#123; return outA + a;&#125;;  
    &#x2F;&#x2F;block里面可以读取同一类型的outA的值  
    int result &#x3D; myPtr(3);  &#x2F;&#x2F; result is 11  
    NSLog(@&quot;result&#x3D;%d&quot;, result);  
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面这一段代码就不一样了</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#123;
    int outA &#x3D; 8;  
    int (^myPtr)(int) &#x3D; ^(int a)&#123; return outA + a;&#125;;&#x2F;&#x2F;block里面可以读取同一类型的outA的值  
    outA &#x3D; 5;  &#x2F;&#x2F; 在调用myPtr之前改变outA的值  
    int result &#x3D; myPtr(3);  &#x2F;&#x2F; result的值仍然是11，并不是8  
    NSLog(@&quot;result&#x3D;%d&quot;, result);  
&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为什么result 的值仍然是11？而不是8呢？事实上，myPtr在其主体中用到的outA这个变量值的时候做了一个copy的动作，把outA的值copy下来，在Block中作为常量使用。所以，之后outA即使换成了新的值，对于myPtr里面copy的值是没有影响的。（类似于深拷贝）</p>
<p>需要注意的是，这里copy的值是变量的值，如果它是一个记忆体的位置（地址），换句话说，就是这个变量是个指针的话，它的值是可以在block里被改变的。(相当于浅拷贝，拷贝的只是一个指针地址，对象地址还是没变的)</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#123;  
    NSMutableArray \*mutableArray &#x3D; [NSMutableArray arrayWithObjects:@&quot;one&quot;, @&quot;two&quot;, @&quot;three&quot;, nil];  
    int result &#x3D; ^(int a)&#123;[mutableArray removeLastObject]; return a*a;&#125;(5);  
    NSLog(@&quot;test array :%@&quot;, mutableArray);  
&#125; 
&#x2F;&#x2F; 原本mutableArray的值是&#123;@&quot;one&quot;,@&quot;two&quot;,@&quot;three&quot;&#125;，在block里面被更改mutableArray后，就变成&#123;@&quot;one&quot;, @&quot;two&quot;&#125;了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>直接存取static类型的变量</li>
</ul>
<p>因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#123;  
    static int outA &#x3D; 8;  
    int (^myPtr)(int) &#x3D; ^(int a)&#123;return outA + a;&#125;;  
    outA &#x3D; 5;  
    int result &#x3D; myPtr(3);  
    &#x2F;&#x2F;result的值是8，因为outA是static类型的变量 (该变量在全局数据区分配内存,但作用域还是局部作用域) 
    NSLog(@&quot;result&#x3D;%d&quot;, result);     
&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>Block Variable类型的变量</li>
</ul>
<p>在某个变量前面如果加上修饰字“__block”的话（注意，block前面有两个下划线），这个变量就称作block variable。基本类型的Block变量等效于全局变量、或静态变量。即将“外部变量”在栈中的内存地址放到了堆中。</p>
<p>那么在block里面就可以任意修改此变量的值，如下代码：</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#123;  
    __block int num &#x3D; 5;  
    NSLog(@&quot;定义前：%p&quot;, &amp;num); 
    int (^myPtr)(int) &#x3D; ^(int a)&#123;
                            NSLog(@&quot;block内部：%p&quot;, &amp;num);
                            return num++;                                             &#125;;  
    int (^myPtr2)(int) &#x3D; ^(int a)&#123;
                            NSLog(@&quot;block内部：%p&quot;, &amp;num);
                            return num++;
                            &#125;;  
    int result &#x3D; myPtr(0);   &#x2F;&#x2F;result的值为5，num的值为6  
    result &#x3D; myPtr2(0);      &#x2F;&#x2F;result的值为6，num的值为7 
    NSLog(@&quot;定义后：%p&quot;, &amp;num);
    NSLog(@&quot;result&#x3D;%d&quot;, result);      
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出（我们看到num进入block之后内存地址其实改变了，也就是block 内部的变量会被 copy 到堆区）：</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">2016-09-12 16:24:16.622 test[20146:972930] 定义前：0x7fff5caf0a78
2016-09-12 16:24:16.623 test[20146:972930] block内部：0x7ff539c0b1a8
2016-09-12 16:24:16.623 test[20146:972930] block内部：0x7ff539c0b1a8
2016-09-12 16:24:16.623 test[20146:972930] 定义后：0x7ff539c0b1a8
2016-09-12 16:24:16.623 test[20146:972930] result&#x3D;6
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>weak–strong dance（避免循环引用）</li>
</ul>
<p>使用方将self或成员变量加入block之前要先将self变为__weak<br>在多线程环境下（block中的weakSelf有可能被析构的情况下），需要先将self转为strong指针，避免在运行到某个关键步骤时self对象被析构。<br>以上两条合起来有个名词叫weak–strong dance</p>
<p>以下是使用weak–strong dance的经典代码</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">__weak __typeof(self)weakSelf &#x3D; self和
__strong __typeof(weakSelf)strongSelf &#x3D; weakSelf
&#x2F;&#x2F; AFNetworking经典代码
__weak __typeof(self)weakSelf &#x3D; self;
AFNetworkReachabilityStatusBlock callback &#x3D; ^(AFNetworkReachabilityStatus status) &#123;
    __strong __typeof(weakSelf)strongSelf &#x3D; weakSelf;
    strongSelf.networkReachabilityStatus &#x3D; status;
    if (strongSelf.networkReachabilityStatusBlock) &#123;
        strongSelf.networkReachabilityStatusBlock(status);
    &#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>其中用到了__typeof(self)，这里涉及几个知识点：<br> a. __typeof、__typeof__、typeof的区别<br>恩~~他们没有区别，但是这牵扯一段往事，在早期C语言中没有typeof这个关键字，__typeof、__typeof__是在C语言的扩展关键字的时候出现的。<br>typeof是现代GNU C++的关键字，从Objective-C的根源说，他其实来自于C语言，所以AFNetworking使用了继承自C的关键字。</p>
</blockquote>
<blockquote>
<p>b.对于老的LLVM编译器上面这句话会编译报错，所以在很早的ARC使用者中流行__typeof(&amp;*self)这种写法，<a href="http://stackoverflow.com/questions/10892361/generic-typeof-for-weak-self-references/">原因如下</a><br>大致说法是老LLVM编译器会将__typeof转义为 XXX类名 const __strong的__strong和前面的__weak关键字对指针的修饰又冲突了，所以加上&amp;对指针的修饰。</p>
</blockquote>
<blockquote>
<p>第四、五、六行，如果不转成strongSelf而使用weakSelf，后面几句话中，有可能在第四句执行之后self的对象可能被析构掉，然后后面的StausBlock没有执行，导致逻辑错误。</p>
</blockquote>
<blockquote>
<p>最后第五行，使用前对block判空。</p>
</blockquote>
<hr>
<blockquote>
<p>&#x2F;&#x2F; 以下代码是对__weak __typeof(self)weakSelf &#x3D; self<br>&#x2F;&#x2F; 和__strong __typeof(weakSelf)strongSelf &#x3D; weakSelf的宏定义</p>
</blockquote>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">#ifndef weakify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define weakify(object) autoreleasepool&#123;&#125; __weak __typeof__(object) weak##_##object &#x3D; object;
        #else
        #define weakify(object) autoreleasepool&#123;&#125; __block __typeof__(object) block##_##object &#x3D; object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __weak __typeof__(object) weak##_##object &#x3D; object;
        #else
        #define weakify(object) try&#123;&#125; @finally&#123;&#125; &#123;&#125; __block __typeof__(object) block##_##object &#x3D; object;
        #endif
    #endif
#endif
#ifndef strongify
    #if DEBUG
        #if __has_feature(objc_arc)
        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object &#x3D; weak##_##object;
        #else
        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object &#x3D; block##_##object;
        #endif
    #else
        #if __has_feature(objc_arc)
        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object &#x3D; weak##_##object;
        #else
        #define strongify(object) try&#123;&#125; @finally&#123;&#125; __typeof__(object) object &#x3D; block##_##object;
        #endif
    #endif
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#x2F;&#x2F; 使用方法
@weakify(self);
AFNetworkReachabilityStatusBlock callback &#x3D; ^(AFNetworkReachabilityStatus status) &#123;
    @strongify(self)
    if(!self)return; 
    self.networkReachabilityStatus &#x3D; status; 
    if (self.networkReachabilityStatusBlock) &#123;
        self.networkReachabilityStatusBlock(status);
    &#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="避免循环引用"><a href="#避免循环引用" class="headerlink" title="避免循环引用"></a>避免循环引用</h2><p>为什么会发生循环引用呢？</p>
<blockquote>
<p>因为对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。<br>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。</p>
</blockquote>
<p><a href="https://github.com/walkdianzi/DSBlockTestDemo">会发生循环引用例子的demo</a></p>
<h3 id="使用系统的某些block-api"><a href="#使用系统的某些block-api" class="headerlink" title="使用系统的某些block api"></a>使用系统的某些block api</h3><blockquote>
<p>使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？</p>
</blockquote>
<p>答案来自<a href="https://github.com/ChenYilong/iOSInterviewQuestions/blob/master/01%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88/%E3%80%8A%E6%8B%9B%E8%81%98%E4%B8%80%E4%B8%AA%E9%9D%A0%E8%B0%B1%E7%9A%84iOS%E3%80%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88%EF%BC%88%E4%B8%8B%EF%BC%89.md">招聘一个靠谱的iOS</a>第39题，个人测试了一下，感觉是有错误的，我下面代码已注释错误的地方。</p>
<p>系统的某些block api中，UIView的block版本写动画时不需要考虑，但也有一些api 需要考虑：</p>
<p>所谓“引用循环”是指双向的强引用，所以那些“单向的强引用”（block 强引用 self ）没有问题，比如这些：</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">[UIView animateWithDuration:duration animations:^&#123; [self.superview layoutIfNeeded]; &#125;];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">[[NSOperationQueue mainQueue] addOperationWithBlock:^&#123; self.someProperty &#x3D; xyz; &#125;]; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#x2F;&#x2F; 会发生循环引用
[[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot; 
            object:nil 
            queue:[NSOperationQueue mainQueue]
            usingBlock:^(NSNotification * notification) &#123;
                self.someProperty &#x3D; xyz; 
            &#125;]; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但如果你使用一些参数中可能含有 ivar 的系统 api ，如 GCD 、NSNotificationCenter就要小心一点：比如GCD 内部如果引用了 self，而且 GCD 的其他参数是 ivar，则要考虑到循环引用，比如以下这些：</p>
<pre class="line-numbers language-ObjC" data-language="ObjC"><code class="language-ObjC">&#x2F;&#x2F; 不会发生循环引用
dispatch_group_async(_operationsGroup, _operationsQueue, ^
&#123;
    [self doSomething];
    [self doSomethingElse];
&#125; );
&#x2F;&#x2F; 不会发生循环引用
__weak __typeof__(self) weakSelf &#x3D; self;
dispatch_group_async(_operationsGroup, _operationsQueue, ^
&#123;
    __typeof__(self) strongSelf &#x3D; weakSelf;
    [strongSelf doSomething];
    [strongSelf doSomethingElse];
&#125; );
&#x2F;&#x2F; 会发生循环引用
[[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot; 
            object:nil 
            queue:[NSOperationQueue mainQueue]
            usingBlock:^(NSNotification * notification) &#123;
                self.someProperty &#x3D; xyz; 
            &#125;]; 
&#x2F;&#x2F; 会发生循环引用
_observer &#x3D; [[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot; 
            object:nil 
            queue:[NSOperationQueue mainQueue]
            usingBlock:^(NSNotification * notification) &#123;
                self.someProperty &#x3D; xyz; 
            &#125;]; 
&#x2F;&#x2F; 不会发生循环引用
__weak __typeof__(self) weakSelf &#x3D; self;
[[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot;
            object:nil
            queue:nil
            usingBlock:^(NSNotification *note) &#123;
            __typeof__(self) strongSelf &#x3D; weakSelf;
            strongSelf.someProperty &#x3D; xyz; 
  &#125;];
&#x2F;&#x2F; 不会发生循环引用
__weak __typeof__(self) weakSelf &#x3D; self;
_observer &#x3D; [[NSNotificationCenter defaultCenter] addObserverForName:@&quot;someNotification&quot;
            object:nil
            queue:nil
            usingBlock:^(NSNotification *note) &#123;
            __typeof__(self) strongSelf &#x3D; weakSelf;
            strongSelf.someProperty &#x3D; xyz; 
  &#125;];
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/zhangyang17/p/4667621.html">http://www.cnblogs.com/zhangyang17/p/4667621.html</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Block</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables 混乱处理大法</title>
    <url>/2024/04/27/iptables-%E6%B7%B7%E4%B9%B1%E5%A4%84%E7%90%86%E5%A4%A7%E6%B3%95/</url>
    <content><![CDATA[<p>在使用Linux系统的过程中，由于误操作或第三方软件（例如Docker）的介入，经常会发现iptables规则被意外修改，导致某些功能不按预期工作。例如，即使添加了相应的规则，它们也可能不生效。在清楚了解本机环境和服务的情况下，一个有效的解决策略是清空所有规则并重新添加。</p>
<span id="more"></span>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在实际使用中，iptables表可能会被误操作或其他软件影响。例如，Docker运行时会自动修改iptables规则以确保容器通信，这可能会覆盖或干扰用户自定义的规则。如果遇到添加规则后不生效的情况，推荐的解决方法是彻底清空所有规则，然后从头开始构建。</p>
<h2 id="步骤与注意事项"><a href="#步骤与注意事项" class="headerlink" title="步骤与注意事项"></a>步骤与注意事项</h2><h3 id="清空所有现有规则"><a href="#清空所有现有规则" class="headerlink" title="清空所有现有规则"></a>清空所有现有规则</h3><p>清空所有规则是开始重置网络配置的第一步。这可以确保没有遗留的规则影响新的配置。</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="按行号删除规则"><a href="#按行号删除规则" class="headerlink" title="按行号删除规则"></a>按行号删除规则</h3><p>在某些情况下，你可能需要删除特定的规则。通过使用行号，可以精确指定并删除iptables中的规则。</p>
<h4 id="查看规则及其行号"><a href="#查看规则及其行号" class="headerlink" title="查看规则及其行号"></a>查看规则及其行号</h4><p>首先，查看具体的规则及其行号，以便知道哪条规则需要删除：</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -L --line-numbers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="删除指定行号的规则"><a href="#删除指定行号的规则" class="headerlink" title="删除指定行号的规则"></a>删除指定行号的规则</h4><p>一旦确定了要删除的规则的行号，使用以下命令进行删除：</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -D INPUT [行号]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>替换[行号]为实际的行号。</p>
<h4 id="查看不同类型的规则"><a href="#查看不同类型的规则" class="headerlink" title="查看不同类型的规则"></a>查看不同类型的规则</h4><p>iptables包含多个表，每个表用于不同类型的流量处理。查看这些不同表的规则是理解整个网络策略的关键部分。</p>
<p>查看默认表（filter）</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看NAT表</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -t nat -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>查看mangle表</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -t mangle -L<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这些命令显示了每个表中的所有规则，包括链（如INPUT, FORWARD, OUTPUT等）和每条规则的具体动作。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>综上所述，管理iptables规则包括了添加、删除、查看规则以及备份和恢复配置。正确地管理这些规则对于维护系统安全极为重要。务必按需定期进行规则的审查和更新，以保持网络环境的安全和效率。通过这种方式，iptables不仅能够满足当前的安全需求，还能适应未来潜在的变化和挑战。</p>
<h3 id="设置默认策略"><a href="#设置默认策略" class="headerlink" title="设置默认策略"></a>设置默认策略</h3><p>一旦清空了规则，下一步是设置合理的默认策略。这可以帮助控制未明确匹配到任何规则的流量。</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="允许基本通信"><a href="#允许基本通信" class="headerlink" title="允许基本通信"></a>允许基本通信</h3><p>为了保证基本的网络功能和管理访问，需要明确允许某些基本通信。</p>
<h4 id="允许SSH访问"><a href="#允许SSH访问" class="headerlink" title="允许SSH访问"></a>允许SSH访问</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -p tcp --dport 22 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="允许来自本地接口的数据"><a href="#允许来自本地接口的数据" class="headerlink" title="允许来自本地接口的数据"></a>允许来自本地接口的数据</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="允许已建立的和相关的连接"><a href="#允许已建立的和相关的连接" class="headerlink" title="允许已建立的和相关的连接"></a>允许已建立的和相关的连接</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="添加自定义规则"><a href="#添加自定义规则" class="headerlink" title="添加自定义规则"></a>添加自定义规则</h3><p>恢复默认规则后，可以根据具体需要添加业务相关的自定义规则。</p>
<h4 id="基本的Web服务访问"><a href="#基本的Web服务访问" class="headerlink" title="基本的Web服务访问"></a>基本的Web服务访问</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -p tcp --dport 80 -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="特定的业务端口，例如某应用使用的8080端口"><a href="#特定的业务端口，例如某应用使用的8080端口" class="headerlink" title="特定的业务端口，例如某应用使用的8080端口"></a>特定的业务端口，例如某应用使用的8080端口</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -p tcp --dport 8080 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="配置NAT规则"><a href="#配置NAT规则" class="headerlink" title="配置NAT规则"></a>配置NAT规则</h4><p>获取网卡名称:</p>
<pre class="line-numbers language-none"><code class="language-none">ip route show | sed -n &#39;s&#x2F;^default.* dev \([^ ]*\).*&#x2F;\1&#x2F;p&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后使用该网卡设置NAT转发:</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -t nat -A POSTROUTING -o [网卡名] -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-none"><code class="language-none">iptables -t nat -A POSTROUTING -s 192.168.90.0&#x2F;24 -o $(ip route show | sed -n &#39;s&#x2F;^default.* dev \([^ ]*\).*&#x2F;\1&#x2F;p&#39;) -j MASQUERADE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="配置转发"><a href="#配置转发" class="headerlink" title="配置转发"></a>配置转发</h4><pre class="line-numbers language-none"><code class="language-none">iptables -A FORWARD -s 192.168.90.0&#x2F;24 -j ACCEPT 
iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="持久化配置"><a href="#持久化配置" class="headerlink" title="持久化配置"></a>持久化配置</h4><p>别忘了在配置完成后，使用iptables-save或相关工具持久化iptables规则，以防重启后丢失</p>
<pre class="line-numbers language-none"><code class="language-none">sudo sh -c &quot;iptables-save &gt; &#x2F;etc&#x2F;iptables&#x2F;rules.v4&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过彻底清空iptables规则并重新配置，可以解决由于误操作或软件干扰导致的网络安全策略问题。务必注意操作顺序，特别是要先放行重要的管理端口如SSH，以避免从远程管理中断。</p>
<h2 id="测试和验证规则"><a href="#测试和验证规则" class="headerlink" title="测试和验证规则"></a>测试和验证规则</h2><p>一旦配置了iptables规则，重要的是要验证每条规则是否按预期工作。你可以通过尝试访问被允许的服务，或尝试被拒绝的连接，来检查iptables规则是否正确执行。</p>
<h3 id="测试HTTP服务是否可访问"><a href="#测试HTTP服务是否可访问" class="headerlink" title="测试HTTP服务是否可访问"></a>测试HTTP服务是否可访问</h3><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;your-server-ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="检查被拒绝的服务（假设没有放行的端口）"><a href="#检查被拒绝的服务（假设没有放行的端口）" class="headerlink" title="检查被拒绝的服务（假设没有放行的端口）"></a>检查被拒绝的服务（假设没有放行的端口）</h3><pre class="line-numbers language-none"><code class="language-none">curl http:&#x2F;&#x2F;your-server-ip:未放行端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><p>为了更好地监控和诊断，可以为iptables配置日志规则，这样当规则触发时，相关信息会被记录到系统日志中。</p>
<h3 id="为拒绝的输入添加日志记录"><a href="#为拒绝的输入添加日志记录" class="headerlink" title="为拒绝的输入添加日志记录"></a>为拒绝的输入添加日志记录</h3><pre class="line-numbers language-none"><code class="language-none">iptables -A INPUT -j LOG --log-prefix &quot;IPTables-Denied: &quot; --log-level 4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这能帮助你了解哪些尝试被拒绝，便于调整规则或排查潜在的安全问题。</p>
<h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><p>在完成所有规则的设置和验证后，进行备份是一个好习惯。这样在系统出现问题或需要迁移到其他服务器时，可以快速恢复iptables配置。</p>
<h3 id="备份iptables规则"><a href="#备份iptables规则" class="headerlink" title="备份iptables规则"></a>备份iptables规则</h3><pre class="line-numbers language-none"><code class="language-none">iptables-save &gt; &#x2F;root&#x2F;iptables.rules.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="恢复iptables规则"><a href="#恢复iptables规则" class="headerlink" title="恢复iptables规则"></a>恢复iptables规则</h3><pre class="line-numbers language-none"><code class="language-none">iptables-restore &lt; &#x2F;root&#x2F;iptables.rules.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="定期审查和更新"><a href="#定期审查和更新" class="headerlink" title="定期审查和更新"></a>定期审查和更新</h2><p>随着系统环境和业务需求的变化，定期审查iptables规则是必要的。这可以确保规则仍然适用于当前的网络环境和安全需求。建议至少每季度审查一次规则设置。</p>
<h2 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h2><p>维护一个清晰、有效的iptables配置是保障Linux服务器安全的重要步骤。通过系统地清空、配置、测试和审查iptables规则，你可以确保网络通信的安全性和效率。记住，网络安全是一个持续的过程，需要定期的注意和更新以应对新的挑战。</p>
<p>通过上述详尽的步骤，你可以确保iptables的配置不仅能满足当前的需求，而且具有足够的灵活性来应对未来可能出现的各种情况。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>运维</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS 开发从 Array 生成特定分隔符隔开的 String</title>
    <url>/2018/10/01/iOS-%E5%BC%80%E5%8F%91%E4%BB%8E-Array-%E7%94%9F%E6%88%90%E7%89%B9%E5%AE%9A%E5%88%86%E9%9A%94%E7%AC%A6%E9%9A%94%E5%BC%80%E7%9A%84-String/</url>
    <content><![CDATA[<p>从一个String Array 或者 Object Array 生成字符串，使用特定的分隔符隔开，起始和末尾不需要分隔符，当传入的是对象的时候，需要指定Object 中 String 的 key 字符串，效果如下图所示：</p>
<p><img src="/images/stringFromArray.png" alt="示例"></p>
<span id="more"></span>

<p>直接看代码，只是备忘。</p>
<h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><pre class="line-numbers language-Objective-C" data-language="Objective-C"><code class="language-Objective-C">&#x2F;&#x2F;
&#x2F;&#x2F;  TGStringTool.h
&#x2F;&#x2F;  DongKe
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2018&#x2F;9&#x2F;30.
&#x2F;&#x2F;  Copyright © 2018 DongKe. All rights reserved.
&#x2F;&#x2F;

#import &lt;Foundation&#x2F;Foundation.h&gt;

NS_ASSUME_NONNULL_BEGIN

@interface TGStringTool : NSObject
+ (NSString *)stringWithStringArr:(NSArray&lt;NSString *&gt; *)arr separatedStr:(NSString *)separatedStr;
+ (NSString *)stringWithArr:(NSArray&lt;id&gt; *)arr valueKey:(NSString *)key separatedStr:(NSString *)separatedStr;
@end

NS_ASSUME_NONNULL_END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h3><pre class="line-numbers language-Objective-C" data-language="Objective-C"><code class="language-Objective-C">&#x2F;&#x2F;
&#x2F;&#x2F;  TGStringTool.m
&#x2F;&#x2F;  DongKe
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2018&#x2F;9&#x2F;30.
&#x2F;&#x2F;  Copyright © 2018 DongKe. All rights reserved.
&#x2F;&#x2F;

#import &quot;TGStringTool.h&quot;

@implementation TGStringTool
+ (NSString *)stringWithStringArr:(NSArray&lt;NSString *&gt; *)arr separatedStr:(NSString *)separatedStr &#123;
    NSMutableString *temp &#x3D; [NSMutableString string];
    if (arr.count &gt; 0) &#123;
        [arr enumerateObjectsUsingBlock:^(NSString *_Nonnull str, NSUInteger idx, BOOL *_Nonnull stop) &#123;
            if (str.length &gt; 0) &#123;
                [temp appendString:str];
                if (idx &lt; arr.count - 1) &#123;
                    [temp appendString:separatedStr];
                &#125;
            &#125;
        &#125;];
    &#125;

    return temp;
&#125;

+ (NSString *)stringWithArr:(NSArray&lt;id&gt; *)arr valueKey:(NSString *)key separatedStr:(NSString *)separatedStr &#123;
    NSMutableString *temp &#x3D; [NSMutableString string];
    if (arr.count &gt; 0) &#123;
        [arr enumerateObjectsUsingBlock:^(id _Nonnull obj, NSUInteger idx, BOOL *_Nonnull stop) &#123;
            if ([obj respondsToSelector:NSSelectorFromString(key)]) &#123;
                NSString *str &#x3D; [obj valueForKey:key];
                if (str.length &gt; 0) &#123;
                    [temp appendString:str];
                    if (idx &lt; arr.count - 1) &#123;
                        [temp appendString:separatedStr];
                    &#125;
                &#125;
            &#125;
        &#125;];
    &#125;
    return temp;
&#125;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>iOS</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>pve下不同服务间启动依赖问题解决</title>
    <url>/2023/11/26/pve%E4%B8%8B%E4%B8%8D%E5%90%8C%E6%9C%8D%E5%8A%A1%E9%97%B4%E5%90%AF%E5%8A%A8%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>在Proxmox VE (PVE) 环境中，我们经常需要管理多个虚拟机或LXC容器，这些容器中部署了各种服务。服务间的依赖关系可能导致如果启动顺序不当，服务无法正确运行。本文将探讨这一问题，并提出一个有效的解决方案。</p>
<span id="more"></span>

<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在PVE环境中，服务间的依赖性特别明显。例如，一个服务可能依赖于在另一个虚拟机上运行的数据库服务。传统的解决方法，如设置虚拟机的启动顺序和延迟，存在一些局限性：</p>
<ol>
<li><strong>延迟启动时间不准确</strong>：预估的启动时间可能与实际不符，导致服务启动失败。</li>
<li><strong>无法细化到服务级别</strong>：PVE只允许设置虚拟机级别的启动顺序。</li>
<li><strong>复杂依赖难以管理</strong>：对于更复杂的服务依赖关系，传统方法难以实现有效管理。</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了解决这些问题，我们在目标机器上创建了开机自启动服务。这些服务通过脚本循环检查依赖服务是否可用，只有在所有依赖服务均已启动并运行正常时，才会启动目标服务。</p>
<h3 id="举例1-Jellyfin-服务依赖群辉启动"><a href="#举例1-Jellyfin-服务依赖群辉启动" class="headerlink" title="举例1: Jellyfin 服务依赖群辉启动"></a>举例1: Jellyfin 服务依赖群辉启动</h3><h4 id="在PVE中，设置LXC容器启动脚本如下："><a href="#在PVE中，设置LXC容器启动脚本如下：" class="headerlink" title="在PVE中，设置LXC容器启动脚本如下："></a>在PVE中，设置LXC容器启动脚本如下：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/systemd/system/start_jellyfin.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Start Jellyfin Service
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/bin/start_jellyfin.sh

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">nano &#x2F;usr&#x2F;local&#x2F;bin&#x2F;start_jellyfin.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash

while true; do
    if nc -vz -w 2 192.168.18.8 5000 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1; then
        sleep 5
        pct start 105
        break
    else
        sleep 5
    fi
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> start_jellyfin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="举例2-NAS工具和其他服务的依赖管理"><a href="#举例2-NAS工具和其他服务的依赖管理" class="headerlink" title="举例2: NAS工具和其他服务的依赖管理"></a>举例2: NAS工具和其他服务的依赖管理</h3><h4 id="在Docker服务机器上，我们设置了以下自启动服务和脚本："><a href="#在Docker服务机器上，我们设置了以下自启动服务和脚本：" class="headerlink" title="在Docker服务机器上，我们设置了以下自启动服务和脚本："></a>在Docker服务机器上，我们设置了以下自启动服务和脚本：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /etc/systemd/system/restart_nas_ass_services.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">[Unit]
Description&#x3D;Restart NAS Associated Services
After&#x3D;network-online.target
Wants&#x3D;network-online.target

[Service]
Type&#x3D;oneshot
ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;restart_nas_ass_services.sh
RemainAfterExit&#x3D;yes

[Install]
WantedBy&#x3D;multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> /usr/local/bin/restart_nas_ass_services.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bash

# 定义需要管理的 Docker 容器列表
services&#x3D;(&quot;qbittorrent&quot; &quot;alist&quot; &quot;nas-tools&quot; &quot;jackett&quot; &quot;chinesesubfinder&quot; &quot;flaresolverr&quot;)

while true; do
    if nc -vz -w 2 192.168.18.8 5000 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;&amp;
       nc -vz -w 2 192.168.18.37 8096 &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1; then
        sleep 5
        systemctl daemon-reload
        mount -a

        # 循环遍历每个服务
        for service in &quot;$&#123;services[@]&#125;&quot;; do
            if docker ps --format &#39;&#123;&#123;.Names&#125;&#125;&#39; | grep $service; then
                # 如果容器已存在，则重启
                docker restart $service
            else
                # 如果容器不存在，则启动
                docker start $service
            fi
        done

        break
    else
        sleep 5
    fi
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="开机自启-1"><a href="#开机自启-1" class="headerlink" title="开机自启"></a>开机自启</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> restart_nas_ass_services.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="好处和其他应用场景"><a href="#好处和其他应用场景" class="headerlink" title="好处和其他应用场景"></a>好处和其他应用场景</h3><p>这种方法的好处在于：</p>
<ul>
<li><strong>精确控制</strong>：可以根据实际服务的可用性来精确控制启动流程。</li>
<li><strong>灵活性</strong>：适用于各种复杂的服务依赖情况。</li>
<li><strong>可扩展性</strong>：容易根据需要添加或修改脚本来管理新的服务依赖。</li>
</ul>
<p>此方法不仅适用于PVE环境，还可以应用于任何需要精确管理服务启动顺序的场景，如大型云环境、分布式系统等。</p>
<h3 id="其他应用场景示例"><a href="#其他应用场景示例" class="headerlink" title="其他应用场景示例"></a>其他应用场景示例</h3><h4 id="大型云环境中的服务依赖管理"><a href="#大型云环境中的服务依赖管理" class="headerlink" title="大型云环境中的服务依赖管理"></a>大型云环境中的服务依赖管理</h4><p>在大型云环境，比如使用Kubernetes或OpenStack，服务之间的依赖管理尤为重要。例如，在Kubernetes环境中，可以编写一个初始化容器（Init Container），该容器在应用容器启动前运行。它可以用于检查数据库服务是否已经就绪，或者其他依赖服务是否可用。一旦所有检查通过，主应用容器才会启动。</p>
<h4 id="分布式系统中的依赖启动"><a href="#分布式系统中的依赖启动" class="headerlink" title="分布式系统中的依赖启动"></a>分布式系统中的依赖启动</h4><p>在分布式系统中，特别是那些跨多个数据中心的，我们可以通过脚本来监控服务的状态，并根据依赖关系动态地启动服务。例如，一个数据分析服务可能需要等待数据源完全同步后才能开始处理。通过在启动脚本中加入检查逻辑，可以保证服务在数据准备就绪后自动启动。</p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><h3 id="为什么使用-nc-vz-w-2-192-168-18-8-5000-作为判断条件"><a href="#为什么使用-nc-vz-w-2-192-168-18-8-5000-作为判断条件" class="headerlink" title="为什么使用 nc -vz -w 2 192.168.18.8 5000 作为判断条件"></a>为什么使用 <code>nc -vz -w 2 192.168.18.8 5000</code> 作为判断条件</h3><p>在之前的脚本示例中，我们使用了 <code>nc -vz -w 2 192.168.18.8 5000 &gt; /dev/null 2&gt;&amp;1</code> 作为检查服务是否可用的条件。这一命令利用了 <code>nc</code>（netcat）工具，是网络编程和调试的强大工具。以下是使用这个命令的原因：</p>
<ul>
<li><strong>端口扫描</strong>：<code>nc</code> (netcat) 能够进行端口扫描。使用 <code>-vz</code> 参数，netcat 在不发送任何数据的情况下扫描指定的IP地址和端口。这对于检查特定服务（例如数据库或Web服务器）是否已在特定端口上运行是非常有用的。</li>
<li><strong>超时设置</strong>：<code>-w 2</code> 设置了超时时间为2秒。这意味着如果在2秒内无法连接到目标端口，命令会终止并返回非零值。</li>
<li><strong>输出重定向</strong>：<code>&gt; /dev/null 2&gt;&amp;1</code> 将标准输出和标准错误都重定向到了 <code>/dev/null</code>，即忽略了所有输出。这是因为我们只关心命令的退出状态，而不是其输出内容。</li>
</ul>
<p>使用这个命令作为条件，脚本可以有效地判断特定服务（在此例中是在IP地址 <code>192.168.18.8</code> 端口 <code>5000</code> 上的服务）是否已经启动并可接受连接。</p>
<h3 id="nc-命令的退出状态"><a href="#nc-命令的退出状态" class="headerlink" title="nc 命令的退出状态"></a><code>nc</code> 命令的退出状态</h3><p>在使用 <code>nc -vz -w 2 192.168.18.8 5000 &gt; /dev/null 2&gt;&amp;1</code> 作为服务可用性的判断条件时，命令的退出状态（exit status）起到了关键作用。以下是这方面的详细说明：</p>
<ul>
<li><strong>成功连接的退出状态</strong>：当 <code>nc</code> 命令能够成功建立到指定端口的连接时，它通常以退出状态 0 结束。这表示目标服务已经启动并且在监听指定的端口。</li>
<li><strong>连接失败的退出状态</strong>：相反，如果 <code>nc</code> 命令无法建立连接（例如，服务尚未启动或端口不可达），它会以非零状态结束。这个非零状态是一个错误指示，表明命令没有成功执行预期的操作。</li>
</ul>
<hr>
<p>希望本文能帮助您更有效地管理PVE环境中的服务依赖问题。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>pve</tag>
        <tag>nas</tag>
        <tag>开机自启</tag>
      </tags>
  </entry>
  <entry>
    <title>security 使用</title>
    <url>/2017/02/08/security%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>这里记录Mac下<code>security </code>相关使用，想起来就补充。</p>
<h1 id="查看可用签名"><a href="#查看可用签名" class="headerlink" title="查看可用签名"></a>查看可用签名</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">security find-identity -v -p codesigning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<span id="more"></span>

<h1 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">codesign --force --verify --verbose --sign &quot;iPhone Developer: 396736694@qq.com (Z4965JH2C8)” 目标包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="查看描述文件信息"><a href="#查看描述文件信息" class="headerlink" title="查看描述文件信息"></a>查看描述文件信息</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">security cms -D -i xxx.mobileprovision<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="查看-WIFI-密码"><a href="#查看-WIFI-密码" class="headerlink" title="查看 WIFI 密码"></a>查看 WIFI 密码</h1><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">security find-generic-password -ga &quot;WIFI_name&quot; | grep &quot;password:&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>打包</tag>
        <tag>iOS签名</tag>
      </tags>
  </entry>
  <entry>
    <title>为 NexT 主题添加球型标签云</title>
    <url>/2017/03/19/%E4%B8%BA-NexT-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E7%90%83%E5%BD%A2%E6%A0%87%E7%AD%BE%E4%BA%91/</url>
    <content><![CDATA[<h2 id="确定你已开启标签功能"><a href="#确定你已开启标签功能" class="headerlink" title="确定你已开启标签功能"></a>确定你已开启标签功能</h2><p>参考 <code>NexT</code> 配置文档 <a href="https://theme-next.iissnan.com/theme-settings.html#tags-page">添加标签页面</a> ，开启标签功能。</p>
<h2 id="了解球形标签云插件"><a href="#了解球形标签云插件" class="headerlink" title="了解球形标签云插件"></a>了解球形标签云插件</h2><p>了解球形标签云 <code>javascript</code> 插件，点击<a href="http://www.goat1000.com/tagcanvas.php">这里</a></p>
<span id="more"></span>

<h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>下载 <code>js</code> 插件 <a href="http://www.goat1000.com/tagcanvas.js?2.8"><code>tagcanvas.js</code></a></p>
<h2 id="放入对应目录"><a href="#放入对应目录" class="headerlink" title="放入对应目录"></a>放入对应目录</h2><p>将下载的 <code>tagcanvas.js </code> 放入主题目录 <code>themes/NexT/source/js/custom/tagcanvas.js</code>，<code>custom </code> 为新建文件夹。</p>
<h2 id="新建标签云文件，引用-js"><a href="#新建标签云文件，引用-js" class="headerlink" title="新建标签云文件，引用 js"></a>新建标签云文件，引用 <code>js</code></h2><p>在 <code>themes/NexT/layout/_partials</code> 下建一个 <code>plugin</code> 文件夹，在该目录下 <code>touch</code> 一个名为 <code>tagcanvas.swig</code> 的文件，并写入如下内容：</p>
<pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;div class&#x3D;&quot;tags&quot; id&#x3D;&quot;myTags&quot;&gt;
  &lt;canvas width&#x3D;&quot;350&quot; height&#x3D;&quot;350&quot; id&#x3D;&quot;my3DTags&quot;&gt;
    &lt;p&gt;Anything in here will be replaced on browsers that support the canvas element&lt;&#x2F;p&gt;
  &lt;&#x2F;canvas&gt;
&lt;&#x2F;div&gt;
&lt;div class&#x3D;&quot;tags&quot; id&#x3D;&quot;tags&quot;&gt;
  &lt;ul style&#x3D;&quot;display: none&quot;&gt;
    &#123;&#123; tagcloud(&#123;
      min_font: 16,
      max_font: 35,
      amount: 999,
      color: true,
      start_color: &#39;red&#39;,
      end_color: &#39;red&#39;,
    &#125;) &#125;&#125;
  &lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;custom&#x2F;tagcanvas.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; &gt;
  window.onload &#x3D; function() &#123;
    try &#123;
      TagCanvas.Start(&#39;my3DTags&#39;,&#39;tags&#39;,&#123;
        textFont: &#39;Georgia,Optima&#39;,
        textColour: null,
        outlineColour: &#39;black&#39;,
        weight: true,
        reverse: true,
        depth: 0.8,
        maxSpeed: 0.05,
        bgRadius: 1,
        freezeDecel: true
      &#125;);
    &#125; catch(e) &#123;
      &#x2F;&#x2F; something went wrong, hide the canvas container
      document.getElementById(&#39;myTags&#39;).style.display &#x3D; &#39;none&#39;;
    &#125;
  &#125;;
&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用-tagcanvas-swig"><a href="#使用-tagcanvas-swig" class="headerlink" title="使用 tagcanvas.swig"></a>使用 <code>tagcanvas.swig</code></h2><p>在 <code>themes/NexT/layout/page.swig</code> 中作如下修改：<br><img src="/images/pages_tag.png" /></p>
<p>替换红框中原来位置的 <code>div</code> 标签为如下：</p>
<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#123;# tagcanvas plugin 球型云标签 #&#125;
&#123;% include &#39;_partials&#x2F;plugin&#x2F;tagcanvas.swig&#39; %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>标签</tag>
        <tag>主题</tag>
        <tag>球形标签云</tag>
      </tags>
  </entry>
  <entry>
    <title>五分钟搭建你的专属ocserv服务</title>
    <url>/2021/05/13/%E4%BA%94%E5%88%86%E9%92%9F%E6%90%AD%E5%BB%BA%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9Eocserv%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在天朝，由于互联网审查制度（通常被称为“防火长城”或“GFW”）的存在，一些国际网站和服务（如Google、Facebook、Twitter等）被屏蔽，因此，很多人需要使用VPN（虚拟专用网络）来访问这些被屏蔽的资源。VPN通过创建一个加密的连接，可以使用户的网络流量从审查制度中绕过，从而访问这些资源。作为一名程序员，经常需要翻越全世界的资料，所以，突破GFW是必备技能，但是一定要合法合规使用。</p>
<span id="more"></span>

<h2 id="选择-ocserv-原因"><a href="#选择-ocserv-原因" class="headerlink" title="选择 ocserv 原因"></a>选择 ocserv 原因</h2><p>以下是市面上常见的几种VPN协议的简单对比：</p>
<ul>
<li>PPTP（点对点隧道协议）：这是最早的VPN协议之一，大部分操作系统都内置了对它的支持。但它的安全性较差，很容易被封锁，因此现在已经不推荐使用。</li>
<li>L2TP&#x2F;IPSec（第二层隧道协议&#x2F;安全IP）：L2TP&#x2F;IPSec相较于PPTP来说更为安全，但其流量特征明显，容易被防火长城检测并封锁。</li>
<li>OpenVPN：OpenVPN是目前最常用、最安全的VPN协议之一。它使用SSL&#x2F;TLS进行密钥交换，可以提供非常高的安全性。但是，OpenVPN的流量特征也比较明显，因此有可能被防火长城封锁。</li>
<li>SSTP（安全套接字隧道协议）：SSTP也是一个基于SSL的协议，其安全性较高。然而，SSTP主要被Windows系统支持，对于其他系统的支持性较差。</li>
<li>IKEv2（Internet Key Exchange version 2）：IKEv2是一个非常安全且稳定的VPN协议，尤其适合移动设备。但是，像L2TP&#x2F;IPSec一样，它的流量特征也较为明显，可能会被防火长城封锁。</li>
<li>ocserv（OpenConnect SSL VPN）：ocserv使用的是Cisco的AnyConnect SSL VPN协议，这是一种在全球范围内广泛使用的协议，包括许多在中国大陆运营的外贸企业。它的流量特征和普通的HTTPS流量非常相似，这使得防火长城很难区分和封锁使用ocserv的VPN流量。所以，相比其他协议，ocserv的VPN服务更不容易被封锁。</li>
</ul>
<p>用过很多种VPN也自己搭建过好几种，最稳定的就属于 ocserv，速度也是最快的，不好的地方就是不能使用 PAC，因为它是 VPN，不是代理软件。</p>
<h2 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h2><p>本文更多是针对自己成果的存档，相关概念请自行谷歌学习。<br>我写了个一键部署脚本，在CentOS7以及CentOS8上测试通过，理论上也支持Ubuntu16及以上的系统。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span> yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://raw.githubusercontent.com/wangwanjie/ocserv-install/master/ocserv-install.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x ocserv-install.sh <span class="token operator">&amp;&amp;</span> ./ocserv-install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>首次执行脚本会提示安装或者退出，跟随指引一路走下去即可。<br>安装后再次运行脚本将出现如下菜单：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-<span class="token operator">></span> <span class="token comment"># ./ocserv-install.sh </span>
检查是否安装了 ocserv <span class="token punctuation">..</span>.
请选择要执行的功能：
<span class="token number">1</span><span class="token punctuation">)</span> 升级 ocserv           <span class="token number">5</span><span class="token punctuation">)</span> 配置域名             <span class="token number">9</span><span class="token punctuation">)</span> 关闭 ocserv
<span class="token number">2</span><span class="token punctuation">)</span> 卸载 ocserv           <span class="token number">6</span><span class="token punctuation">)</span> 查看ocserv登录日志  <span class="token number">10</span><span class="token punctuation">)</span> 查看 ocserv 状态
<span class="token number">3</span><span class="token punctuation">)</span> 添加 ocserv 用户      <span class="token number">7</span><span class="token punctuation">)</span> 查看系统日志        <span class="token number">11</span><span class="token punctuation">)</span> 退出
<span class="token number">4</span><span class="token punctuation">)</span> 移除 ocserv 用户      <span class="token number">8</span><span class="token punctuation">)</span> 启动或重启 ocserv
<span class="token comment">#? </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="安装后事宜"><a href="#安装后事宜" class="headerlink" title="安装后事宜"></a>安装后事宜</h2><p>安装后请执行命令“配置域名”，提前在服务商做好DNS解析为证书登录做准备。注意，配置域名这里只对阿里做了处理，其他服务商请自行准备ssl证书并填入ocserv配置文件，执行脚本重启 ocserv 即可。</p>
<h2 id="脚本主要部分展示"><a href="#脚本主要部分展示" class="headerlink" title="脚本主要部分展示"></a>脚本主要部分展示</h2><h3 id="主要部分"><a href="#主要部分" class="headerlink" title="主要部分"></a>主要部分</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 判断系统版本，根据不同系统选择不同的安装命令</span>
<span class="token keyword">if</span> <span class="token function">cat</span> /etc/os-release <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">"centos"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable">PKG_MANAGER</span><span class="token operator">=</span><span class="token string">"yum"</span>
<span class="token keyword">elif</span> <span class="token function">cat</span> /etc/os-release <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">"ubuntu\|debian"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token assign-left variable">PKG_MANAGER</span><span class="token operator">=</span><span class="token string">"apt-get"</span>
<span class="token keyword">else</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"当前系统不受支持！"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># Detect Debian users running the script with "sh" instead of bash</span>
<span class="token keyword">if</span> readlink /proc/<span class="token variable">$$</span>/exe <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> <span class="token string">"dash"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">'This installer needs to be run with "bash", not "sh".'</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># Discard stdin. Needed when running from an one-liner which includes a newline</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-N</span> <span class="token number">999999</span> <span class="token parameter variable">-t</span> <span class="token number">0.001</span>

<span class="token comment"># Detect OpenVZ 6</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">"."</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">)</span></span> <span class="token parameter variable">-eq</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"The system is running an old kernel, which is incompatible with this installer."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># Detect OS</span>
<span class="token comment"># $os_version variables aren't always in use, but are kept here for convenience</span>
<span class="token keyword">if</span> <span class="token function">grep</span> <span class="token parameter variable">-qs</span> <span class="token string">"ubuntu"</span> /etc/os-release<span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">os</span><span class="token operator">=</span><span class="token string">"ubuntu"</span>
	<span class="token assign-left variable">os_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token string">'VERSION_ID'</span> /etc/os-release <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">'"'</span> <span class="token parameter variable">-f</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">'.'</span><span class="token variable">)</span></span>
	<span class="token assign-left variable">group_name</span><span class="token operator">=</span><span class="token string">"nogroup"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-e</span> /etc/debian_version <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">os</span><span class="token operator">=</span><span class="token string">"debian"</span>
	<span class="token assign-left variable">os_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-oE</span> <span class="token string">'[0-9]+'</span> /etc/debian_version <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span><span class="token variable">)</span></span>
	<span class="token assign-left variable">group_name</span><span class="token operator">=</span><span class="token string">"nogroup"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-e</span> /etc/almalinux-release <span class="token operator">||</span> <span class="token parameter variable">-e</span> /etc/rocky-release <span class="token operator">||</span> <span class="token parameter variable">-e</span> /etc/centos-release <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">os</span><span class="token operator">=</span><span class="token string">"centos"</span>
	<span class="token assign-left variable">os_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-shoE</span> <span class="token string">'[0-9]+'</span> /etc/almalinux-release /etc/rocky-release /etc/centos-release <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span><span class="token variable">)</span></span>
	<span class="token assign-left variable">group_name</span><span class="token operator">=</span><span class="token string">"nobody"</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-e</span> /etc/fedora-release <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token assign-left variable">os</span><span class="token operator">=</span><span class="token string">"fedora"</span>
	<span class="token assign-left variable">os_version</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-oE</span> <span class="token string">'[0-9]+'</span> /etc/fedora-release <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-1</span><span class="token variable">)</span></span>
	<span class="token assign-left variable">group_name</span><span class="token operator">=</span><span class="token string">"nobody"</span>
<span class="token keyword">else</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"This installer seems to be running on an unsupported distribution.
Supported distros are Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS and Fedora."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"ubuntu"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-lt</span> <span class="token number">1804</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"Ubuntu 18.04 or higher is required to use this installer.
This version of Ubuntu is too old and unsupported."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"debian"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-lt</span> <span class="token number">9</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"Debian 9 or higher is required to use this installer.
This version of Debian is too old and unsupported."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"centos"</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-lt</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"CentOS 7 or higher is required to use this installer.
This version of CentOS is too old and unsupported."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment"># Detect environments where $PATH does not include the sbin directories</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token function">grep</span> <span class="token parameter variable">-q</span> sbin <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token environment constant">$PATH</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">'$PATH does not include sbin. Try using "su -" instead of "su".'</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token environment constant">$EUID</span>"</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"This installer needs to be run with superuser privileges."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-e</span> /dev/net/tun <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token punctuation">(</span> <span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">7</span>&lt;></span>/dev/net/tun <span class="token punctuation">)</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"The system does not have the TUN device available.
TUN needs to be enabled before running this installer."</span>
	<span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token assign-left variable">OCSERV</span><span class="token operator">=</span>/etc/ocserv
<span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">443</span>
<span class="token assign-left variable">ipv4_network</span><span class="token operator">=</span><span class="token string">"192.169.103.0"</span>

<span class="token comment"># 升级ocserv</span>
<span class="token keyword">function</span> <span class="token function-name function">upgradeOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"升级 ocserv ..."</span>

    <span class="token comment"># 根据系统使用合适的更新命令</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$PKG_MANAGER</span> <span class="token operator">==</span> <span class="token string">"yum"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> upgrade ocserv
    <span class="token keyword">else</span>
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> upgrade
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> ocserv
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"ocserv 升级完成！"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 卸载ocserv</span>
<span class="token keyword">function</span> <span class="token function-name function">uninstallOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"此操作将会卸载 ocserv 及其所有相关文件和配置，确认执行吗？ [y/n]: "</span> confirm
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confirm</span>"</span> <span class="token operator">=</span> <span class="token punctuation">[</span>yY<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"卸载 ocserv ..."</span>
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> remove ocserv
        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$OCSERV</span>/
        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /root/anyconnect
        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/www/html/user
        <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/ocserv
        <span class="token builtin class-name">echo</span> <span class="token string">"ocserv 卸载完成！"</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"已取消操作。"</span>
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 添加用户</span>
<span class="token keyword">function</span> <span class="token function-name function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sudo</span> /root/anyconnect/user_add.sh
<span class="token punctuation">&#125;</span>

<span class="token comment"># 移除用户</span>
<span class="token keyword">function</span> <span class="token function-name function">removeUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sudo</span> /root/anyconnect/user_del.sh
<span class="token punctuation">&#125;</span>

<span class="token comment"># 启动或重启 ocserv</span>
<span class="token keyword">function</span> <span class="token function-name function">startOrRestartOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> pgrep <span class="token string">"ocserv"</span> <span class="token operator">></span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"正在重启 ocserv ..."</span>
        systemctl restart ocserv
    <span class="token keyword">else</span> 
        <span class="token builtin class-name">echo</span> <span class="token string">"正在启动 ocserv ..."</span>
        systemctl start ocserv
    <span class="token keyword">fi</span>
    <span class="token keyword">if</span> pgrep <span class="token string">"httpd"</span> <span class="token operator">></span> /dev/null <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"正在重启 httpd ..."</span>
        <span class="token function">sudo</span> systemctl restart httpd
    <span class="token keyword">else</span> 
        <span class="token builtin class-name">echo</span> <span class="token string">"正在启动 httpd ..."</span>
        <span class="token function">sudo</span> systemctl start httpd
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 关闭 ocserv</span>
<span class="token keyword">function</span> <span class="token function-name function">stopOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"正在关闭 ocserv ..."</span>
    systemctl stop ocserv
<span class="token punctuation">&#125;</span>

<span class="token comment"># 查看ocserv状态</span>
<span class="token keyword">function</span> <span class="token function-name function">statusOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    systemctl status ocserv
<span class="token punctuation">&#125;</span>

<span class="token comment"># 配置 ipv4防火墙</span>
<span class="token keyword">function</span> <span class="token function-name function">configIpv4Firewall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"配置 ipv4防火墙 ..."</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.ip_forward = 1"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/60-custom.conf
    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"是否开启bbr？ [y/n]: "</span> confirm
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confirm</span>"</span> <span class="token operator">=</span> <span class="token punctuation">[</span>yY<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"centos"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"8"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                    <span class="token builtin class-name">echo</span> <span class="token string">"net.core.default_qdisc=fq"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/60-custom.conf
                    <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_congestion_control=bbr"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/60-custom.conf
                <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"7"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                    <span class="token function">rpm</span> <span class="token parameter variable">--import</span> https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
                    <span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> https://www.elrepo.org/elrepo-release-7.0-3.el7.elrepo.noarch.rpm
                    yum <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>elrepo-kernel <span class="token function">install</span> kernel-ml <span class="token parameter variable">-y</span>
                    <span class="token comment"># sudo egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \'</span>
                    <span class="token comment"># sudo grub2-set-default 0</span>
                    <span class="token comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span>
                <span class="token keyword">fi</span>
        <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"ubuntu"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"net.core.default_qdisc=fq"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/60-custom.conf
            <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_congestion_control=bbr"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.d/60-custom.conf
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"Unsupported OS type."</span>
            <span class="token builtin class-name">exit</span> <span class="token number">1</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"不安装bbr"</span>
    <span class="token keyword">fi</span>
    
    <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span> /etc/sysctl.d/60-custom.conf

    <span class="token comment"># Check if firewall-cmd is installed</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> firewall-cmd<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"firewall-cmd is already installed."</span>
    <span class="token keyword">else</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"centos"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"8"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token function">sudo</span> dnf <span class="token function">install</span> firewalld <span class="token parameter variable">-y</span>
            <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"7"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token function">sudo</span> yum <span class="token function">install</span> firewalld <span class="token parameter variable">-y</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"ubuntu"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token function">sudo</span> <span class="token function">apt-get</span> update
            <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> firewalld <span class="token parameter variable">-y</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"Unsupported OS type."</span>
            <span class="token builtin class-name">exit</span> <span class="token number">1</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">fi</span>
     <span class="token comment"># Start firewall-cmd and enable at boot</span>
    <span class="token function">sudo</span> systemctl start firewalld
    <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> firewalld
    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token variable">$PORT</span>/tcp
    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token variable">$PORT</span>/udp
    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp
    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>https
    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>ssh

    <span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family='ipv4' source address='<span class="token variable">$&#123;ipv4_network&#125;</span>/24' masquerade"</span>
    <span class="token function">sudo</span> systemctl reload firewalld

    <span class="token builtin class-name">echo</span> <span class="token string">"配置 ipv4防火墙结束，已重启防火墙"</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"centos"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"8"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /etc/yum.repos.d/
        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/mirrorlist/#mirrorlist/g'</span> /etc/yum.repos.d/CentOS-*
        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g'</span> /etc/yum.repos.d/CentOS-*
        <span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo
        yum clean all
        yum makecache

        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> dnf <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">expect</span> <span class="token parameter variable">-y</span>

        <span class="token function">sudo</span> dnf <span class="token function">install</span> httpd <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> httpd

        <span class="token function">sudo</span> dnf <span class="token function">install</span> epel-release <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gnutls-utils
        <span class="token function">sudo</span> dnf <span class="token function">install</span> ocserv <span class="token parameter variable">-y</span>
    <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os_version</span>"</span> <span class="token parameter variable">-eq</span> <span class="token string">"7"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">expect</span> <span class="token parameter variable">-y</span>

        <span class="token function">sudo</span> yum <span class="token function">install</span> httpd <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> httpd

        <span class="token function">sudo</span> yum <span class="token function">install</span> epel-release <span class="token parameter variable">-y</span>
        <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gnutls-utils
        <span class="token function">sudo</span> yum <span class="token function">install</span> ocserv <span class="token parameter variable">-y</span>
    <span class="token keyword">fi</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$os</span>"</span> <span class="token operator">==</span> <span class="token string">"ubuntu"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token function">sudo</span> <span class="token function">apt</span> update
    <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ocserv
<span class="token keyword">fi</span>
    <span class="token assign-left variable">get_public_ip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token parameter variable">-oE</span> <span class="token string">'^[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;$'</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> <span class="token parameter variable">-T</span> <span class="token number">10</span> <span class="token parameter variable">-t</span> <span class="token number">1</span> -4qO- <span class="token string">"http://ip1.dynupdate.no-ip.com/"</span> <span class="token operator">||</span> <span class="token function">curl</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span class="token parameter variable">-4Ls</span> <span class="token string">"http://ip1.dynupdate.no-ip.com/"</span><span class="token variable">)</span></span>"</span><span class="token variable">)</span></span>
    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Public IPv4 address / hostname [<span class="token variable">$get_public_ip</span>]: "</span> public_ip
    <span class="token comment"># If the checkip service is unavailable and user didn't provide input, ask again</span>
    <span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$get_public_ip</span>"</span> <span class="token operator">||</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$public_ip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Invalid input."</span>
        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Public IPv4 address / hostname: "</span> public_ip
    <span class="token keyword">done</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$public_ip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">public_ip</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$get_public_ip</span>"</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"公网 IP:<span class="token variable">$public_ip</span>"</span>

    <span class="token builtin class-name">cd</span> <span class="token variable">$OCSERV</span>
    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> pki user config-per-group config-per-user defaults tmpl pem
    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /root/anyconnect
   
    <span class="token assign-left variable">remote_repo</span><span class="token operator">=</span>https://raw.githubusercontent.com/wangwanjie/ocserv-install
    <span class="token assign-left variable">remote_repo_branch</span><span class="token operator">=</span>master

    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> ocserv.conf connect-script config-per-group/* tmpl/* pem/*

    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/ocserv.conf
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/connect-script
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/config-per-group/main <span class="token parameter variable">-O</span> config-per-group/main
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/config-per-group/others <span class="token parameter variable">-O</span> config-per-group/others
    <span class="token function">chmod</span> +x connect-script

    <span class="token builtin class-name">cd</span> /root/anyconnect
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/gen-client-cert.sh
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/user_add.sh
    <span class="token function">wget</span> --no-check-certificate <span class="token variable">$remote_repo</span>/<span class="token variable">$remote_repo_branch</span>/user_del.sh
    <span class="token function">chmod</span> +x gen-client-cert.sh
    <span class="token function">chmod</span> +x user_add.sh
    <span class="token function">chmod</span> +x user_del.sh

<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入证书签发组织名称 [vanjay.cn]: "</span> sign_org
<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$sign_org</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">sign_org</span><span class="token operator">=</span><span class="token string">"vanjay.cn"</span>

<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入证书有效期(天) [3650]: "</span> cert_valid_days
<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$cert_valid_days</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">cert_valid_days</span><span class="token operator">=</span><span class="token string">"3650"</span>

    <span class="token builtin class-name">cd</span> <span class="token variable">$OCSERV</span>/tmpl
<span class="token function">cat</span> <span class="token operator">></span>ca.tmpl <span class="token operator">&lt;&lt;</span><span class="token string">EOF
cn = "VanJay AnyConnect CA"
organization = "<span class="token variable">$sign_org</span>"
serial = 1
expiration_days = <span class="token variable">$cert_valid_days</span>
ca
signing_key
cert_signing_key
crl_signing_key
EOF</span>

<span class="token function">cat</span> <span class="token operator">></span>server.tmpl <span class="token operator">&lt;&lt;</span><span class="token string">EOF
cn = "VanJay AnyConnect CA"
organization = "<span class="token variable">$sign_org</span>"
serial = 2
expiration_days = <span class="token variable">$cert_valid_days</span>
encryption_key
signing_key
tls_www_server
EOF</span>

<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">_EOF_<span class="token bash punctuation"> <span class="token operator">></span>crl.tmpl</span>
crl_next_update = 365
crl_number = 1
_EOF_</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">configDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入 VPN 域名！(默认为 tz.vanjay.cn): "</span> domain_name
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$domain_name</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">domain_name</span><span class="token operator">=</span><span class="token string">"tz.vanjay.cn"</span>
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入您的 Email！(默认为 396736694@qq.com): "</span> mail_address
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$mail_address</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">mail_address</span><span class="token operator">=</span><span class="token string">"396736694@qq.com"</span>
    <span class="token keyword">fi</span>

    <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入ali_key: "</span> ali_key
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$ali_key</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">break</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"无效的 ali_key"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">done</span>

    <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入ali_secret: "</span> ali_secret
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$ali_secret</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">break</span>
        <span class="token keyword">else</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"无效的 ali_secret"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">done</span>

    <span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Key</span><span class="token operator">=</span><span class="token variable">$ali_key</span>
    <span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Secret</span><span class="token operator">=</span><span class="token variable">$ali_secret</span>

    yum <span class="token function">install</span> socat <span class="token parameter variable">-y</span>

    <span class="token function">curl</span> https://get.acme.sh <span class="token operator">|</span> <span class="token function">sh</span>
    <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token environment constant">$HOME</span>/.acme.sh"</span>
    <span class="token builtin class-name">alias</span> <span class="token assign-left variable">acme.sh</span><span class="token operator">=~</span>/.acme.sh/acme.sh
    acme.sh  --register-account  <span class="token parameter variable">-m</span> <span class="token variable">$mail_address</span> <span class="token parameter variable">--server</span> zerossl
    acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">--dns</span> dns_ali <span class="token parameter variable">-d</span> <span class="token variable">$domain_name</span>
    <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$OCSERV</span>/pki

    <span class="token function">cp</span> <span class="token parameter variable">-Rf</span> ~/.acme.sh/<span class="token variable">$&#123;domain_name&#125;</span>_ecc/ <span class="token variable">$OCSERV</span>/pki

    <span class="token assign-left variable">cer_path</span><span class="token operator">=</span><span class="token variable">$OCSERV</span>/pki/<span class="token variable">$&#123;domain_name&#125;</span>_ecc/<span class="token variable">$&#123;domain_name&#125;</span>.cer
    <span class="token assign-left variable">key_path</span><span class="token operator">=</span><span class="token variable">$OCSERV</span>/pki/<span class="token variable">$&#123;domain_name&#125;</span>_ecc/<span class="token variable">$&#123;domain_name&#125;</span>.key

    <span class="token comment"># 更新 ocserv.conf 文件</span>
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s#\(server-cert = \).*#<span class="token entity" title="\1">\1</span><span class="token variable">$cer_path</span>#"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s#\(server-key = \).*#<span class="token entity" title="\1">\1</span><span class="token variable">$key_path</span>#"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s#\(default-domain = \).*#<span class="token entity" title="\1">\1</span><span class="token variable">$domain_name</span>#"</span> <span class="token variable">$OCSERV</span>/ocserv.conf

    startOrRestartOcserv

    <span class="token builtin class-name">echo</span> <span class="token string">"已修改 ocserv.conf，已重启 ocserv 服务"</span>
<span class="token punctuation">&#125;</span> 

<span class="token keyword">function</span> <span class="token function-name function">generate_server_cert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">cd</span> <span class="token variable">$OCSERV</span>/pem
    <span class="token comment"># 生成 CA 证书</span>
    certtool --generate-privkey <span class="token parameter variable">--outfile</span> ca-key.pem

    certtool --generate-self-signed --load-privkey ca-key.pem <span class="token parameter variable">--template</span> <span class="token variable">$OCSERV</span>/tmpl/ca.tmpl <span class="token parameter variable">--outfile</span> ca-cert.pem

    <span class="token comment"># 生成本地服务器证书</span>
    certtool --generate-privkey <span class="token parameter variable">--outfile</span> server-key.pem

    certtool --generate-certificate --load-privkey server-key.pem <span class="token punctuation">\</span>
    --load-ca-certificate ca-cert.pem --load-ca-privkey ca-key.pem <span class="token punctuation">\</span>
    <span class="token parameter variable">--template</span> <span class="token variable">$OCSERV</span>/tmpl/server.tmpl <span class="token parameter variable">--outfile</span> server-cert.pem

    <span class="token comment"># 生成证书注销文件</span>
    <span class="token function">touch</span> <span class="token variable">$OCSERV</span>/pem/revoked.pem

    certtool --generate-crl --load-ca-privkey ca-key.pem <span class="token punctuation">\</span>
            --load-ca-certificate ca-cert.pem <span class="token punctuation">\</span>
            <span class="token parameter variable">--template</span> <span class="token variable">$OCSERV</span>/tmpl/crl.tmpl <span class="token parameter variable">--outfile</span> crl.pem
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">useSystemDNS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-e</span> <span class="token string">"/^#*\s*dns\s*=.*$/d"</span> <span class="token variable">$OCSERV</span>/ocserv.conf

    <span class="token comment"># Locate the proper resolv.conf</span>
    <span class="token comment"># Needed for systems running systemd-resolved</span>
    <span class="token keyword">if</span> <span class="token function">grep</span> <span class="token string">'^nameserver'</span> <span class="token string">"/etc/resolv.conf"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-qv</span> <span class="token string">'127.0.0.53'</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">resolv_conf</span><span class="token operator">=</span><span class="token string">"/etc/resolv.conf"</span>
    <span class="token keyword">else</span>
        <span class="token assign-left variable">resolv_conf</span><span class="token operator">=</span><span class="token string">"/run/systemd/resolve/resolv.conf"</span>
    <span class="token keyword">fi</span>
    <span class="token comment"># Obtain the resolvers from resolv.conf and use them for OpenVPN</span>
    <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'^#\|^;'</span> <span class="token string">"<span class="token variable">$resolv_conf</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'^nameserver'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'127.0.0.53'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-oE</span> <span class="token string">'[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\n">\n</span>dns = <span class="token variable">$line</span>"</span> <span class="token operator">>></span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">useOtherDNS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|dns = 1.1.1.1|dns = <span class="token variable">$1</span>|g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|dns = 8.8.8.8 # the second|dns = <span class="token variable">$2</span>|g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
<span class="token punctuation">&#125;</span>

<span class="token comment"># 配置 ocserv.conf</span>
<span class="token keyword">function</span> <span class="token function-name function">configOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入要监听的端口号（推荐使用80或443或10443）[443]: "</span> PORT
    <span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$PORT</span>"</span> <span class="token operator">||</span> <span class="token string">"<span class="token variable">$PORT</span>"</span> <span class="token operator">=~</span> ^<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+$ <span class="token operator">&amp;&amp;</span> <span class="token string">"<span class="token variable">$PORT</span>"</span> <span class="token parameter variable">-le</span> <span class="token number">65535</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$PORT</span>: invalid port."</span>
		<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Port [443]: "</span> PORT
	<span class="token keyword">done</span>
	<span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$PORT</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token string">"443"</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"请选择DNS："</span>
    <span class="token keyword">select</span> <span class="token for-or-select variable">FUNC</span> <span class="token keyword">in</span> <span class="token string">"Current system resolvers"</span> <span class="token string">"Google"</span> <span class="token string">"1.1.1.1"</span> <span class="token string">"Google &amp; 1.1.1.1"</span> <span class="token string">"OpenDNS"</span> <span class="token string">"Quad9"</span> <span class="token string">"AdGuard"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$FUNC</span> <span class="token keyword">in</span>
            <span class="token string">"Current system resolvers"</span> <span class="token punctuation">)</span> useSystemDNS<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"Google"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">8.8</span>.8.8 <span class="token number">8.8</span>.4.4<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"1.1.1.1"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">1.1</span>.1.1 <span class="token number">1.0</span>.0.1<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"Google &amp; 1.1.1.1"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">1.1</span>.1.1 <span class="token number">8.8</span>.8.8<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"OpenDNS"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">208.67</span>.222.222 <span class="token number">208.67</span>.220.220<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"Quad9"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">9.9</span>.9.9 <span class="token number">149.112</span>.112.112<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"AdGuard"</span> <span class="token punctuation">)</span> useOtherDNS <span class="token number">94.140</span>.14.14 <span class="token number">94.140</span>.15.15<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
    <span class="token keyword">done</span>

    <span class="token keyword">until</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$valid_ip</span> <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">do</span>
        <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入 ipv4_network [192.168.103.0]: "</span> ipv4_network

        <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$ipv4_network</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">ipv4_network</span><span class="token operator">=</span><span class="token string">"192.168.103.0"</span>

        <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>true
        <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'.'</span> <span class="token builtin class-name">read</span> <span class="token parameter variable">-ra</span> ip_array <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$ipv4_network</span>"</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;<span class="token operator">#</span>ip_array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-ne</span> <span class="token number">4</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>false
        <span class="token keyword">else</span>
            <span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>$&#123;#ip_array[@]&#125;<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span>
            <span class="token keyword">do</span>
                <span class="token assign-left variable">octet</span><span class="token operator">=</span><span class="token variable">$&#123;ip_array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$i</span>"</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$octet</span>"</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span> ----- <span class="token variable">$octet</span>"</span>
                        <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>false
                        <span class="token builtin class-name">break</span>
                    <span class="token keyword">else</span>
                        <span class="token comment"># 判断第一个分段是否为1到3位数字，且不能以0开头</span>
                        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$octet</span>"</span> <span class="token operator">=~</span> ^<span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0,2</span><span class="token punctuation">&#125;</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                            <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>false
                            <span class="token builtin class-name">break</span>
                        <span class="token keyword">fi</span>
                    <span class="token keyword">fi</span>
                <span class="token keyword">else</span>
                    <span class="token comment"># 判断每个分段是否为1到3位数字，可以以0开头</span>
                    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token string">"<span class="token variable">$octet</span>"</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1,2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                        <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>false
                        <span class="token builtin class-name">break</span>
                    <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$octet</span>"</span> <span class="token parameter variable">-lt</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"<span class="token variable">$octet</span>"</span> <span class="token parameter variable">-gt</span> <span class="token number">255</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                        <span class="token assign-left variable">valid_ip</span><span class="token operator">=</span>false
                        <span class="token builtin class-name">break</span>
                    <span class="token keyword">fi</span>
                <span class="token keyword">fi</span>
            <span class="token keyword">done</span>
        <span class="token keyword">fi</span>

        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$valid_ip</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token builtin class-name">echo</span> <span class="token string">"输入的IP地址不合法，请重新输入！"</span>
        <span class="token keyword">fi</span>
    <span class="token keyword">done</span>

    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|tcp-port = 443|tcp-port = <span class="token variable">$PORT</span>|g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|udp-port = 443|udp-port = <span class="token variable">$PORT</span>|g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s|ipv4-network = 192.168.103.0|ipv4-network = <span class="token variable">$ipv4_network</span>|g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$public_ip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/47.242.201.43/<span class="token variable">$public_ip</span>/g"</span> <span class="token variable">$OCSERV</span>/ocserv.conf
    <span class="token keyword">fi</span>

    <span class="token builtin class-name">echo</span> <span class="token string">"ocserv配置修改成功！"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 启用开机自启</span>
<span class="token keyword">function</span> <span class="token function-name function">enableAutoStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"是否开启开机自启？（yes或no）"</span>
    <span class="token keyword">select</span> <span class="token for-or-select variable">yn</span> <span class="token keyword">in</span> <span class="token string">"yes"</span> <span class="token string">"no"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$yn</span> <span class="token keyword">in</span>
            <span class="token function">yes</span> <span class="token punctuation">)</span> systemctl <span class="token builtin class-name">enable</span> ocserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            no <span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
    <span class="token keyword">done</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">logOcserv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /etc/ocserv/login.log <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">tail</span> <span class="token parameter variable">-f</span> /etc/ocserv/login.log
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Error: /etc/ocserv/login.log not found!"</span>
    <span class="token keyword">fi</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">logSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> /var/log/messages <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">tail</span> <span class="token parameter variable">-f</span> /var/log/messages
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Error: /var/log/messages not found!"</span>
    <span class="token keyword">fi</span> 
<span class="token punctuation">&#125;</span>

<span class="token comment"># 安装ocserv</span>
<span class="token builtin class-name">echo</span> <span class="token string">"检查是否安装了 ocserv ..."</span>

<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">hash</span> ocserv <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"ocserv 未安装！"</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"请选择安装 ocserv 或退出:"</span>
    <span class="token keyword">select</span> <span class="token for-or-select variable">yn</span> <span class="token keyword">in</span> <span class="token string">"安装"</span> <span class="token string">"退出"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$yn</span> <span class="token keyword">in</span>
            安装 <span class="token punctuation">)</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            退出 <span class="token punctuation">)</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
    <span class="token keyword">done</span>

    <span class="token comment"># 根据系统使用合适的安装命令</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$PKG_MANAGER</span> <span class="token operator">==</span> <span class="token string">"yum"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> upgrade
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> ocserv
    <span class="token keyword">else</span>
        <span class="token function">sudo</span> <span class="token parameter variable">-i</span> 
        <span class="token variable">$PKG_MANAGER</span> <span class="token function">install</span> <span class="token function">wget</span> <span class="token parameter variable">-y</span> 
        <span class="token variable">$PKG_MANAGER</span> <span class="token parameter variable">-y</span> update
        <span class="token variable">$PKG_MANAGER</span> <span class="token function">install</span> epel-release <span class="token function">wget</span> <span class="token parameter variable">-y</span>
        <span class="token variable">$PKG_MANAGER</span> <span class="token function">install</span> ocserv httpd <span class="token parameter variable">-y</span>
    <span class="token keyword">fi</span>

    prepare
    generate_server_cert
    configOcserv
    configIpv4Firewall
    enableAutoStart

    <span class="token builtin class-name">echo</span> <span class="token string">"ocserv 安装完成！"</span>
<span class="token keyword">else</span>
    <span class="token comment"># 主程序</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"请选择要执行的功能："</span>
    <span class="token keyword">select</span> <span class="token for-or-select variable">FUNC</span> <span class="token keyword">in</span> <span class="token string">"升级 ocserv"</span> <span class="token string">"卸载 ocserv"</span> <span class="token string">"添加 ocserv 用户"</span> <span class="token string">"移除 ocserv 用户"</span> <span class="token string">"配置域名"</span> <span class="token string">"查看ocserv登录日志"</span> <span class="token string">"查看系统日志"</span> <span class="token string">"启动或重启 ocserv"</span> <span class="token string">"关闭 ocserv"</span> <span class="token string">"查看 ocserv 状态"</span> <span class="token string">"退出"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token keyword">case</span> <span class="token variable">$FUNC</span> <span class="token keyword">in</span>
            <span class="token string">"升级 ocserv"</span> <span class="token punctuation">)</span> upgradeOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"卸载 ocserv"</span> <span class="token punctuation">)</span> uninstallOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"添加 ocserv 用户"</span> <span class="token punctuation">)</span> addUser<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"移除 ocserv 用户"</span> <span class="token punctuation">)</span> removeUser<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"配置域名"</span> <span class="token punctuation">)</span> configDomain<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"查看ocserv登录日志"</span> <span class="token punctuation">)</span> logOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"查看系统日志"</span> <span class="token punctuation">)</span> logSystem<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"启动或重启 ocserv"</span> <span class="token punctuation">)</span> startOrRestartOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"关闭 ocserv"</span> <span class="token punctuation">)</span> stopOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"查看 ocserv 状态"</span> <span class="token punctuation">)</span> statusOcserv<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token string">"退出"</span> <span class="token punctuation">)</span> <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">esac</span>
    <span class="token keyword">done</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">echo</span> <span class="token string">"ocserv 脚本运行结束！"</span>
<span class="token builtin class-name">echo</span> <span class="token string">"再次运行此脚本可选择功能！"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 检查是否使用 root 账户执行脚本</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$EUID</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">"This script must be run as root."</span>
   <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># 从命令行参数获取用户名和路径</span>
<span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token assign-left variable">OCSERV</span><span class="token operator">=</span><span class="token variable">$2</span>
<span class="token assign-left variable">USER_DIR</span><span class="token operator">=</span><span class="token variable">$OCSERV</span>/user/<span class="token environment constant">$USER</span>

<span class="token comment"># 确保目录存在</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$USER_DIR</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> <span class="token variable">$USER_DIR</span>

<span class="token comment"># 生成私钥</span>
<span class="token assign-left variable">SERIAL</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%s<span class="token variable">`</span></span>
certtool --generate-privkey <span class="token parameter variable">--outfile</span> <span class="token environment constant">$USER</span>-key.pem

<span class="token comment"># 生成证书的模板文件</span>
<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">_EOF_<span class="token bash punctuation"> <span class="token operator">></span><span class="token environment constant">$USER</span>.tmpl</span>
cn = "<span class="token environment constant">$USER</span>"
unit = "users"
serial = "<span class="token variable">$SERIAL</span>"
expiration_days = 9999
signing_key
tls_www_client
_EOF_</span>

<span class="token comment"># 用私钥、证书模板以及根证书生成证书文件</span>
<span class="token builtin class-name">cd</span> <span class="token variable">$USER_DIR</span>
certtool --generate-certificate --load-privkey <span class="token environment constant">$USER</span>-key.pem --load-ca-certificate <span class="token variable">$OCSERV</span>/pem/ca-cert.pem --load-ca-privkey <span class="token variable">$OCSERV</span>/pem/ca-key.pem <span class="token parameter variable">--template</span> <span class="token environment constant">$USER</span>.tmpl <span class="token parameter variable">--outfile</span> <span class="token environment constant">$USER</span>-cert.pem

<span class="token comment"># 将证书文件导出为 p12 格式</span>
openssl pkcs12 <span class="token parameter variable">-export</span> <span class="token parameter variable">-inkey</span> <span class="token environment constant">$USER</span>-key.pem <span class="token parameter variable">-in</span> <span class="token environment constant">$USER</span>-cert.pem <span class="token parameter variable">-name</span> <span class="token string">"<span class="token environment constant">$USER</span> VPN Client Cert"</span> <span class="token parameter variable">-certfile</span> <span class="token variable">$OCSERV</span>/pem/ca-cert.pem <span class="token parameter variable">-out</span> <span class="token environment constant">$USER</span>.p12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 这个脚本是用来同时添加 VPN 用户和他们的证书的</span>

<span class="token comment"># 检查是否使用 root 账户执行脚本</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$EUID</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">"This script must be run as root."</span>
   <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">function</span> <span class="token function-name function">input_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	
	<span class="token comment"># 从两个数据源获取服务器的公网 IP</span>
	<span class="token assign-left variable">get_public_ip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> <span class="token parameter variable">-oE</span> <span class="token string">'^[0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;$'</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">wget</span> <span class="token parameter variable">-T</span> <span class="token number">10</span> <span class="token parameter variable">-t</span> <span class="token number">1</span> -4qO- <span class="token string">"http://ip1.dynupdate.no-ip.com/"</span> <span class="token operator">||</span> <span class="token function">curl</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span class="token parameter variable">-4Ls</span> <span class="token string">"http://ip1.dynupdate.no-ip.com/"</span><span class="token variable">)</span></span>"</span><span class="token variable">)</span></span>
	<span class="token assign-left variable">public_ip</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$get_public_ip</span>"</span>

	<span class="token comment"># 如果第一个数据源没有返回正确的公网 IP，就尝试第二个数据源</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$public_ip</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token assign-left variable">public_ip</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">lynx</span> <span class="token parameter variable">--source</span> www.monip.org <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-nre</span> 's/^.* <span class="token punctuation">((</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1,3</span><span class="token punctuation">&#125;</span><span class="token punctuation">\</span>.<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1,3</span><span class="token punctuation">&#125;</span><span class="token variable">)</span></span>.*$/<span class="token punctuation">\</span><span class="token number">1</span>/p<span class="token string">')
	fi

	# 从 ocserv.conf 文件中获取 VPN 端口号
	PORT=$(grep ^\s*tcp-port /etc/ocserv/ocserv.conf | awk '</span><span class="token punctuation">&#123;</span>print <span class="token variable">$NF</span><span class="token punctuation">&#125;</span>'<span class="token punctuation">)</span>

	<span class="token comment"># 获取 VPN 用户名和组别</span>
	<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入您的 VPN 用户名： "</span> user_name
	<span class="token keyword">if</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$user_name</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"您没有输入用户名，请重新执行程序"</span>
	<span class="token keyword">else</span>
		<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入您的 VPN 用户组别： "</span> user_group
	<span class="token keyword">fi</span>

	<span class="token comment"># 获取 VPN 用户密码</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$user_group</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"您没有输入用户组别，将使用配置文件中的默认组别"</span>
		<span class="token assign-left variable">user_group</span><span class="token operator">=</span><span class="token string">"others"</span>
	<span class="token keyword">fi</span>
	
	<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入您的密码： "</span> user_pass

	<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$user_pass</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token builtin class-name">echo</span> <span class="token string">"您没有输入密码，请重新执行程序"</span>
	<span class="token keyword">else</span>
		user_add
		cert_add
	<span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-name function">user_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment"># 根据不同的系统，选择不同的 expect 路径</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> yum<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token assign-left variable">EXPECT_CMD</span><span class="token operator">=</span><span class="token string">"/usr/bin/expect"</span>
	<span class="token keyword">else</span>
		<span class="token assign-left variable">EXPECT_CMD</span><span class="token operator">=</span><span class="token string">"/usr/bin/env expect"</span>
	<span class="token keyword">fi</span>

	<span class="token function">sudo</span> <span class="token function">touch</span> /etc/ocserv/ocpasswd
	<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">600</span> /etc/ocserv/ocpasswd

	<span class="token variable">$EXPECT_CMD</span> <span class="token operator">&lt;&lt;-</span>END
	spawn <span class="token function">sudo</span> ocpasswd <span class="token parameter variable">-c</span> /etc/ocserv/ocpasswd <span class="token parameter variable">-g</span> <span class="token variable">$user_group</span> <span class="token variable">$user_name</span> 
	<span class="token function">expect</span> <span class="token string">"Enter password:"</span>
	send <span class="token string">"<span class="token variable">$user_pass</span><span class="token entity" title="\r">\r</span>"</span>
	<span class="token function">expect</span> <span class="token string">"Re-enter password:"</span>
	send <span class="token string">"<span class="token variable">$user_pass</span><span class="token entity" title="\r">\r</span>"</span>
	<span class="token function">expect</span> eof
	<span class="token builtin class-name">exit</span>
	END
<span class="token punctuation">&#125;</span>

<span class="token comment"># 为用户添加证书</span>
<span class="token keyword">function</span> <span class="token function-name function">cert_add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token assign-left variable">OCSERV</span><span class="token operator">=</span>/etc/ocserv
	<span class="token assign-left variable">user_root_dir</span><span class="token operator">=</span><span class="token variable">$OCSERV</span>/user
	<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$user_root_dir</span>/<span class="token variable">$user_name</span>
	<span class="token builtin class-name">cd</span> <span class="token variable">$user_root_dir</span>/<span class="token variable">$user_name</span>

	<span class="token comment"># 根据不同的系统，选择不同的 expect 路径</span>
	<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-x</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> yum<span class="token variable">)</span></span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
		<span class="token assign-left variable">EXPECT_CMD</span><span class="token operator">=</span><span class="token string">"/usr/bin/expect"</span>
	<span class="token keyword">else</span>
		<span class="token assign-left variable">EXPECT_CMD</span><span class="token operator">=</span><span class="token string">"/usr/bin/env expect"</span>
	<span class="token keyword">fi</span>

	<span class="token variable">$EXPECT_CMD</span> <span class="token operator">&lt;&lt;-</span>END
	spawn <span class="token function">sudo</span> /root/anyconnect/gen-client-cert.sh <span class="token variable">$user_name</span> <span class="token variable">$OCSERV</span>
	<span class="token function">expect</span> <span class="token string">"Enter Export Password:"</span>
	send <span class="token string">"<span class="token variable">$user_pass</span><span class="token entity" title="\r">\r</span>"</span>
	<span class="token function">expect</span> <span class="token string">"Verifying - Enter Export Password:"</span>
	send <span class="token string">"<span class="token variable">$user_pass</span><span class="token entity" title="\r">\r</span>"</span>
	<span class="token function">expect</span> eof
	<span class="token builtin class-name">exit</span>
	END

	<span class="token builtin class-name">cd</span> <span class="token variable">$user_root_dir</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /var/www/html/user
    <span class="token function">cp</span> <span class="token parameter variable">-R</span> <span class="token variable">$user_name</span> /var/www/html/user/<span class="token variable">$user_name</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$user_name</span> 用户已成功创建，密码为 <span class="token variable">$user_pass</span>"</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$user_name</span> 的证书已成功创建，请点击以下链接进行下载。"</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"http://<span class="token variable">$public_ip</span>/user/<span class="token variable">$user_name</span>/<span class="token variable">$user_name</span>.p12"</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"证书本地路径为：<span class="token variable">$user_root_dir</span>/<span class="token variable">$user_name</span>"</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"导入证书的密码是 <span class="token variable">$user_pass</span>"</span>
	<span class="token builtin class-name">echo</span> <span class="token string">"VPN 地址和端口是 <span class="token variable">$public_ip</span>:<span class="token variable">$PORT</span>"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 安装 shell</span>
<span class="token keyword">function</span> <span class="token function-name function">shell_install</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	input_user
<span class="token punctuation">&#125;</span>

shell_install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># ocserv 删除用户及注销用户的证书脚本文件</span>

<span class="token comment"># 检查是否使用 root 账户执行脚本</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$EUID</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
   <span class="token builtin class-name">echo</span> <span class="token string">"This script must be run as root."</span>
   <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token keyword">function</span> <span class="token function-name function">user_del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token assign-left variable">OCSERV</span><span class="token operator">=</span>/etc/ocserv
    
    <span class="token comment"># 获取要删除用户的用户名</span>
    <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请输入您想要删除的用户名！"</span> user_name
    <span class="token keyword">if</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$user_name</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"您没有输入用户名，请重新执行程序"</span>
    <span class="token keyword">else</span>
        <span class="token comment"># 使用 ocpasswd 命令删除用户</span>
        /usr/bin/ocpasswd <span class="token parameter variable">-d</span> <span class="token variable">$user_name</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$user_name</span> 用户已成功删除"</span>
        
        <span class="token comment"># 将用户证书添加到撤销列表，并生成 CRL 文件</span>
        <span class="token function">cat</span> <span class="token variable">$OCSERV</span>/user/<span class="token variable">$user_name</span>/<span class="token variable">$user_name</span>-cert.pem <span class="token operator">>></span> <span class="token variable">$OCSERV</span>/pem/revoked.pem
        certtool --generate-crl --load-ca-privkey <span class="token variable">$OCSERV</span>/pem/ca-key.pem  --load-ca-certificate <span class="token variable">$OCSERV</span>/pem/ca-cert.pem --load-certificate <span class="token variable">$OCSERV</span>/pem/revoked.pem  <span class="token parameter variable">--template</span> <span class="token variable">$OCSERV</span>/tmpl/crl.tmpl <span class="token parameter variable">--outfile</span> <span class="token variable">$OCSERV</span>/pem/crl.pem
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$user_name</span> 用户的证书已被注销"</span>
        
        <span class="token comment"># 重启 ocserv 服务</span>
        systemctl restart ocserv.service
    <span class="token keyword">fi</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 调用函数</span>
user_del<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>脚本已开源，如有定制需求可以fork自行修改。</p>
<p><a href="https://github.com/wangwanjie/ocserv-install">ocserv-install</a></p>
<h2 id="相关常用命令"><a href="#相关常用命令" class="headerlink" title="相关常用命令"></a>相关常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl <span class="token parameter variable">-u</span> ocserv <span class="token parameter variable">-f</span>
systemctl reload firewalld
firewall-cmd --list-all
systemctl <span class="token builtin class-name">enable</span> firewalld
systemctl disable firewalld
systemctl start firewalld
firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>https
firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>ssh
firewall-cmd <span class="token parameter variable">--permanent</span> --add-port<span class="token operator">=</span>xxx/tcp
firewall-cmd <span class="token parameter variable">--permanent</span> --remove-port<span class="token operator">=</span>xxx/tcp
firewall-cmd <span class="token parameter variable">--permanent</span> --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family='ipv4' source address='your_ipv4_mask/24' masquerade"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><p><a href="https://gitlab.com/openconnect/ocserv">ocserv开源代码</a></p>
<p><a href="https://gitlab.com/openconnect/openconnect">OpenConnect</a></p>
<p><a href="https://gitlab.com/openconnect/openconnect-gui">OpenConnect GUI</a></p>
<p><a href="https://ocserv.gitlab.io/www/manual.html">官方配置说明</a></p>
<h2 id="客户端下载"><a href="#客户端下载" class="headerlink" title="客户端下载"></a>客户端下载</h2><p>可以使用 OpenConnect GUI 也可以使用 openconnect 命令行连接，使用方法自行搜索。<br>推荐使用 Cisco Anyconnect 或者 Cisco Secure Client 连接，<a href="https://download.vanjay.cn/anyconnect/">下载链接</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ocserv</tag>
        <tag>VPN</tag>
        <tag>翻墙</tag>
        <tag>OpenVPN</tag>
      </tags>
  </entry>
  <entry>
    <title>从 Gitlab 迁移到 Gitea 小记</title>
    <url>/2023/09/28/%E4%BB%8E-Gitlab-%E8%BF%81%E7%A7%BB%E5%88%B0-Gitea-%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开源的世界中，选择合适的代码托管平台是每个开发者和组织都会面临的选择。近年来，GitLab和Gitea都已经成为开发者社区的热门选择。而对于个人用户来说，是否有必要从GitLab迁移到Gitea呢？这篇博客旨在对比这两者的优劣，并提供一个简单的迁移指南。</p>
<span id="more"></span>

<h2 id="GitLab与Gitea的优劣对比"><a href="#GitLab与Gitea的优劣对比" class="headerlink" title="GitLab与Gitea的优劣对比"></a>GitLab与Gitea的优劣对比</h2><h3 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h3><p>优点：</p>
<ul>
<li>功能齐全：GitLab不仅仅是一个代码托管平台，它还提供了CI&#x2F;CD工具、项目管理、代码审查、安全扫描等全面的开发功能。</li>
<li>界面友好：GitLab的用户界面现代且直观，适合新手和经验丰富的开发者。</li>
<li>社区活跃：GitLab拥有一个庞大的开发者社区，这意味着经常有新的功能和改进。</li>
</ul>
<p>缺点：</p>
<ul>
<li>资源消耗：对于个人用户和小团队，GitLab可能会消耗大量的服务器资源。</li>
<li>配置复杂：虽然功能丰富，但配置GitLab可能需要一定的技术背景和时间。</li>
</ul>
<h3 id="Gitea"><a href="#Gitea" class="headerlink" title="Gitea"></a>Gitea</h3><p>优点：</p>
<ul>
<li>轻量级：Gitea是为低资源环境设计的，适合个人用户和小团队。</li>
<li>简单易用：Gitea提供了一个简单直观的用户界面。</li>
<li>自托管：与其他托管服务相比，Gitea很容易在自己的服务器上安装和运行。</li>
</ul>
<p>缺点：</p>
<ul>
<li>功能限制：相对于GitLab，Gitea可能没有那么多的高级功能。</li>
<li>社区规模较小：虽然Gitea的社区在不断增长，但相比GitLab，它仍然相对较小。</li>
</ul>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>从GitLab迁移到Gitea并不复杂。以下是一些简单的步骤：</p>
<ul>
<li>安装Gitea：根据你的操作系统和服务器环境，从Gitea官方网站下载并安装。</li>
<li>迁移仓库：在Gitea中创建一个新的仓库，并从GitLab中复制你的仓库URL。</li>
<li>使用Gitea的迁移工具：Gitea提供了一个内置的迁移工具，只需几步就可以完成迁移。</li>
</ul>
<h2 id="迁移维护脚本"><a href="#迁移维护脚本" class="headerlink" title="迁移维护脚本"></a>迁移维护脚本</h2><p>以下是迁移脚本示例：</p>
<h3 id="全自动迁移-gitlab-仓库到-gitlab"><a href="#全自动迁移-gitlab-仓库到-gitlab" class="headerlink" title="全自动迁移 gitlab 仓库到 gitlab"></a>全自动迁移 gitlab 仓库到 gitlab</h3><p>注意：请确保在使用此脚本之前，已经正确配置了GitLab和Gitea的凭证。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 提示用户进行第一次确认</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"此操作会创建一些仓库。请确认是否继续 (输入 YES 继续)： "</span> confirm1

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confirm1</span>"</span> <span class="token operator">!=</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"操作已取消。"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># GitLab 认证信息</span>
<span class="token assign-left variable">gitlab_name</span><span class="token operator">=</span><span class="token string">"your_gitlab_name"</span>
<span class="token assign-left variable">gitlab_pwd</span><span class="token operator">=</span><span class="token string">"your_gitlab_pwd"</span>

<span class="token comment"># Gitea 认证和相关信息</span>
<span class="token assign-left variable">gitea_name</span><span class="token operator">=</span><span class="token string">"your_gitea_name"</span>
<span class="token assign-left variable">gitea_pwd</span><span class="token operator">=</span><span class="token string">"your_gitea_pwd"</span>
<span class="token assign-left variable">gitea_token</span><span class="token operator">=</span><span class="token string">"your_gitea_token"</span>
<span class="token assign-left variable">gitea_base_url</span><span class="token operator">=</span><span class="token string">"https://your.gitea.domain/api/v1"</span>

<span class="token comment"># 列表用于跟踪迁移状态</span>
<span class="token assign-left variable">successful_repos</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token assign-left variable">failed_repos</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 仓库列表</span>
<span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token punctuation">(</span>
    <span class="token string">'https://your.gitlab.domain/main/server_config.git,Shell,7'</span>
    <span class="token string">'https://your.gitlab.domain/main/WJDemoPlayGround.git,iOS,6'</span>
    <span class="token string">'https://your.gitlab.domain/main/blxy.git,iOS,6'</span>
    <span class="token string">'https://your.gitlab.domain/android/blxy.git,Android,3'</span>
<span class="token punctuation">)</span>

<span class="token comment"># 迭代仓库列表</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">repo_info</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;list<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">gitlab_url</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $repo_info <span class="token operator">|</span> <span class="token function">cut</span> -d, <span class="token parameter variable">-f1</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">gitea_group</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $repo_info <span class="token operator">|</span> <span class="token function">cut</span> -d, <span class="token parameter variable">-f2</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">gitea_uid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $repo_info <span class="token operator">|</span> <span class="token function">cut</span> -d, <span class="token parameter variable">-f3</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">repo_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $gitlab_url .git<span class="token variable">)</span></span>
    
    <span class="token assign-left variable">dir_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$gitea_group</span>-<span class="token variable">$repo_name</span>"</span>
    
    <span class="token comment"># Clone from GitLab</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$dir_name</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token function">git</span> clone <span class="token string">"<span class="token variable">$gitlab_url</span>"</span> <span class="token string">"<span class="token variable">$dir_name</span>"</span>
    <span class="token keyword">fi</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$gitea_group</span>"</span> <span class="token operator">==</span> <span class="token string">"iOS"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$gitea_group</span>"</span> <span class="token operator">==</span> <span class="token string">"Android"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$gitea_group</span> <span class="token variable">$repo_name</span> project."</span>
    <span class="token keyword">else</span>
        <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$repo_name</span> project."</span>
    <span class="token keyword">fi</span>
    
    <span class="token comment"># Create the repo in Gitea</span>
    <span class="token assign-left variable">curl_command</span><span class="token operator">=</span><span class="token string">"curl \
    -X POST <span class="token entity" title="\&quot;">\"</span><span class="token variable">$gitea_base_url</span>/repos/migrate<span class="token entity" title="\&quot;">\"</span> \
    -H 'accept: application/json' \
    -H 'Content-Type: application/json' \
    -H <span class="token entity" title="\&quot;">\"</span>Authorization: token <span class="token variable">$gitea_token</span><span class="token entity" title="\&quot;">\"</span> \
    -d '&#123;
            <span class="token entity" title="\&quot;">\"</span>clone_addr<span class="token entity" title="\&quot;">\"</span>: <span class="token entity" title="\&quot;">\"</span><span class="token variable">$gitlab_url</span><span class="token entity" title="\&quot;">\"</span>,
            <span class="token entity" title="\&quot;">\"</span>uid<span class="token entity" title="\&quot;">\"</span>: <span class="token variable">$gitea_uid</span>,
            <span class="token entity" title="\&quot;">\"</span>repo_name<span class="token entity" title="\&quot;">\"</span>: <span class="token entity" title="\&quot;">\"</span><span class="token variable">$repo_name</span><span class="token entity" title="\&quot;">\"</span>,
            <span class="token entity" title="\&quot;">\"</span>description<span class="token entity" title="\&quot;">\"</span>: <span class="token entity" title="\&quot;">\"</span><span class="token variable">$description</span><span class="token entity" title="\&quot;">\"</span>,
            <span class="token entity" title="\&quot;">\"</span>mirror<span class="token entity" title="\&quot;">\"</span>: false,
            <span class="token entity" title="\&quot;">\"</span>private<span class="token entity" title="\&quot;">\"</span>: true,
            <span class="token entity" title="\&quot;">\"</span>auth_username<span class="token entity" title="\&quot;">\"</span>: <span class="token entity" title="\&quot;">\"</span><span class="token variable">$gitlab_name</span><span class="token entity" title="\&quot;">\"</span>,
            <span class="token entity" title="\&quot;">\"</span>auth_password<span class="token entity" title="\&quot;">\"</span>: <span class="token entity" title="\&quot;">\"</span><span class="token variable">$gitlab_pwd</span><span class="token entity" title="\&quot;">\"</span>
    &#125;'"</span>
    
    <span class="token comment"># echo "执行 curl:"</span>
    <span class="token comment"># echo "$curl_command"</span>
    
    <span class="token comment"># 在 Gitea 中创建仓库</span>
    <span class="token assign-left variable">response_with_status</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> <span class="token string">"||%&#123;http_code&#125;"</span> <span class="token punctuation">\</span>
        <span class="token parameter variable">-X</span> POST <span class="token string">"<span class="token variable">$gitea_base_url</span>/repos/migrate"</span> <span class="token punctuation">\</span>
        <span class="token parameter variable">-H</span> <span class="token string">'accept: application/json'</span> <span class="token punctuation">\</span>
        <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token punctuation">\</span>
        <span class="token parameter variable">-H</span> <span class="token string">"Authorization: token <span class="token variable">$gitea_token</span>"</span> <span class="token punctuation">\</span>
        <span class="token parameter variable">-d</span> <span class="token string">'&#123;
            "clone_addr": "'</span>"$gitlab_url<span class="token string">"'"</span>,
            <span class="token string">"uid"</span><span class="token builtin class-name">:</span> <span class="token string">'"$gitea_uid"'</span>,
            <span class="token string">"repo_name"</span><span class="token builtin class-name">:</span> <span class="token string">"'"</span>$repo_name<span class="token string">"'"</span>,
            <span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">"'"</span>$description<span class="token string">"'"</span>,
            <span class="token string">"mirror"</span><span class="token builtin class-name">:</span> false,
            <span class="token string">"private"</span><span class="token builtin class-name">:</span> true,
            <span class="token string">"auth_username"</span><span class="token builtin class-name">:</span> <span class="token string">"'"</span>$gitlab_name<span class="token string">"'"</span>,
            <span class="token string">"auth_password"</span><span class="token builtin class-name">:</span> <span class="token string">"'"</span>$gitlab_pwd<span class="token string">"'"</span>
    <span class="token punctuation">&#125;</span>'<span class="token variable">)</span></span>
    
    <span class="token assign-left variable">response_body</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $response_with_status <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">"|"</span> <span class="token parameter variable">-f1</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">http_status</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $response_with_status <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">"|"</span> <span class="token parameter variable">-f3</span><span class="token variable">)</span></span>
    
    <span class="token comment"># 如果仓库创建成功，则推送到 Gitea</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$http_status</span>"</span> <span class="token operator">=</span> <span class="token string">"201"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">repo_http_url</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $response_body <span class="token operator">|</span> jq <span class="token parameter variable">-r</span> <span class="token string">'.clone_url'</span><span class="token variable">)</span></span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Repository created successfully at: <span class="token variable">$repo_http_url</span>"</span>
        
        <span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable">$dir_name</span>"</span>
        <span class="token comment"># 判断是否存在readme文件</span>
        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"README.md"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
            <span class="token comment"># 使用sed命令查找并替换字符串</span>
            <span class="token comment"># sed -i '' </span><span class="token parameter variable">-E</span> <span class="token string">"s|(git remote add origin )[^\s]+|<span class="token entity" title="\1">\1</span><span class="token variable">$repo_http_url</span>|"</span> README.md
            <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">''</span> <span class="token parameter variable">-E</span> <span class="token string">"s|(git remote add origin ).+\.git|<span class="token entity" title="\1">\1</span><span class="token variable">$repo_http_url</span>|"</span> README.md
            
            <span class="token comment"># 检查上一条命令是否成功</span>
            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
                <span class="token function">git</span> <span class="token function">add</span> README.md
                <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Fix readme remote url."</span>
            <span class="token keyword">fi</span>
        <span class="token keyword">fi</span>
        
        <span class="token function">git</span> remote set-url origin <span class="token variable">$repo_http_url</span>
        <span class="token function">git</span> push origin <span class="token parameter variable">--all</span>
        <span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
        <span class="token function">git</span> push origin HEAD
        <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
        
        <span class="token comment"># 添加到成功列表</span>
        <span class="token assign-left variable">successful_repos</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$repo_name</span>"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"Error migrating <span class="token variable">$repo_name</span> to Gitea. HTTP Response: <span class="token variable">$response_body</span>"</span>
        
        <span class="token comment"># 添加到失败列表</span>
        <span class="token assign-left variable">failed_repos</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$repo_name</span>"</span><span class="token punctuation">)</span>
    <span class="token keyword">fi</span>
    
    <span class="token comment"># 可选：删除克隆的仓库以节省空间</span>
    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">"<span class="token variable">$dir_name</span>"</span>
<span class="token keyword">done</span>

<span class="token comment"># 打印迁移完成的消息</span>
<span class="token builtin class-name">echo</span> <span class="token string">"迁移完成。"</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;<span class="token operator">#</span>successful_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"成功迁移的仓库："</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">repo</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;successful_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"- <span class="token variable">$repo</span>"</span>
    <span class="token keyword">done</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;<span class="token operator">#</span>failed_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"迁移失败的仓库："</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">repo</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;failed_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"- <span class="token variable">$repo</span>"</span>
    <span class="token keyword">done</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="批量删除仓库"><a href="#批量删除仓库" class="headerlink" title="批量删除仓库"></a>批量删除仓库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment"># 提示用户进行第一次确认</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"此操作会删除一些仓库。请确认是否继续 (输入 YES 继续)： "</span> confirm1

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confirm1</span>"</span> <span class="token operator">!=</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"操作已取消。"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># 提示用户进行第二次确认</span>
<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"请再次确认是否继续删除 (输入 YES 继续)： "</span> confirm2

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$confirm2</span>"</span> <span class="token operator">!=</span> <span class="token string">"YES"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"操作已取消。"</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span>
<span class="token keyword">fi</span>

<span class="token comment"># Gitea 认证和相关信息</span>
<span class="token assign-left variable">gitea_name</span><span class="token operator">=</span><span class="token string">"your_gitea_name"</span>
<span class="token assign-left variable">gitea_pwd</span><span class="token operator">=</span><span class="token string">"your_gitea_pwd"</span>
<span class="token assign-left variable">gitea_token</span><span class="token operator">=</span><span class="token string">"your_gitea_token"</span>
<span class="token assign-left variable">gitea_base_url</span><span class="token operator">=</span><span class="token string">"https://your.gitea.domain/api/v1"</span>

<span class="token comment"># 列表用于跟踪迁移状态</span>
<span class="token assign-left variable">successful_repos</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token assign-left variable">failed_repos</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token punctuation">(</span>
    <span class="token string">'https://your.gitea.domain/shell/server_config.git,Shell'</span>
    <span class="token string">'https://your.gitea.domain/ios/WJDemoPlayGround.git,iOS'</span>
    <span class="token string">'https://your.gitea.domain/ios/blxy.git,iOS'</span>
    <span class="token string">'https://your.gitea.domain/android/blxy.git,Android'</span>
<span class="token punctuation">)</span>

<span class="token comment"># 删除仓库</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">repo_info</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;list<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token assign-left variable">gitlab_url</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $repo_info <span class="token operator">|</span> <span class="token function">cut</span> -d, <span class="token parameter variable">-f1</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">onwer</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $repo_info <span class="token operator">|</span> <span class="token function">cut</span> -d, <span class="token parameter variable">-f2</span><span class="token variable">)</span></span>
    <span class="token assign-left variable">repo</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $gitlab_url .git<span class="token variable">)</span></span>
    
    <span class="token assign-left variable">curl_command</span><span class="token operator">=</span><span class="token string">"curl \
    -s -o /dev/null -w <span class="token entity" title="\&quot;">\"</span>%&#123;http_code&#125;<span class="token entity" title="\&quot;">\"</span> \
    -X DELETE <span class="token entity" title="\&quot;">\"</span><span class="token variable">$gitea_base_url</span>/repos/<span class="token variable">$onwer</span>/<span class="token variable">$repo</span><span class="token entity" title="\&quot;">\"</span> \
    -H 'accept: application/json' \
    -H 'Content-Type: application/json' \
    -H <span class="token entity" title="\&quot;">\"</span>Authorization: token <span class="token variable">$gitea_token</span><span class="token entity" title="\&quot;">\"</span>"</span>
    
    <span class="token builtin class-name">echo</span> <span class="token string">"正在删除 <span class="token variable">$repo</span> ..."</span>
    <span class="token assign-left variable">response_code</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">eval</span> $curl_command<span class="token variable">)</span></span>
    
    <span class="token comment"># 检查 HTTP 返回状态码。通常，204 表示删除成功，其他状态码可能表示出现错误。</span>
    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$response_code</span>"</span> <span class="token operator">==</span> <span class="token string">"204"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
        <span class="token assign-left variable">successful_repos</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$repo</span>"</span><span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"成功删除 <span class="token variable">$repo</span>."</span>
    <span class="token keyword">else</span>
        <span class="token assign-left variable">failed_repos</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token string">"<span class="token variable">$repo</span>"</span><span class="token punctuation">)</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"删除 <span class="token variable">$repo</span> 失败，HTTP 状态码: <span class="token variable">$response_code</span>."</span>
    <span class="token keyword">fi</span>
<span class="token keyword">done</span>

<span class="token comment"># 打印删除完成的消息</span>
<span class="token builtin class-name">echo</span> <span class="token string">"删除完成。"</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;<span class="token operator">#</span>successful_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"成功删除的仓库："</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">repo</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;successful_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"- <span class="token variable">$repo</span>"</span>
    <span class="token keyword">done</span>
<span class="token keyword">fi</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;<span class="token operator">#</span>failed_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"删除失败的仓库："</span>
    <span class="token keyword">for</span> <span class="token for-or-select variable">repo</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$&#123;failed_repos<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token punctuation">;</span> <span class="token keyword">do</span>
        <span class="token builtin class-name">echo</span> <span class="token string">"- <span class="token variable">$repo</span>"</span>
    <span class="token keyword">done</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><img src="/images/gitea_result.png"/>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于个人用户来说，从GitLab迁移到Gitea可能是一个明智的选择，特别是如果你寻找的是一个轻量级、易于管理的解决方案。不过，每个人和团队的需求都是独特的，因此在做出决策之前，最好深入了解每个平台的优缺点。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Gitea</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅得处理Xcode项目中的TODO、FIXME</title>
    <url>/2019/08/12/%E4%BC%98%E9%9B%85%E5%BE%97%E5%A4%84%E7%90%86Xcode%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84TODO%E3%80%81FIXME/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在开发过程中，我们都会不时地写一些 <code>// TODO:</code> 和 &#x2F;&#x2F; <code>FIXME:</code> 注释。有时我们这样做是因为我们知道代码可以做得更好，但暂时不确定如何做，有时由于 deadline 而没有时间编写最佳解决方案，而有时我们只是想着手处理更有趣的事情，这时我们只需在代码中标识一个 <code>// TODO:</code> 以便在将来某一天再处理。</p>
<span id="more"></span>

<h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>Xcode 默认无法自动识别这些标记，因为编辑器没有给我们强提示，所以即使有时我们立了 flag 过后也很容易忘记去实现，如下面情况所示：<br><img src="/images/iOS/tips/todo_check_default.png"/></p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>利用 Xcode 工程设置 <code>Build Phases</code> 在 build 时执行自定义任务，点击 <code>Build Phases</code> 下 + 号，点击 <code>New Run Script Phase</code>，填入内容：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">KEYWORDS</span><span class="token operator">=</span><span class="token string">"STUB:|TODO:|FIXME:|DevTeam:|\?\?\?:"</span> 
<span class="token function">find</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>"</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">"*.h"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.m"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.swift"</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>/Pods/*"</span> <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">egrep</span> --with-filename --line-number --only-matching <span class="token string">"(<span class="token variable">$KEYWORDS</span>).*\$"</span> <span class="token operator">|</span> perl <span class="token parameter variable">-p</span> <span class="token parameter variable">-e</span> <span class="token string">"s/(<span class="token variable">$KEYWORDS</span>)/1: warning: \<span class="token variable">$1</span>/"</span>

<span class="token assign-left variable">KEYWORDS</span><span class="token operator">=</span><span class="token string">"ERROR:|XXX:|\!\!\!:"</span> 
<span class="token function">find</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>"</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">"*.h"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.m"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.swift"</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>/Pods/*"</span> <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">egrep</span> --with-filename --line-number --only-matching <span class="token string">"(<span class="token variable">$KEYWORDS</span>).*\$"</span> <span class="token operator">|</span> perl <span class="token parameter variable">-p</span> <span class="token parameter variable">-e</span> <span class="token string">"s/(<span class="token variable">$KEYWORDS</span>)/1: error: \<span class="token variable">$1</span>/"</span>
<span class="token assign-left variable">ERROR_OUTPUT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>"</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-name</span> <span class="token string">"*.h"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.m"</span> <span class="token parameter variable">-or</span> <span class="token parameter variable">-name</span> <span class="token string">"*.swift"</span> <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-not</span> <span class="token parameter variable">-path</span> <span class="token string">"<span class="token variable">$&#123;SRCROOT&#125;</span>/Pods/*"</span> <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token function">egrep</span> --with-filename --line-number --only-matching <span class="token string">"(<span class="token variable">$KEYWORDS</span>).*\$"</span> <span class="token operator">|</span> perl <span class="token parameter variable">-p</span> <span class="token parameter variable">-e</span> <span class="token string">"s/(<span class="token variable">$KEYWORDS</span>)/1: error: \<span class="token variable">$1</span>/"</span><span class="token variable">`</span></span>

<span class="token builtin class-name">exit</span> <span class="token variable">$&#123;<span class="token operator">#</span>ERROR_OUTPUT&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>这时我们再看看效果，是不是友好多了。<br><img src="/images/iOS/tips/todo_check_custom.png"/></p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>在 TODO 等这些标记处中加上日期和作者，虽然 git 能够追溯，但是这样更直接，也就多占用几秒的时间。这使您和团队中的每个人都非常清楚 TODO 待了多长时间，以及是谁写的。目的不是追责，而是要问作者该待办事项是否仍然需要处理，以及在您使用的任何系统中是否有其它方式来跟踪必须完成的工作。</p>
<p>也可以从 git 中提取 TODO 的作者和日期，但这有时可能会出现问题，尤其是在移动了有 TODO 标记的代码的情况下，因为 TODO 将包含整个历史记录。一目了然，可以轻松获得有关 TODO 的基本信息。</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>工程配置</tag>
        <tag>Xcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx配置启用Web文件服务器</title>
    <url>/2018/04/13/%E4%BD%BF%E7%94%A8Nginx%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%BC%80%E5%90%AFWeb%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网的快速发展，有时我们需要一个能快速、稳定且安全地存取和分享文件的在线服务。可能你是一个开发者，需要分享你的代码库；也可能你是一名摄影师，想要分享你的作品；或者你只是希望能在不同设备之间方便地存取文件。无论哪种情况，一个Web文件服务都可以满足你的需求。</p>
<span id="more"></span>

<h2 id="为什么选择Nginx？"><a href="#为什么选择Nginx？" class="headerlink" title="为什么选择Nginx？"></a>为什么选择Nginx？</h2><p>Nginx是一个开源的高性能HTTP服务器和反向代理服务器。它不仅提供了强大的负载均衡和反向代理能力，还能作为一个静态文件服务器，非常适合作为Web文件服务。<br>Nginx相比其他Web服务器（如Apache）的优势包括：</p>
<ul>
<li>性能高：Nginx使用了异步事件驱动的架构，能够处理大量并发连接，对系统资源的占用也相对较少。</li>
<li>配置灵活：Nginx的配置非常灵活，可以很容易地进行各种复杂的配置，如HTTPS和反向代理。</li>
<li>稳定性高：Nginx在稳定性方面表现优秀，被广泛用于高流量的生产环境。</li>
</ul>
<p>基于以上原因，我们选择使用Nginx来搭建Web文件服务。</p>
<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>以下是一个基本的Nginx配置文件，可以实现文件服务、HTTPS和反向代理：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> dl.mydomain.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8898</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">root</span> /var/www/share_file</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">autoindex</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">autoindex_exact_size</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">autoindex_localtime</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> dl.mydomain.com</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/ssl/dl.mydomain.com_ecc/dl.mydomain.com.cer</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/ssl/dl.mydomain.com_ecc/dl.mydomain.com.key</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_ciphers</span> <span class="token string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384'</span></span><span class="token punctuation">;</span>   
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:SSL:10m</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">1d</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_tickets</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">add_header</span> Strict-Transport-Security <span class="token string">"max-age=63072000; includeSubDomains; preload"</span> always</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> Referrer-Policy <span class="token string">"no-referrer"</span> always</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> X-Content-Type-Options <span class="token string">"nosniff"</span> always</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> X-XSS-Protection <span class="token string">"1; mode=block"</span> always</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> Content-Security-Policy <span class="token string">"frame-ancestors 'self' *.mydomain.com"</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">charset</span> utf-8</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8898/</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是配置不仅提供了<code>Web</code>文件服务，还提供了<code>HTTPS</code>支持，并对<code>HTTP</code>请求进行了重定向。同时，它也使用了反向代理来处理文件服务。</p>
<p>这个配置首先在端口80上监听所有指向 <code>dl.mydomain.com</code> 的<code>HTTP</code>请求，并将其重定向到<code>HTTPS</code>。这样，所有尝试通过不安全的<code>HTTP</code>连接访问文件服务的请求都会被强制升级到安全的<code>HTTPS</code>连接。</p>
<p>接下来，Nginx在端口8898上为 <code>localhost</code> 提供文件服务，文件的根目录是<code>/var/www/share_file</code>。它开启了自动索引，可以在浏览器中看到文件列表。同时，它关闭了精确的文件大小显示，并设置了显示本地的文件修改时间。</p>
<p>最后，在端口443上，<code>Nginx</code>为 <code>dl.mydomain.com</code> 提供了<code>HTTPS</code>服务。它使用了高安全等级的SSL协议和密码套件，提供了持久的SSL会话缓存，并关闭了SSL会话票证。此外，它还增加了一些安全相关的<code>HTTP</code>头，包括</p>
<ul>
<li><code>Strict-Transport-Security</code></li>
<li><code>Referrer-Policy</code>、<code>X-Content-Type-Options</code></li>
<li><code>X-XSS-Protection和Content-Security-Policy</code></li>
</ul>
<p>最后，它将所有的请求反向代理到了刚刚在端口8898上配置的文件服务。</p>
<p>这个配置提供了高度安全和灵活的Web文件服务。请记得将 <code>dl.mydomain.com</code> 替换为你自己的域名，将</p>
<blockquote>
<p> <code>/etc/nginx/ssl/dl.mydomain.com_ecc/dl.mydomain.com.cer</code><br> <code>/etc/nginx/ssl/dl.mydomain.com_ecc/dl.mydomain.com.key</code> </p>
</blockquote>
<p>替换为你的SSL证书和密钥的路径，将 <code>/var/www/share_file</code> 替换为你的文件目录。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在配置Nginx提供Web文件服务时，有两个重要的注意事项。</p>
<p>首先，不要将文件分享目录设置在 <code>/root</code> 目录下。<code>/root</code> 目录是系统管理员（<code>root</code>用户）的<code>home</code>目录，其默认权限设置通常不允许其他用户访问，这可能会导致Nginx无法读取文件。更安全的做法是在其他地方创建一个专门的目录，如 <code>/var/www</code> 或 <code>/srv</code>，用于存放你想要共享的文件。</p>
<p>其次，确认共享文件夹的权限正确。Nginx需要有权限读取文件目录及其内容，否则用户可能会遇到<code>403 Forbidden</code>错误。你可以使用 <code>chown</code> 和 <code>chmod</code> 命令来修改文件和目录的所有者和权限。例如，你可以将文件目录的所有者改为<code>Nginx</code>运行的用户，并确保该用户有读取文件的权限。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> <span class="token parameter variable">-R</span> /var/www/share_file
<span class="token function">chown</span> nginx:nginx /var/www/share_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>以上就是关于在服务器上使用Nginx开启Web文件服务的全部内容。希望你能通过本教程成功地搭建你的Web文件服务！</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>web服务</tag>
        <tag>反向代理</tag>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>免越狱钉钉远程打卡</title>
    <url>/2019/02/15/%E5%85%8D%E8%B6%8A%E7%8B%B1%E9%92%89%E9%92%89%E8%BF%9C%E7%A8%8B%E6%89%93%E5%8D%A1/</url>
    <content><![CDATA[<blockquote>
<p>无需越狱，解决 iOS 版钉钉远程打卡<br>折腾记录，备忘</p>
</blockquote>
<span id="more"></span>

<h1 id="准备动态库"><a href="#准备动态库" class="headerlink" title="准备动态库"></a>准备动态库</h1><p>准备好<code>DingTalkHelper.dylib</code>和<code>libsubstrate.dylib</code><br>备注：<code>DingTalkHelper.dylib</code>可以去 <a href="http://cydiaupdates.com/">http://cydiaupdates.com</a> 下载 <code>com.kevll.dingtalkhelper.deb</code> 用 <a href="patcherplus">patcherplus</a> 生成</p>
<h1 id="创建mobileprovision描述文件"><a href="#创建mobileprovision描述文件" class="headerlink" title="创建mobileprovision描述文件"></a>创建<code>mobileprovision</code>描述文件</h1><p>去 <a href="https://developer.apple.com/account">苹果开发者后台</a> 随意创建一个 <code># App ID</code>，并创建<code>iOS Provisioning Profiles</code>下载到电脑</p>
<h1 id="生成-entitlements-plist"><a href="#生成-entitlements-plist" class="headerlink" title="生成 entitlements.plist"></a>生成 <code>entitlements.plist</code></h1><pre class="line-numbers language-none"><code class="language-none">security cms -D -i path&#x2F;to&#x2F;downloaded.mobileprovision &gt; provision.plist
&#x2F;usr&#x2F;libexec&#x2F;PlistBuddy -x -c &#39;Print :Entitlements&#39; provision.plist &gt; entitlements.plist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h1 id="安装optool"><a href="#安装optool" class="headerlink" title="安装optool"></a>安装<code>optool</code></h1><p>去 <a href="https://github.com/alexzielenski/optool">https://github.com/alexzielenski/optool</a> 下载源代码</p>
<h2 id="下载代码"><a href="#下载代码" class="headerlink" title="下载代码"></a>下载代码</h2><pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;alexzielenski&#x2F;optool --depth&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="下载git依赖项目"><a href="#下载git依赖项目" class="headerlink" title="下载git依赖项目"></a>下载<code>git</code>依赖项目</h2><pre class="line-numbers language-none"><code class="language-none">git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="编译项目"><a href="#编译项目" class="headerlink" title="编译项目"></a>编译项目</h2><p>打开<code>Xcode</code>编译项目 或者运行命令</p>
<pre class="line-numbers language-none"><code class="language-none">xcodebuild -project optool.xcodeproj -configuration Release ARCHS&#x3D;&quot;x86_64&quot; build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="把生成的-optool可执行文件拷贝到bin-目录"><a href="#把生成的-optool可执行文件拷贝到bin-目录" class="headerlink" title="把生成的 optool可执行文件拷贝到bin 目录"></a>把生成的 <code>optool</code>可执行文件拷贝到<code>bin</code> 目录</h2><pre class="line-numbers language-none"><code class="language-none">cp optool &#x2F;usr&#x2F;local&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="编译报错解决"><a href="#编译报错解决" class="headerlink" title="编译报错解决"></a>编译报错解决</h2><p>去项目工程设置<code>Building Settings</code>修改<code>Base SDK</code>为最新<code>macOS</code></p>
<h1 id="下载砸了壳的-ipa"><a href="#下载砸了壳的-ipa" class="headerlink" title="下载砸了壳的 ipa"></a>下载砸了壳的 <code>ipa</code></h1><p>可以去某助手下载，或者从已越狱的 iPhone 上导出，iOS 11 上可使用 <code>CrackerXI</code>导出</p>
<h1 id="重签名-ipa"><a href="#重签名-ipa" class="headerlink" title="重签名 ipa"></a>重签名 ipa</h1><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><pre class="line-numbers language-none"><code class="language-none">unzip DingTalk.ipa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="插入动态库到钉钉二进制文件"><a href="#插入动态库到钉钉二进制文件" class="headerlink" title="插入动态库到钉钉二进制文件"></a>插入动态库到钉钉二进制文件</h2><pre class="line-numbers language-none"><code class="language-none">install_name_tool -change &#x2F;Library&#x2F;Frameworks&#x2F;CydiaSubstrate.framework&#x2F;CydiaSubstrate @loader_path&#x2F;libsubstrate.dylib DingTalkHelper.dylib
cp libsubstrate.dylib DingTalkHelper.dylib Payload&#x2F;DingTalk.app
删 watch 相关文件
optool install -c load -p &quot;@executable_path&#x2F;DingTalkHelper.dylib&quot; -t Payload&#x2F;DingTalk.app&#x2F;DingTalk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="删除旧签名信息"><a href="#删除旧签名信息" class="headerlink" title="删除旧签名信息"></a>删除旧签名信息</h2><pre class="line-numbers language-none"><code class="language-none">rm -rf Payload&#x2F;MyApp.app&#x2F;_CodeSignature<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="替换旧描述文件"><a href="#替换旧描述文件" class="headerlink" title="替换旧描述文件"></a>替换旧描述文件</h2><pre class="line-numbers language-none"><code class="language-none">cp path&#x2F;to&#x2F;MyProfile.mobileprovision Payload&#x2F;MyApp.app&#x2F;embedded.mobileprovision<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="重签名二进制文件和动态库"><a href="#重签名二进制文件和动态库" class="headerlink" title="重签名二进制文件和动态库"></a>重签名二进制文件和动态库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">"iPhone Developer: your certificate"</span> <span class="token parameter variable">--entitlements</span> entitlements.plist Payload/DingTalk.app/Frameworks/*

codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">"iPhone Developer: your certificate"</span> <span class="token parameter variable">--entitlements</span> entitlements.plist Payload/DingTalk.app/libsubstrate.dylib

codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">"iPhone Developer: your certificate"</span> <span class="token parameter variable">--entitlements</span> entitlements.plist Payload/DingTalk.app/DingTalkHelper.dylib

codesign <span class="token parameter variable">-f</span> <span class="token parameter variable">-s</span> <span class="token string">"iPhone Developer: your certificate"</span> <span class="token parameter variable">--entitlements</span> entitlements.plist Payload/DingTalk.app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><pre class="line-numbers language-none"><code class="language-none">zip -qr DingTalk-resigned.ipa Payload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>PS ： <code>security find-identity -p codesigning</code> 查看可用证书</p>
<h1 id="运行ipa"><a href="#运行ipa" class="headerlink" title="运行ipa"></a>运行<code>ipa</code></h1><p>新建 <code>MonkeyDev</code>app 项目， 把生成的 <code>DingTalk-resigned.ipa</code> 放进 <code>TargetApp</code>，修改 <code>Bundle identifier</code> 为 <code>com.laiwang.DingTalk</code> ，修改  <code>Bundle display name</code> 为 <code>钉钉</code>，运行安装到手机即可。</p>
<h1 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h1><p>打开 钉钉 – 设置 – 钉钉小助手，低调使用。</p>
]]></content>
      <categories>
        <category>工具教程</category>
      </categories>
      <tags>
        <tag>免越狱</tag>
        <tag>钉钉远程打卡</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python脚本半自动化iOS企业版包更新</title>
    <url>/2017/03/25/%E4%BD%BF%E7%94%A8Python%E8%84%9A%E6%9C%AC%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96iOS%E4%BC%81%E4%B8%9A%E7%89%88%E5%8C%85%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我之前一篇文章里 <a href="https://wangwanjie.github.io/2017/01/11/iOS%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E5%BA%94%E7%94%A8%E5%88%86%E5%8F%91/">iOS企业内部应用分发</a> 讲述了 iOS 企业帐号打包的 <code>ipa</code> 分发，但是如果每次 <code>ipa</code> 更新，重新上传 <code>*.ipa</code> 后还要手动编辑 <code>*.plist</code> 的新的 <code>ipa</code> 的 <code>url</code> 和包的相关信息，这就和打包一样（使用 <a href="https://github.com/fastlane/fastlane">fastlane</a>），是毫无技术含量但是花时间的事情，作为一个爱偷懒的人，我总是想利用自身所学或者一些工具来代替我做一些重复又没技术含量的事，在本文涉及的这件事里，显然，脚本要派上用场，最终选用了 <code>Python</code> 而没有用 <code>Bash</code> —- 从 <code>ipa</code> 读取相关信息并写入到目的 <code>plist</code>。<code>Python</code> 只是业余，如您有建议或改进，欢迎留言评论指出，感激不尽！</p>
<span id="more"></span>

<h2 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>
<span class="token comment">#coding:utf-8</span>
 
<span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> plistlib<span class="token punctuation">,</span> sys<span class="token punctuation">,</span> re<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">,</span> io

sys<span class="token punctuation">.</span>stdout <span class="token operator">=</span> io<span class="token punctuation">.</span>TextIOWrapper<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

<span class="token keyword">global</span> plist_root <span class="token comment"># Info.plist</span>
<span class="token keyword">global</span> ipa_name <span class="token comment"># ipa 名称</span>

<span class="token keyword">def</span> <span class="token function">analyze_ipa_with_plistlib</span><span class="token punctuation">(</span>ipa_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> plist_root
    ipa_file <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>ipa_path<span class="token punctuation">)</span>
    plist_path <span class="token operator">=</span> find_plist_path<span class="token punctuation">(</span>ipa_file<span class="token punctuation">)</span>
    plist_data <span class="token operator">=</span> ipa_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span>plist_path<span class="token punctuation">)</span>
    plist_root <span class="token operator">=</span> plistlib<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>plist_data<span class="token punctuation">)</span>
    print_ipa_info <span class="token punctuation">(</span>plist_root<span class="token punctuation">)</span>
 
<span class="token keyword">def</span> <span class="token function">find_plist_path</span><span class="token punctuation">(</span>zip_file<span class="token punctuation">)</span><span class="token punctuation">:</span>
    name_list <span class="token operator">=</span> zip_file<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'Payload/[^/]*.app/Info.plist'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> path <span class="token keyword">in</span> name_list<span class="token punctuation">:</span>
        m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
        <span class="token keyword">if</span> m <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> m<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">print_ipa_info</span><span class="token punctuation">(</span>plist_root<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token string">'源 ipa 包信息:'</span><span class="token punctuation">)</span>

    CFBundleDisplayName <span class="token operator">=</span> <span class="token string">''</span>
    isCFBundleDisplayNameExist <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        CFBundleDisplayName <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleDisplayName'</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'CFBundleDisplayName 不存在，将获取 CFBundleName'</span><span class="token punctuation">)</span>
        isCFBundleDisplayNameExist <span class="token operator">=</span> <span class="token boolean">False</span>

    
    <span class="token keyword">if</span> isCFBundleDisplayNameExist <span class="token operator">!=</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span> 
            CFBundleDisplayName <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleName'</span><span class="token punctuation">]</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'CFBundleName 不存在'</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Display Name: %s'</span> <span class="token operator">%</span> CFBundleDisplayName<span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Bundle Identifier: %s'</span> <span class="token operator">%</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleIdentifier'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'Version: %s'</span> <span class="token operator">%</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleShortVersionString'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>
 
<span class="token keyword">def</span> <span class="token function">print_plist_info</span><span class="token punctuation">(</span>plist_path<span class="token punctuation">,</span> beforeWritten<span class="token punctuation">)</span><span class="token punctuation">:</span>
  
    <span class="token builtin">dict</span> <span class="token operator">=</span> plistlib<span class="token punctuation">.</span>readPlist<span class="token punctuation">(</span>plist_path<span class="token punctuation">)</span>

    metadata <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"metadata"</span><span class="token punctuation">]</span>
    softwarePackageDict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"assets"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    state <span class="token operator">=</span> <span class="token string">"前"</span> <span class="token keyword">if</span> beforeWritten <span class="token keyword">else</span> <span class="token string">"后"</span>

    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'写入'</span> <span class="token operator">+</span> state <span class="token operator">+</span><span class="token string">'的plist信息'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'bundle-identifier: %s'</span> <span class="token operator">%</span> metadata<span class="token punctuation">[</span><span class="token string">'bundle-identifier'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'bundle-version: %s'</span> <span class="token operator">%</span> metadata<span class="token punctuation">[</span><span class="token string">'bundle-version'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'title: %s'</span> <span class="token operator">%</span> metadata<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'ipa url: %s'</span> <span class="token operator">%</span> softwarePackageDict<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">writeToPlist</span><span class="token punctuation">(</span>plist_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> plist_root
    <span class="token comment"># 读取app.plist</span>
    <span class="token builtin">dict</span> <span class="token operator">=</span> plistlib<span class="token punctuation">.</span>readPlist<span class="token punctuation">(</span>plist_path<span class="token punctuation">)</span>

    CFBundleDisplayName <span class="token operator">=</span> <span class="token string">''</span>
    isCFBundleDisplayNameExist <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        CFBundleDisplayName <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleDisplayName'</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'CFBundleDisplayName 不存在，将获取 CFBundleName'</span><span class="token punctuation">)</span>
        isCFBundleDisplayNameExist <span class="token operator">=</span> <span class="token boolean">False</span>

    
    <span class="token keyword">if</span> isCFBundleDisplayNameExist <span class="token operator">!=</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span> 
            CFBundleDisplayName <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleName'</span><span class="token punctuation">]</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'CFBundleName 不存在'</span><span class="token punctuation">)</span>

    <span class="token comment"># 更改包信息</span>
    metadata <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"metadata"</span><span class="token punctuation">]</span>
    metadata<span class="token punctuation">[</span><span class="token string">'bundle-identifier'</span><span class="token punctuation">]</span> <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleIdentifier'</span><span class="token punctuation">]</span>
    metadata<span class="token punctuation">[</span><span class="token string">'bundle-version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> plist_root<span class="token punctuation">[</span><span class="token string">'CFBundleShortVersionString'</span><span class="token punctuation">]</span>
    metadata<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> CFBundleDisplayName
   
    <span class="token comment"># 更改ipa地址</span>
    softwarePackageDict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">"items"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"assets"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment"># 生成新的 ipa 路径</span>
    <span class="token keyword">global</span> ipa_name
    url <span class="token operator">=</span> softwarePackageDict<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>
    urlComArr <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
    <span class="token comment"># 删除文件名</span>
    urlComArr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 删除最后一个</span>
    urlComArr<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ipa_name<span class="token punctuation">)</span> <span class="token comment"># 拼接新文件名及扩展名</span>
    newUrlComArrStr <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>urlComArr<span class="token punctuation">)</span> <span class="token comment"># Array to String</span>
    softwarePackageDict<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token operator">=</span> newUrlComArrStr

    plistlib<span class="token punctuation">.</span>writePlist<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">,</span> plist_path<span class="token punctuation">)</span> <span class="token comment"># 写入plist</span>
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'参数错误，用法: python3 config.py /path/to/ipa /path/to/plist'</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">global</span> ipa_name

    ipa_path <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    analyze_ipa_with_plistlib<span class="token punctuation">(</span>ipa_path<span class="token punctuation">)</span>
    ipa_name <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>ipa_path<span class="token punctuation">)</span>
    plist_path <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    print_plist_info<span class="token punctuation">(</span>plist_path<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    writeToPlist <span class="token punctuation">(</span>plist_path<span class="token punctuation">)</span>
    print_plist_info<span class="token punctuation">(</span>plist_path<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>每次新打包后，需要更新 <code>plist</code> 文件相关信息，直接在服务器或者本地运行该脚本便可更新 <code>plist</code> 信息，然后覆盖服务器上的同名文件即可（亲手实践过 <code>ipa</code> 分发就没困惑），但运行该脚本的系统应该安装了 <code>Python3</code>，否则无法运行。用法如下，选你的终端执行：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">python3 config.py appName.ipa路径 app.plist路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      <categories>
        <category>Python3</category>
      </categories>
      <tags>
        <tag>iOS打包</tag>
        <tag>iOS企业应用更新</tag>
        <tag>Python3 读写 plist</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx将多个服务代理到同一域名</title>
    <url>/2022/10/13/%E4%BD%BF%E7%94%A8%20Nginx%20%E5%B0%86%E5%A4%9A%E4%B8%AA%E6%9C%8D%E5%8A%A1%E4%BB%A3%E7%90%86%E5%88%B0%E5%90%8C%E4%B8%80%E5%9F%9F%E5%90%8D/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前言<br>在现代的web开发中，我们通常会遇到一个很常见的场景，那就是需要在同一台服务器上运行多个服务。例如，你可能有一个API服务运行在3000端口，一个管理面板运行在4000端口，还有一个静态资源服务器运行在5000端口。这种情况下，一个非常实用的解决方案就是使用Nginx的反向代理功能，将这些服务都代理到同一个域名下的不同路径。</p>
<span id="more"></span>

<h2 id="场景需求"><a href="#场景需求" class="headerlink" title="场景需求"></a>场景需求</h2><p>假设我们有以下三个服务：</p>
<ul>
<li>API服务：<a href="http://localhost:3000/">http://localhost:3000</a></li>
<li>管理面板：<a href="http://localhost:4000/">http://localhost:4000</a></li>
<li>静态资源服务器：<a href="http://localhost:5000/">http://localhost:5000</a></li>
</ul>
<p>我们希望用户能通过如下方式访问这些服务：</p>
<ul>
<li>API服务：<a href="https://www.mydomain.com/api">https://www.mydomain.com/api</a></li>
<li>管理面板：<a href="https://www.mydomain.com/admin">https://www.mydomain.com/admin</a></li>
<li>静态资源服务器：<a href="https://www.mydomain.com/static">https://www.mydomain.com/static</a></li>
</ul>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用Nginx的反向代理功能，我们可以很容易地实现这个需求。以下是一个基本的Nginx配置文件示例：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> www.mydomain.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> www.mydomain.com</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/ssl/www.mydomain.com.crt</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/ssl/www.mydomain.com.key</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /api/</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:3000/</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token directive"><span class="token keyword">location</span> /admin/</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:4000/</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token directive"><span class="token keyword">location</span> /static/</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:5000/</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个配置中，我们首先将所有HTTP请求重定向到HTTPS。然后，我们针对每个服务设置了一个location块，将请求代理到相应的本地端口。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>请确保你已经为你的域名配置了SSL证书，否则用户可能会在访问你的服务时收到安全警告。</li>
<li>在配置反向代理时，一定要在目标URL后面添加斜杠（&#x2F;），否则Nginx可能无法正确地转发路径和查询参数。</li>
<li>为了提高服务的可用性和稳定性，你可以考虑为每个location块配置错误页面和重试策略。</li>
<li>记得定期更新和维护你的Nginx和服务，以防止安全漏洞。</li>
</ul>
<p>通过以上的配置和注意事项，我们就可以使用Nginx将多个服务代理到同一域名下，提供更加整洁和专业的服务接口。不仅如此，这种方式还能增强服务的安全性，提高用户体验。总的来说，使用Nginx作为反向代理是一种非常高效和实用的方法，值得在实际的开发和运维中应用。</p>
<h2 id="静态资源路径问题"><a href="#静态资源路径问题" class="headerlink" title="静态资源路径问题"></a>静态资源路径问题</h2><p>当我们使用Nginx将多个服务代理到同一域名下时，有可能会遇到静态资源路径错误的问题。这是因为原服务可能会使用相对路径来引用静态资源，但在反向代理后，这些相对路径可能就无法正确地指向资源了。</p>
<p>例如，如果你的管理面板在 &#x2F;admin&#x2F;index.html 中引用了一个CSS文件： <br/><br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code>。 <br/><br>在没有反向代理的情况下，浏览器会去  <br/><br><code>http://localhost:4000/styles.css </code> <br/><br>获取这个文件。但是在反向代理后，浏览器会去 <br/><br><code>https://www.mydomain.com/styles.css</code>  <br/><br>获取文件，而不是我们预期的  <br/><br><code>https://www.mydomain.com/admin/styles.css</code>。</p>
<p>为了解决这个问题，我们有以下两种常见的解决办法：</p>
<h3 id="修改服务中的路径引用"><a href="#修改服务中的路径引用" class="headerlink" title="修改服务中的路径引用"></a>修改服务中的路径引用</h3><p>修改服务中的路径引用：最直接的办法就是修改你的服务，让它使用绝对路径或正确的相对路径来引用静态资源。<br>这种办法的好处是不需要额外的配置，但可能需要修改大量的代码。</p>
<h3 id="使用Nginx的sub-filter指令"><a href="#使用Nginx的sub-filter指令" class="headerlink" title="使用Nginx的sub_filter指令"></a>使用Nginx的sub_filter指令</h3><p>使用Nginx的sub_filter指令：Nginx提供了一个叫做sub_filter的指令，可以用来修改HTTP响应中的内容。我们可以利用这个功能，将所有的静态资源路径替换为正确的路径。例如：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /admin/</span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:4000/</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sub_filter</span> <span class="token string">'href="styles.css"'</span> <span class="token string">'href="/admin/styles.css"'</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sub_filter_once</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="修改静态资源的基路径"><a href="#修改静态资源的基路径" class="headerlink" title="修改静态资源的基路径"></a>修改静态资源的基路径</h3><p>如果你的应用支持设置静态资源的基路径，那么这将是一个很好的解决方案。例如，在HTML文档中，你可以使用<base>标签来设置相对URL的基础URL。或者在某些前端框架（如React和Vue）中，你可以在配置文件中设置公共路径。然后，你就可以按照这个新的基路径来引用静态资源。</p>
<h3 id="使用URL重写"><a href="#使用URL重写" class="headerlink" title="使用URL重写"></a>使用URL重写</h3><p>Nginx的rewrite指令可以修改请求的URI，并根据需要进行重定向。我们可以利用这个功能，将错误的资源请求重写到正确的路径。例如，如果你知道所有的.css文件都在&#x2F;static&#x2F;css&#x2F;目录下，你可以使用以下配置将所有的.css请求重定向到这个目录：</p>
<p>这种办法的好处是不需要修改服务的代码，但可能需要一些复杂的配置，并且可能不适用于所有的情况。</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~* \.css$</span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$ /static/css/<span class="token variable">$1</span> break</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的配置，我们就实现了将多个服务代理到同一域名下的不同路径。这样，用户可以通过一个统一的域名访问我们的所有服务，而无需记住每个服务的端口号。这不仅提高了用户的使用体验，还大大提升了我们服务的安全性和专业性。</p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 dumpdecrypted 砸壳</title>
    <url>/2017/02/08/%E5%88%A9%E7%94%A8dumpdecrypted%E7%A0%B8%E5%A3%B3/</url>
    <content><![CDATA[<p>1、编译生成</p>
<p><code>dumpdecrypted.dylib</code></p>
<p>2、给生成的 <code>dumpdecrypted.dylib</code> 签名</p>
<span id="more"></span>

<p>3、ssh到手机，<code>ps aux | grep</code> 目标APP查看APP安装目录</p>
<p>4、（可忽略这步）<code>cycript -p</code> 目标 APP，执行 </p>
<pre class="line-numbers language-objectivec" data-language="objectivec"><code class="language-objectivec"><span class="token punctuation">[</span><span class="token punctuation">[</span>NSFileManager defaultManager<span class="token punctuation">]</span> URLsForDirectory<span class="token punctuation">:</span>NSDocumentDirectory inDomains<span class="token punctuation">:</span>NSUserDomainMask<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> 查看沙盒目录</p>
<p>5、将 <code>dumpdecrypted.dylib </code>拷贝 <code>/var/tmp</code>，进入 <code>/var/tmp</code></p>
<p>6、将 <code>dumpdecrypted.dylib</code> 拷贝到沙盒目录，进入沙盒目录，执行</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">DYLD_INSERT_LIBRARIES&#x3D;dumpdecrypted.dylib &#x2F;var&#x2F;containers&#x2F;Bundle&#x2F;Application&#x2F;0B8A6E0F-9D64-4EF4-97D2-D3A508FC3574&#x2F;APP.app&#x2F;APP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>7、得到目标 <code>APP.decrypted </code>就是二进制文件</p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>iOS安全</tag>
        <tag>破解</tag>
      </tags>
  </entry>
  <entry>
    <title>动态加载javascript</title>
    <url>/2017/03/09/%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDjavascript/</url>
    <content><![CDATA[<h2 id="使用以下函数"><a href="#使用以下函数" class="headerlink" title="使用以下函数"></a>使用以下函数</h2><span id="more"></span>


<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">var dynamicLoading &#x3D; &#123;
    meta : function()&#123;
        document.write(&#39;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&#39;);
        document.write(&#39;&lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;&#39;);
        document.write(&#39;&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1, maximum-scale&#x3D;1, minimum-scale&#x3D;1, shrink-to-fit&#x3D;no&quot;&gt;&#39;);
    &#125;,
    css: function(path)&#123;
        if(!path || path.length &#x3D;&#x3D;&#x3D; 0)&#123;
            throw new Error(&#39;argument &quot;path&quot; is required!&#39;);
        &#125;
        document.write(&#39;&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&#39; + path + &#39;&quot;&gt;&#39;);
    &#125;,
    js: function(path, charset)&#123;
        if(!path || path.length &#x3D;&#x3D;&#x3D; 0)&#123;
            throw new Error(&#39;argument &quot;path&quot; is required!&#39;);
        &#125;
        document.write(&#39;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#39; + path + &#39;&quot;&gt;&lt;&#x2F;script&gt;&#39;);
    &#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F; 另外一个独立的动态加载js的函数
function loadJs(jsurl, head, callback) &#123;
	var script &#x3D; document.createElement(script);
	script.setAttribute(&quot;type&quot;, &quot;text&#x2F;javascript&quot;);

	if(callback) &#123;
		if(script.readyState) &#123; &#x2F;&#x2F;IE
			script.onreadystatechange &#x3D; function() &#123;
				if(script.readyState &#x3D;&#x3D; &quot;loaded&quot; ||
					script.readyState &#x3D;&#x3D; &quot;complete&quot;) &#123;
					script.onreadystatechange &#x3D; null;
					callback();
				&#125;
			&#125;;
		&#125; else &#123; &#x2F;&#x2F;Others
			script.onload &#x3D; function() &#123;
				callback();
			&#125;;
		&#125;
	&#125;
	script.setAttribute(&quot;src&quot;, jsurl);

	if(head)
		document.getElementsByTagName(head)[0].appendChild(script);
	else &#123;
		document.body.appendChild(script);
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>原生 JavaScript 判断 DOM 是否包含某个 class</title>
    <url>/2017/03/23/%E5%8E%9F%E7%94%9F-JavaScript-%E5%88%A4%E6%96%AD-DOM-%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E6%9F%90%E4%B8%AA-class/</url>
    <content><![CDATA[<h2 id="使用-classlist"><a href="#使用-classlist" class="headerlink" title="使用 classlist"></a>使用 <code>classlist</code></h2><span id="more"></span>

<pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">if (document.body.classList.contains(&#39;thatClass&#39;)) &#123;
    &#x2F;&#x2F; do some stuff
&#125;
Other uses of classList:

document.body.classList.add(&#39;thisClass&#39;);
&#x2F;&#x2F; $(&#39;body&#39;).addClass(&#39;thisClass&#39;);

document.body.classList.remove(&#39;thatClass&#39;);
&#x2F;&#x2F; $(&#39;body&#39;).removeClass(&#39;thatClass&#39;);

document.body.classList.toggle(&#39;anotherClass&#39;);
&#x2F;&#x2F; $(&#39;body&#39;).toggleClass(&#39;anotherClass&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="简单封装一下"><a href="#简单封装一下" class="headerlink" title="简单封装一下"></a>简单封装一下</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function hasClass(el, cn)&#123;
    var classes &#x3D; el.classList;
    for(var j &#x3D; 0; j &lt; classes.length; j++)&#123;
        if(classes[j] &#x3D;&#x3D; cn)&#123;
            return true;
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="支持IE8"><a href="#支持IE8" class="headerlink" title="支持IE8"></a>支持IE8</h2><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">function hasClass(el, cls) &#123;
    var regexp &#x3D; new RegExp(&#39;(\\s|^)&#39; + cls + &#39;(\\s|$)&#39;),
        target &#x3D; (typeof el.className &#x3D;&#x3D;&#x3D; &#39;undefined&#39;) ? window.event.srcElement : el;
    return target.className.match(regexp);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><ul>
<li>Chrome 8.0</li>
<li>Firefox 3.6</li>
<li>IE 10</li>
<li>Opera 11.50</li>
<li>Safari 5.1</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
        <tag>DOM Class</tag>
      </tags>
  </entry>
  <entry>
    <title>在已有 OC 项目无痛集成 React Native</title>
    <url>/2018/09/03/%E5%9C%A8%E5%B7%B2%E6%9C%89-OC-%E9%A1%B9%E7%9B%AE%E6%97%A0%E7%97%9B%E9%9B%86%E6%88%90-React-Native/</url>
    <content><![CDATA[<h1 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h1><ul>
<li>对 <code>Cocoapods</code> 使用熟悉</li>
<li>熟悉 Mac 基本操作</li>
<li>解决问题的基本功</li>
</ul>
<h1 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h1><p>这是官方给出的教程，<a href="https://reactnative.cn/docs/integration-with-existing-apps/">集成到现有原生应用</a>，按照这个集成的跑起来没啥问题，但是后期等你用了一些组件，或原生或 <code>RN</code> 的，比如自定义 <code>UIView</code> 给 <code>RN</code> 用，<code>RN</code> 里用的第三方的 <code>component</code> 调用了原生的 <code>API</code>，官方的这些默认的 <code>pod</code> 库就是缺少一些的，跑项目会出一些莫名其妙的问题，我在用了<code>react-navigation</code>后各种运行时红屏报错问题，错误提示也看不出个所以然来，折腾好久才解决问题，这里我将直接记录主要过程和注意点，以备不时之需。</p>
<span id="more"></span>

<h1 id="踩坑后的做法"><a href="#踩坑后的做法" class="headerlink" title="踩坑后的做法"></a>踩坑后的做法</h1><ul>
<li>根据官方给出的<a href="https://reactnative.cn/docs/getting-started/">搭建开发环境</a>配置好环境</li>
<li>这时已经装好了<code>react-native-cli</code>，随便<code>init</code>一个新项目出来</li>
<li>创建一个文件夹，准备用来存放集成 <code>RN</code> 的项目，比如 <code>ProjectIntegrateRN</code></li>
<li>拷贝<code>app.json</code>、<code>node_modules</code>、<code>package.json</code> 文件\文件夹 到<code>ProjectIntegrateRN </code>文件夹</li>
<li>拷贝原来的 <code>OC\Swift</code> 项目至 <code>ProjectIntegrateRN </code>文件夹</li>
</ul>
<p><strong>这里假设项目已经使用了 <code>Cocoapods</code> 管理第三方库，进入原生<code>OC\Swift</code>项目根目录</strong>，执行：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  puma [RN-integration] vim Podfile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>加入<code>React Native</code>的依赖：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">def rnpods
    pod &#39;React&#39;, :path &#x3D;&gt; &quot;..&#x2F;node_modules&#x2F;react-native&quot;, :subspecs &#x3D;&gt; [
      &quot;Core&quot;,
      &quot;ART&quot;,
      &quot;RCTActionSheet&quot;,
      &quot;RCTAnimation&quot;, # FlatList和原生动画功能需要此模块
      &quot;RCTCameraRoll&quot;,
      &quot;RCTGeolocation&quot;,
      &quot;RCTImage&quot;,
      &quot;RCTNetwork&quot;,
      &quot;RCTText&quot;,
      &quot;RCTVibration&quot;,
      &quot;RCTWebSocket&quot;, # 调试功能需要此模块
      &quot;DevSupport&quot;, # 如果RN版本 &gt;&#x3D; 0.43，则需要加入此行才能开启开发者菜单
      &quot;CxxBridge&quot;, # 如果RN版本 &gt;&#x3D; 0.47则加入此行
      # 在这里继续添加你所需要的其他RN模块
        #&#39;RCTAdSupport&#39;,
       &#39;RCTPushNotification&#39;,
       &#39;RCTSettings&#39;,
       &#39;RCTLinkingIOS&#39;]
        
  # 如果你的RN版本 &gt;&#x3D; 0.42.0，则加入下面这行
  pod &#39;yoga&#39;, :path &#x3D;&gt; &quot;..&#x2F;node_modules&#x2F;react-native&#x2F;ReactCommon&#x2F;yoga&quot;

  # 如果RN版本 &gt;&#x3D; 0.45则加入下面三个第三方编译依赖
  pod &#39;DoubleConversion&#39;, :podspec &#x3D;&gt; &quot;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;DoubleConversion.podspec&quot;
  pod &#39;Folly&#39;, :podspec &#x3D;&gt; &quot;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;Folly.podspec&quot;
  pod &#39;glog&#39;, :podspec &#x3D;&gt; &quot;..&#x2F;node_modules&#x2F;react-native&#x2F;third-party-podspecs&#x2F;glog.podspec&quot;
  
  pod &#39;RNVectorIcons&#39;, :path &#x3D;&gt; &#39;..&#x2F;node_modules&#x2F;react-native-vector-icons&#39;
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><p>把<code>rnpods </code>加入到 <code>Target &quot;your_scheme&quot; </code> ，<code>pod update</code>或者<code>pod install</code>等结束，不出意外的话应该能跑了.</p>
<h1 id="更改默认-node-端口"><a href="#更改默认-node-端口" class="headerlink" title="更改默认 node 端口"></a>更改默认 node 端口</h1><p><code>RN</code>项目目录执行：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  puma [RN-integration] mvim node_modules&#x2F;react-native&#x2F;local-cli&#x2F;server&#x2F;server.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>CTRL+F</code>查找 <code>8081</code> 替换为你想要的端口，比如换成 <code>6666</code> 。</p>
<p>原生代码里记得更改，比如 <code>OC</code> 项目里这样改：</p>
<pre class="line-numbers language-Objective-C" data-language="Objective-C"><code class="language-Objective-C">NSURL *jsCodeLocation;

&#x2F;&#x2F; node
jsCodeLocation &#x3D; [NSURL URLWithString:@&quot;http:&#x2F;&#x2F;localhost:6666&#x2F;src&#x2F;index.bundle?platform&#x3D;ios&quot;];

&#x2F;&#x2F; 如果打包或真机，使用下面这个
&#x2F;&#x2F;    jsCodeLocation &#x3D; [NSURL URLWithString:[[NSBundle mainBundle] pathForResource:@&quot;index.jsbundle&quot; ofType:nil]];

_rnView &#x3D; [[RCTRootView alloc] initWithBundleURL:jsCodeLocation
                                      moduleName:@&quot;DongKe&quot;
                               initialProperties:
                                   @&#123;
                                       @&quot;enterpriseID&quot;: self._id,
                                       @&quot;source&quot;: @(self.source)
                                   &#125;
                                   launchOptions:nil];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>React Native</tag>
        <tag>Hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>如何让nginx服务和ocserv共用443端口</title>
    <url>/2023/05/13/%E5%A6%82%E4%BD%95%E8%AE%A9nginx%E6%9C%8D%E5%8A%A1%E5%92%8Cocserv%E5%85%B1%E7%94%A8443%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="前言与需求背景"><a href="#前言与需求背景" class="headerlink" title="前言与需求背景"></a>前言与需求背景</h2><p>在许多应用中，我们可能需要让多个服务共享同一端口。例如，你可能有一个Web服务器（如Nginx）和一个VPN服务器（如OpenConnect VPN，简称ocserv），你希望它们都使用443端口。这样做的好处是可以提高网络性能，因为操作系统通常会为443端口提供更高的处理优先级，从而得到更快的响应。此外，这种设置也可以简化防火墙的配置，因为只需要开放一个端口。</p>
<p>然而，实现这种配置并不简单。首先，Nginx和ocserv都需要独占443端口，因此不能直接将它们绑定到同一端口。其次，尽管Nginx可以使用其stream模块来实现TCP级别的反向代理，但这需要额外的配置，并且可能导致一些问题。例如，ocserv需要了解客户端的真实IP，但在Nginx的反向代理后，ocserv只能看到Nginx服务器的IP。</p>
<span id="more"></span>

<h2 id="为什么选择HAProxy"><a href="#为什么选择HAProxy" class="headerlink" title="为什么选择HAProxy"></a>为什么选择HAProxy</h2><p>为了解决这个问题，我们可以使用HAProxy作为负载均衡器，将流量分发到Nginx和ocserv。HAProxy是一个高性能的负载均衡器和反向代理服务器，可以处理HTTP和TCP协议。相比Nginx，HAProxy提供了更强大和灵活的负载均衡功能，包括基于内容的路由，健康检查，连接持久化等。</p>
<p>更重要的是，HAProxy支持SNI（Server Name Indication），这是一个TLS扩展，允许客户端在握手过程中指定请求的主机名。我们可以利用SNI，将基于不同域名的请求分发到不同的服务器，从而实现共享443端口。</p>
<h2 id="实践方案"><a href="#实践方案" class="headerlink" title="实践方案"></a>实践方案</h2><p>首先，我们需要修改ocserv的配置，开启代理协议支持，将监听地址设为本地地址。编辑ocserv.conf文件，添加以下两行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">listen-proxy-proto <span class="token operator">=</span> <span class="token boolean">true</span>
listen-host <span class="token operator">=</span> <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后，我们需要配置HAProxy，将基于不同域名的请求转发到不同的服务器。以下是一个示例配置，假设你的服务器的IP地址为<code>172.19.17.203</code>：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">frontend</span> https
   bind 172.19.17.203:443
   mode tcp
   tcp-request inspect-delay <span class="token number">5s</span>
   tcp-request content accept if</span> <span class="token punctuation">&#123;</span> req_ssl_hello_type 1 <span class="token punctuation">&#125;</span>

   <span class="token directive"><span class="token keyword">use_backend</span> ocserv if</span> <span class="token punctuation">&#123;</span> req_ssl_sni -i vpn.domain.com <span class="token punctuation">&#125;</span>
   <span class="token directive"><span class="token keyword">use_backend</span> nginx if</span> <span class="token punctuation">&#123;</span> req_ssl_sni -i your.servicedomain.com <span class="token punctuation">&#125;</span>
   default_backend ocserv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个配置的含义是：如果客户端的SNI匹配vpn.domain.com，则将请求转发到ocserv；如果SNI匹配your.servicedomain.com，则将请求转发到Nginx；否则，默认将请求转发到ocserv。</p>
<p>接下来，我们配置HAProxy的后端。对于ocserv，我们将其设置为监听在127.0.0.1:443，并启用代理协议：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">backend ocserv
   mode tcp
   option ssl-hello-chk
   server ocserv 127.0.0.1:443 send-proxy-v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于Nginx，我们将其设置为监听在127.0.0.2:443：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx">backend nginx
   mode tcp
   option ssl-hello-chk
   server nginx 127.0.0.2:443 check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后，我们需要修改Nginx的配置，将其监听地址改为127.0.0.2。以下是一个示例配置：</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> 127.0.0.2:443 ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> your.servicedomain.com</span><span class="token punctuation">;</span>

    <span class="token comment"># 其他配置项...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，当客户端发送请求时，HAProxy会根据SNI将请求路由到正确的服务器，而不管它们是否共享443端口。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在实施此方案时，需要注意以下几点：</p>
<ul>
<li>确保你的客户端支持SNI。大多数现代浏览器和操作系统都支持SNI，但一些较旧的系统可能不支持。</li>
<li>在使用HAProxy时，需要确保它可以正确识别并处理TLS流量。在上述配置中，我们使用了mode tcp和tcp-request content accept if { req_ssl_hello_type 1 }来实现这一点。</li>
<li>HAProxy的配置可以根据你的具体需求进行调整。例如，你可以添加更多的后端服务器，或者根据其他条件（如IP地址或请求路径）进行路由。</li>
</ul>
<p>总的来说，通过使用HAProxy，我们可以实现在同一服务器上共享443端口的需求，同时避免了Nginx的配置复杂性和ocserv的限制。</p>
<h2 id="开箱即用"><a href="#开箱即用" class="headerlink" title="开箱即用"></a>开箱即用</h2><p>最后给出开箱即用的配置</p>
<h3 id="haproxy-cfg-配置"><a href="#haproxy-cfg-配置" class="headerlink" title="haproxy.cfg 配置"></a>haproxy.cfg 配置</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">global</span>
    log 127.0.0.1 local2
    chroot /var/lib/haproxy
    pidfile /var/run/haproxy.pid
    maxconn <span class="token number">4000</span>
    user haproxy
    group haproxy
    daemon

defaults
    mode http
    log global
    option dontlognull
    timeout connect         <span class="token number">10s</span>
    timeout client          <span class="token number">1m</span>
    timeout server          <span class="token number">1m</span>

frontend https
   <span class="token comment"># ip addr show eth0 | grep inet | awk '&#123; print $2; &#125;' | sed 's/\/.*$//' </span>
   bind 172.19.17.203:443
<span class="token comment"># bind fe80::250:56ff:fe0d:ae9e:443</span>
   mode tcp
   tcp-request inspect-delay <span class="token number">5s</span>
   tcp-request content accept if</span> <span class="token punctuation">&#123;</span> req_ssl_hello_type 1 <span class="token punctuation">&#125;</span>

   <span class="token directive"><span class="token keyword">use_backend</span> ocserv if</span> <span class="token punctuation">&#123;</span> req_ssl_sni -i vpn.domain.com <span class="token punctuation">&#125;</span>
   <span class="token directive"><span class="token keyword">use_backend</span> nginx if</span> <span class="token punctuation">&#123;</span> req_ssl_sni -i your.servicedomain.com <span class="token punctuation">&#125;</span>

   default_backend ocserv

backend ocserv
   mode tcp
   option ssl-hello-chk
   <span class="token comment"># pass requests to 127.0.0.1:443. Proxy protocol (v2) header is required by ocserv.</span>
   server ocserv 127.0.0.1:443 send-proxy-v2
<span class="token comment"># server ocserv6 [::1]:443 send-proxy-v2</span>

backend nginx
   mode tcp
   option ssl-hello-chk
   server nginx 127.0.0.2:443 check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="your-servicedomain-com-conf-配置"><a href="#your-servicedomain-com-conf-配置" class="headerlink" title="your.servicedomain.com.conf 配置"></a>your.servicedomain.com.conf 配置</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> your.servicedomain.com</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">listen</span> 127.0.0.2:443 ssl</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span> your.servicedomain.com</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/ssl/your.servicedomain.com_ecc/your.servicedomain.com.cer</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/ssl/your.servicedomain.com_ecc/your.servicedomain.com.key</span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_ciphers</span> <span class="token string">'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384'</span></span><span class="token punctuation">;</span>   
    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:SSL:10m</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">1d</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">ssl_session_tickets</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">add_header</span> Strict-Transport-Security <span class="token string">"max-age=63072000; includeSubDomains; preload"</span> always</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> X-Content-Type-Options nosniff</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> X-XSS-Protection <span class="token string">"1; mode=block"</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">add_header</span> Content-Security-Policy <span class="token string">"frame-ancestors 'self' *.vanjay.cn"</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:5230</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ocserv-conf-配置"><a href="#ocserv-conf-配置" class="headerlink" title="ocserv.conf 配置"></a>ocserv.conf 配置</h3><pre class="line-numbers language-none"><code class="language-none">#auth &#x3D; &quot;plain[passwd&#x3D;&#x2F;etc&#x2F;ocserv&#x2F;ocpasswd]&quot;
auth &#x3D; &quot;certificate&quot;
tcp-port &#x3D; 443
run-as-user &#x3D; ocserv
run-as-group &#x3D; ocserv
socket-file &#x3D; ocserv.sock
chroot-dir &#x3D; &#x2F;var&#x2F;lib&#x2F;ocserv
isolate-workers &#x3D; false
max-clients &#x3D; 32
max-same-clients &#x3D; 8
keepalive &#x3D; 32400
dpd &#x3D; 30
mobile-dpd &#x3D; 90
try-mtu-discovery &#x3D; false
server-cert &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;pki&#x2F;vpn.domain.com_ecc&#x2F;vpn.domain.com.cer
server-key &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;pki&#x2F;vpn.domain.com_ecc&#x2F;vpn.domain.com.key
crl &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;pem&#x2F;crl.pem
ca-cert &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;pem&#x2F;ca-cert.pem

listen-proxy-proto &#x3D; true
listen-host &#x3D; 127.0.0.1

cert-user-oid &#x3D; 2.5.4.3
compression &#x3D; true
no-compress-limit &#x3D; 256
tls-priorities &#x3D; &quot;NORMAL:%SERVER_PRECEDENCE:%COMPAT:-VERS-SSL3.0&quot;
auth-timeout &#x3D; 240
min-reauth-time &#x3D; 300
max-ban-score &#x3D; 50
ban-reset-time &#x3D; 300
cookie-timeout &#x3D; 300
deny-roaming &#x3D; false
rekey-time &#x3D; 172800
rekey-method &#x3D; ssl
use-utmp &#x3D; true
use-occtl &#x3D; true
pid-file &#x3D; &#x2F;var&#x2F;run&#x2F;ocserv.pid
device &#x3D; vpns
predictable-ips &#x3D; true
default-domain &#x3D; vpn.domain.com
ipv4-network &#x3D; 192.168.101.0&#x2F;24
dns &#x3D; 1.1.1.1
dns &#x3D; 8.8.8.8
ping-leases &#x3D; false

cisco-client-compat &#x3D; true
dtls-legacy &#x3D; true
# user-profile&#x3D; profile.xml
connect-script &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;connect-script
disconnect-script &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;connect-script

config-per-user &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;config-per-user&#x2F;
config-per-group &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;config-per-group&#x2F;
default-group-config &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;config-per-group&#x2F;others
default-select-group &#x3D; others
auto-select-group &#x3D; false

# config-per-user &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;config-per-user&#x2F;
# config-per-group &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;config-per-group&#x2F;

# default-user-config &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;defaults&#x2F;user.conf
# default-group-config &#x3D; &#x2F;etc&#x2F;ocserv&#x2F;defaults&#x2F;group.conf

# (x*1024)*1024&#x2F;8
rx-data-per-sec &#x3D; 4194304
tx-data-per-sec &#x3D; 4194304

no-route &#x3D; 192.168.0.0&#x2F;255.255.0.0
no-route &#x3D; 47.242.201.43&#x2F;255.255.255.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后话，Nginx与HAProxy的比较"><a href="#后话，Nginx与HAProxy的比较" class="headerlink" title="后话，Nginx与HAProxy的比较"></a>后话，Nginx与HAProxy的比较</h2><p>看起来 haproxy 和 nginx 都能实现反向代理，那他们各自有什么优劣以及适用什么场景呢？这里做个简单总结。<br>Nginx和HAProxy都是非常强大且广泛使用的反向代理服务器。然而，它们各自的优势和更适用的场景略有不同。</p>
<h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx是一个强大的Web服务器，也可以作为邮件代理服务器，以及通用的TCP&#x2F;UDP代理服务器。它被设计为处理非常高的并发连接，这得益于其基于事件的架构。</p>
<p>Nginx的主要优点包括：</p>
<ul>
<li>静态文件服务：Nginx是一个出色的静态文件服务器，能够快速、高效地为大量用户提供服务。</li>
<li>灵活的配置：Nginx的配置文件非常强大且灵活，可以支持各种复杂的路由和负载均衡策略。</li>
<li>HTTPS和HTTP&#x2F;2支持：Nginx支持最新的Web协议，包括HTTPS和HTTP&#x2F;2。</li>
</ul>
<p>然而，Nginx的某些功能，如动态负载均衡和高级健康检查，在社区版中是不可用的。这些功能只在Nginx Plus（商业版）中可用。</p>
<h3 id="HAProxy"><a href="#HAProxy" class="headerlink" title="HAProxy"></a>HAProxy</h3><p>HAProxy是一个专注于高可用性、负载均衡和代理的开源软件。它可以处理非常大量的并发连接，并提供丰富的负载均衡算法和健康检查功能。</p>
<p>HAProxy的主要优点包括：</p>
<ul>
<li>高性能：HAProxy被设计为处理非常高的并发连接，且拥有优秀的性能。</li>
<li>灵活的负载均衡：HAProxy提供了多种负载均衡算法，可以根据需要进行选择和配置。</li>
<li>先进的健康检查：HAProxy可以进行非常详细的健康检查，包括对HTTP、TCP和其他协议的支持。</li>
</ul>
<p>但是，HAProxy在处理静态内容或者作为全功能的Web服务器方面，可能不如Nginx强大。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>选择Nginx还是HAProxy，取决于你的具体需求。如果你主要是为了提供静态内容或需要一个全功能的Web服务器，Nginx可能是更好的选择。如果你需要一个专注于高可用性、负载均衡和代理的解决方案，HAProxy可能更适合你。</p>
<p>总的来说，Nginx和HAProxy都是非常优秀的工具，它们在很多情况下可以互补使用，而不是相互替代。在本文的情境中，我们使用了HAProxy来处理基于SNI的路由，同时利用Nginx的Web服务能力，共同实现了一种强大且灵活的解决方案。这样的组合充分利用了这两个工具的各自优势，为我们的服务提供了可靠的网络连接。</p>
<p>最后，不管你选择使用哪种工具，都应当确保理解其工作原理和配置细节，这样才能最大化地发挥其作用。同时，始终保持对工具的更新和安全性的关注，是维持服务稳定运行的关键。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.linuxbabe.com/ubuntu/openconnect-vpn-server-ocserv-ubuntu-20-04-lets-encrypt">openconnect-vpn-server-ocserv-ubuntu-20-04-lets-encrypt</a></p>
<p><a href="http://ocserv.gitlab.io/www/recipes-ocserv-multihost.html">ocserv官方使用haproxy的SNI解决方案</a></p>
<p><a href="https://wwww.lvmoo.com/1110.love/">ocserv443端口复用</a></p>
]]></content>
      <categories>
        <category>服务器</category>
        <category>运维</category>
      </categories>
      <tags>
        <tag>ocserv</tag>
        <tag>nginx</tag>
        <tag>haproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>抓取 App Store和 Google Play 应用评论并写入 Excel</title>
    <url>/2019/06/29/%E6%8A%93%E5%8F%96-App-Store%E5%92%8C-Google-Play-%E5%BA%94%E7%94%A8%E8%AF%84%E8%AE%BA%E5%B9%B6%E5%86%99%E5%85%A5-Excel/</url>
    <content><![CDATA[<p>这几天开始在利用业余时间用 Swift 5 重写公司项目，继上一次用 Swift 写项目隔了有两年了吧（中间陆续在学习），Swift 变得更加好用了，真是愈发嫌弃 OC，来新公司把所负责的 App 从规范到基础服务再到业务里外优化了一番，算是有所成果了。新项目到写得正 high，组长丢给我一个任务，产品经理需要竞品在 App Store 和 Google Play 的评论数据用于调研，简单实现了一番，趁热打铁，记录一下结果，以便日后需要。</p>
<span id="more"></span>

<h1 id="想到第一方案"><a href="#想到第一方案" class="headerlink" title="想到第一方案"></a>想到第一方案</h1><p>在未做调研前，想到的第一方案是利用 Appium + mitmproxy + python 实现，想怎么抓就怎么抓，唰唰唰先代理看看，结果发现 App Store 启用网络代理后无法联网，原因是 <a href="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning">SSL Pinning</a>，然后就解决这个问题，找到 <a href="https://github.com/nabla-c0d3/ssl-kill-switch2">ssl-kill-switch2</a>，可以解决这个问题，在越狱手机上安装了 deb 包，关闭 itunesstored 服务，发现并不生效:</p>
<pre class="line-numbers language-none"><code class="language-none">dpkg -i com.nablac0d3.sslkillswitch2_0.13.deb
ps -ef | grep itunesstored
kill -s KILL 1170<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>看 <a href="https://github.com/nabla-c0d3/ssl-kill-switch2/issues">Issues</a> 确实在 iOS 11.4.1 上无法生效，可惜我的越狱设备正好是这个版本，该方案夭折。</p>
<h1 id="调研第三方服务商"><a href="#调研第三方服务商" class="headerlink" title="调研第三方服务商"></a>调研第三方服务商</h1><p>既然一方案夭折，想想该需求市场上肯定有数据服务商，于是谷歌搜索了一 ha，果然前面几位都是“科学家”网站，进去看看，可以看到有广告 <a href="https://link.zhihu.com/?target=http://wetest.qq.com/bee/?from=content_zhihu_quying">产品舆情 - WeTest腾讯质量开放平台</a> 和 <a href="http://aso100.com/">七麦数据</a> 的，前者没去看，简单看了下后者，注册账号，两个问题</p>
<pre><code>- 不能查看非中国区评论
- 不能自定义生成的 Excel 选项
</code></pre>
<p>于是，该方案 pass</p>
<h1 id="App-Store-从官方渠道获取最近500条"><a href="#App-Store-从官方渠道获取最近500条" class="headerlink" title="App Store 从官方渠道获取最近500条"></a>App Store 从官方渠道获取最近500条</h1><p>考虑到多款竞品在 App Store 对应国区的评论数均不足 500条，于是使用苹果官方提供的 <a href="https://itunes.apple.com/rss/customerreviews/page=1/id=414478124/sortby=mostrecent/json?l=en&&cc=cn">API</a> </p>
<p><code>https://itunes.apple.com/rss/customerreviews/page=1/id=414478124/sortby=mostrecent/json?l=en&amp;&amp;cc=cn</code></p>
<p>page 和 id 自行更改，该 API最多可以获取一个App的最近500条评论（每页最多50，最多10页），该方案顺利抓取数据，代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">import</span> requests
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
<span class="token keyword">import</span> re
<span class="token keyword">import</span> xlsxwriter
<span class="token keyword">import</span> json
<span class="token keyword">import</span> os


<span class="token keyword">def</span> <span class="token function">getHTMLText</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    myjson <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> myjson

    <span class="token comment"># try:</span>
    <span class="token comment">#     r = requests.get(url)</span>
    <span class="token comment">#     r.raise_for_status()</span>
    <span class="token comment">#     r.encoding = r.apparent_encoding</span>
    <span class="token comment">#     return r.text</span>
    <span class="token comment"># except:</span>
    <span class="token comment">#     return ''</span>


<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    appid <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入应用id号:"</span><span class="token punctuation">)</span>
    appName <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入应用名称:"</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>appid<span class="token punctuation">)</span><span class="token punctuation">:</span>
        os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">'mkdir '</span> <span class="token operator">+</span> appid<span class="token punctuation">)</span>

    workbook <span class="token operator">=</span> xlsxwriter<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>appid <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> appName <span class="token operator">+</span> <span class="token string">'_comments.xlsx'</span><span class="token punctuation">)</span>
    worksheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_worksheet<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">format</span> <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_format<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token builtin">format</span><span class="token punctuation">.</span>set_border<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token builtin">format</span><span class="token punctuation">.</span>set_border<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    format_title <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_format<span class="token punctuation">(</span><span class="token punctuation">)</span>
    format_title<span class="token punctuation">.</span>set_border<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    format_title<span class="token punctuation">.</span>set_bg_color<span class="token punctuation">(</span><span class="token string">'#cccccc'</span><span class="token punctuation">)</span>
    format_title<span class="token punctuation">.</span>set_align<span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">)</span>
    format_title<span class="token punctuation">.</span>set_bold<span class="token punctuation">(</span><span class="token punctuation">)</span>
    title <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'作者'</span><span class="token punctuation">,</span> <span class="token string">'标题'</span><span class="token punctuation">,</span> <span class="token string">'评论内容'</span><span class="token punctuation">,</span> <span class="token string">'版本'</span><span class="token punctuation">,</span> <span class="token string">'评级'</span><span class="token punctuation">,</span> <span class="token string">'投票'</span><span class="token punctuation">]</span>

    <span class="token comment"># 设置单元格宽度</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    worksheet<span class="token punctuation">.</span>set_column<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

    worksheet<span class="token punctuation">.</span>write_row<span class="token punctuation">(</span><span class="token string">'A1'</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> format_title<span class="token punctuation">)</span>

    count <span class="token operator">=</span> <span class="token number">0</span>

    total <span class="token operator">=</span> <span class="token number">10</span>
    totalCount <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">'https://itunes.apple.com/rss/customerreviews/page='</span> <span class="token operator">+</span> \
            <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/id='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>appid<span class="token punctuation">)</span> <span class="token operator">+</span> \
            <span class="token string">'/sortby=mostrecent/json?l=en&amp;&amp;cc=kh'</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前地址：'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>

        jsonText <span class="token operator">=</span> getHTMLText<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

        fileName <span class="token operator">=</span> appid <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.json'</span>

        data_feed <span class="token operator">=</span> jsonText<span class="token punctuation">[</span><span class="token string">'feed'</span><span class="token punctuation">]</span>
        entry <span class="token operator">=</span> data_feed<span class="token punctuation">[</span><span class="token string">'entry'</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> entry<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            fixedIndex <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            startRow <span class="token operator">=</span> totalCount <span class="token operator">+</span> <span class="token number">1</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                startRow<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>startRow<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>startRow<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                startRow<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'im:version'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                startRow<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'im:rating'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>
                startRow<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token string">'im:rating'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span>
            totalCount <span class="token operator">=</span> totalCount <span class="token operator">+</span> <span class="token number">1</span>

        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
            <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>jsonText<span class="token punctuation">,</span> sort_keys<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                                  indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前进度: &#123;:.2f&#125;%"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">/</span> total<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span>

    workbook<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="Google-Play-App评论获取"><a href="#Google-Play-App评论获取" class="headerlink" title="Google Play App评论获取"></a>Google Play App评论获取</h1><p>谷歌相比苹果而言这方面更加开放，App 数据获取 API 次数不限，而且有 <a href="https://github.com/facundoolano/google-play-scraper">现成的 npm 库</a>，笔芯，感谢开源世界。新建个 node 项目，三下五除二实验了一下，库高效可用，于是开始简单分析数据编写代码，产出如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> gplay <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'google-play-scraper'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// const readline = require('readline').createInterface(&#123;</span>
<span class="token comment">//   input: process.stdin,</span>
<span class="token comment">//   output: process.stdout</span>
<span class="token comment">// &#125;)</span>

<span class="token comment">// readline.question(`请输入 apk 包名：`, (inputText) => &#123;</span>
<span class="token comment">//   bundle_id = inputText</span>
<span class="token comment">//   console.log(`包名： $&#123;bundle_id&#125;!`)</span>

<span class="token comment">//   readline.close()</span>

<span class="token comment">//   fs.mkdirSync(bundle_id)</span>

<span class="token comment">//   gplay.reviews(&#123;</span>
<span class="token comment">//     appId: bundle_id,</span>
<span class="token comment">//     lang: 'kh'</span>
<span class="token comment">//   &#125;)</span>
<span class="token comment">//     .then((body) => &#123;</span>
<span class="token comment">//       fs.writeFile(`$&#123;bundle_id&#125;/comments.json`, JSON.stringify(body), (err) => &#123;</span>
<span class="token comment">//         if (err) &#123;</span>
<span class="token comment">//           console.error(err);</span>
<span class="token comment">//           return;</span>
<span class="token comment">//         &#125;;</span>
<span class="token comment">//         console.log("File has been created");</span>
<span class="token comment">//       &#125;);</span>
<span class="token comment">//     &#125;)</span>
<span class="token comment">// &#125;)</span>

<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
  <span class="token string-property property">'bundle_id'</span><span class="token operator">:</span> <span class="token string">'com.pipay.app.android'</span><span class="token punctuation">,</span>
  <span class="token string-property property">'name'</span><span class="token operator">:</span> <span class="token string">'PiPay'</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   'bundle_id': 'com.aeon_cambodia.rielpay',</span>
<span class="token comment">//   'name': 'AEON Wallet'</span>
<span class="token comment">// &#125;,</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   'bundle_id': 'com.wingmoney.wingpay',</span>
<span class="token comment">//   'name': 'Wing Money'</span>
<span class="token comment">// &#125;,</span>
<span class="token comment">// &#123;</span>
<span class="token comment">//   'bundle_id': 'th.co.truemoney.wallet',</span>
<span class="token comment">//   'name': 'True Money'</span>
<span class="token comment">// &#125;</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">50</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> object <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
  <span class="token keyword">var</span> bundle_id<span class="token punctuation">,</span> name
  <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'bundle_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    bundle_id <span class="token operator">=</span> object<span class="token punctuation">[</span><span class="token string">'bundle_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>bundle_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>bundle_id<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'bundle_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    name <span class="token operator">=</span> object<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">包名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bundle_id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">  应用名：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    gplay<span class="token punctuation">.</span><span class="token function">reviews</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">appId</span><span class="token operator">:</span> bundle_id<span class="token punctuation">,</span>
      <span class="token literal-property property">lang</span><span class="token operator">:</span> <span class="token string">'kh'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">page</span><span class="token operator">:</span> index
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">body</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>body<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bundle_id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">成功写入文件 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>bundle_id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>index<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'无更多评论'</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>抓取后评论数据本地存档，如下：</p>
<pre class="line-numbers language-none"><code class="language-none">➜ ls th.co.truemoney.wallet
0.json                          35.json                         61.json
1.json                          36.json                         62.json
10.json                         37.json                         63.json
11.json                         38.json                         64.json
12.json                         39.json                         65.json
13.json                         4.json                          66.json
14.json                         40.json                         67.json
15.json                         41.json                         68.json
16.json                         42.json                         69.json
17.json                         43.json                         7.json
18.json                         44.json                         70.json
19.json                         45.json                         71.json
2.json                          46.json                         72.json
20.json                         47.json                         73.json
21.json                         48.json                         74.json
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="将数据生成-Excel-并简单美化"><a href="#将数据生成-Excel-并简单美化" class="headerlink" title="将数据生成 Excel 并简单美化"></a>将数据生成 Excel 并简单美化</h1><h2 id="for-AppStore"><a href="#for-AppStore" class="headerlink" title="for AppStore"></a>for AppStore</h2><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python3
# -*- coding: utf-8 -*-

import xlsxwriter
import json
import os
from googletrans import Translator
import sys
sys.path.append(&quot;..&quot;)
from mtranslate.mtranslate import translate

# translator &#x3D; Translator()
# print(translator.translate(&#39;មិចញុមវាយលេខចូលហើយមិចក៏មិនអោយ&#39;, dest&#x3D;&#39;zh-CN&#39;).text)

arr &#x3D; [&#123;
    &#39;id&#39;: &#39;1234143591&#39;,
    &#39;name&#39;: &#39;PiPay&#39;
    &#125;,
        &#123;
    &#39;id&#39;: &#39;1328330562&#39;,
    &#39;name&#39;: &#39;AEON Wallet&#39;
    &#125;,
        &#123;
    &#39;id&#39;: &#39;1113286385&#39;,
    &#39;name&#39;: &#39;Wing Money&#39;
    &#125;,
        &#123;
    &#39;id&#39;: &#39;1162466939&#39;,
        &#39;name&#39;: &#39;True Money&#39;
&#125;]


def translateToChinese(text):
    translator &#x3D; Translator()

    try:
        return translator.translate(text, dest&#x3D;&#39;zh-CN&#39;).text
    except print(0):
        return text


def main():

    for item in arr:
        appid &#x3D; item[&#39;id&#39;]
        name &#x3D; item[&#39;name&#39;]

        # appid &#x3D; input(&quot;请输入应用id号:&quot;)
        # name &#x3D; input(&quot;请输入应用名称:&quot;)

        workbook &#x3D; xlsxwriter.Workbook(
            str(appid) + &#39;&#x2F;&#39; + name + &#39;_comments.xlsx&#39;)
        worksheet &#x3D; workbook.add_worksheet()
        format &#x3D; workbook.add_format()
        format.set_border(1)
        format.set_border(1)
        format_title &#x3D; workbook.add_format()
        format_title.set_border(1)
        format_title.set_bg_color(&#39;#cccccc&#39;)
        format_title.set_align(&#39;left&#39;)
        format_title.set_bold()
        title &#x3D; [&#39;作者&#39;, &#39;标题&#39;, &#39;评论内容&#39;, &#39;版本&#39;, &#39;评级&#39;, &#39;投票&#39;]

        # 设置单元格宽度
        worksheet.set_column(0, 0, 30)
        worksheet.set_column(1, 1, 40)
        worksheet.set_column(2, 2, 100)
        worksheet.set_column(3, 3, 10)
        worksheet.set_column(4, 4, 10)
        worksheet.set_column(5, 5, 10)

        worksheet.write_row(&#39;A1&#39;, title, format_title)

        total &#x3D; 50
        totalCount &#x3D; 0
        for n in range(total):
            fileName &#x3D; appid + &#39;&#x2F;&#39; + str(n) + &#39;.json&#39;
            if not os.path.exists(fileName):
                continue

            with open(fileName, &#39;r&#39;) as file:
                result &#x3D; json.load(file)
                data_feed &#x3D; result[&#39;feed&#39;]
                entry &#x3D; data_feed[&#39;entry&#39;]
                for i in range(len(entry)):
                    value &#x3D; entry[i]
                    fixedIndex &#x3D; i + 1
                    startRow &#x3D; totalCount + 1
                    worksheet.write(
                        startRow, 0, value[&#39;author&#39;][&#39;name&#39;][&#39;label&#39;], format)
                    worksheet.write(startRow, 1, value[&#39;title&#39;][&#39;label&#39;], format)
                    worksheet.write(
                        startRow, 2, translate(value[&#39;content&#39;][&#39;label&#39;], &#39;zh-CN&#39;), format)
                        # startRow, 2,value[&#39;content&#39;][&#39;label&#39;], format)
                    worksheet.write(
                        startRow, 3, value[&#39;im:version&#39;][&#39;label&#39;], format)
                    worksheet.write(
                        startRow, 4, value[&#39;im:rating&#39;][&#39;label&#39;], format)
                    worksheet.write(
                        startRow, 5, value[&#39;im:rating&#39;][&#39;label&#39;], format)
                    totalCount &#x3D; totalCount + 1

        workbook.close()


if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="for-Google-Play"><a href="#for-Google-Play" class="headerlink" title="for Google Play"></a>for Google Play</h2><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;python3
# -*- coding: utf-8 -*-

import xlsxwriter
import json
import os
from googletrans import Translator
import sys
sys.path.append(&quot;..&quot;)
from mtranslate.mtranslate import translate

# translator &#x3D; Translator()
# print(translator.translate(&#39;មិចញុមវាយលេខចូលហើយមិចក៏មិនអោយ&#39;, dest&#x3D;&#39;zh-CN&#39;).text)
# print(translate(&#39;មិចញុមវាយលេខចូលហើយមិចក៏មិនអោយ&#39;, &#39;zh-CN&#39;))

arr &#x3D; [&#123;
    &#39;bundle_id&#39;: &#39;com.pipay.app.android&#39;,
    &#39;name&#39;: &#39;PiPay&#39;
# &#125;,
#     &#123;
    # &#39;bundle_id&#39;: &#39;com.aeon_cambodia.rielpay&#39;,
    # &#39;name&#39;: &#39;AEON Wallet&#39;
# &#125;,
#     &#123;
    # &#39;bundle_id&#39;: &#39;com.wingmoney.wingpay&#39;,
    # &#39;name&#39;: &#39;Wing Money&#39;
# &#125;,
#     &#123;
    # &#39;bundle_id&#39;: &#39;th.co.truemoney.wallet&#39;,
    # &#39;name&#39;: &#39;True Money&#39;
&#125;]

def translateToChinese(text):
    translator &#x3D; Translator()

    try:
        return translator.translate(text, dest&#x3D;&#39;zh-CN&#39;).text
    except print(0):
        return text


def main():

    for item in arr:
        bundle_id &#x3D; item[&#39;bundle_id&#39;]
        name &#x3D; item[&#39;name&#39;]

    # appid &#x3D; input(&quot;请输入应用id号:&quot;)
    # appName &#x3D; input(&quot;请输入应用名称:&quot;)

        workbook &#x3D; xlsxwriter.Workbook(
            bundle_id + &#39;&#x2F;&#39; + name + &#39;_comments.xlsx&#39;)
        worksheet &#x3D; workbook.add_worksheet()
        format &#x3D; workbook.add_format()
        format.set_border(1)
        format.set_border(1)
        format_title &#x3D; workbook.add_format()
        format_title.set_border(1)
        format_title.set_bg_color(&#39;#cccccc&#39;)
        format_title.set_align(&#39;left&#39;)
        format_title.set_bold()
        title &#x3D; [&#39;作者&#39;, &#39;标题&#39;, &#39;评论内容&#39;, &#39;日期&#39;, &#39;评分&#39;, &#39;头像&#39;]

        # 设置单元格宽度
        worksheet.set_column(0, 0, 30)
        worksheet.set_column(1, 1, 30)
        worksheet.set_column(2, 2, 100)
        worksheet.set_column(3, 3, 20)
        worksheet.set_column(4, 4, 10)
        worksheet.set_column(5, 5, 120)

        worksheet.write_row(&#39;A1&#39;, title, format_title)

        total &#x3D; 50
        totalCount &#x3D; 0
        for n in range(total):
            fileName &#x3D; bundle_id + &#39;&#x2F;&#39; + str(n) + &#39;.json&#39;
            if not os.path.exists(fileName):
                continue

            with open(fileName, &#39;r&#39;) as file:
                result &#x3D; json.load(file)
                entry &#x3D; result
                for i in range(len(entry)):
                    value &#x3D; entry[i]
                    fixedIndex &#x3D; i + 1
                    startRow &#x3D; totalCount + 1
                    worksheet.write(
                        startRow, 0, value[&#39;userName&#39;], format)
                    worksheet.write(
                        startRow, 1, value[&#39;title&#39;], format)
                    worksheet.write(
                        startRow, 2, translate(value[&#39;text&#39;], &#39;zh-CN&#39;), format)
                    worksheet.write(
                        startRow, 3, value[&#39;date&#39;], format)
                    worksheet.write(
                        startRow, 4, value[&#39;score&#39;], format)
                    worksheet.write(
                        startRow, 5, value[&#39;userImage&#39;], format)
                    totalCount &#x3D; totalCount + 1

        workbook.close()

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    pass
    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="Excuse-me？"><a href="#Excuse-me？" class="headerlink" title="Excuse me？"></a>Excuse me？</h1><p>整理下数据发给产品，准备继续撸 Swift 搬砖了，产品又跟我说发现个大问题，几千条评论全是英语和高棉语，看不懂！！！好吧，给你翻译（谷歌翻译）。随便一 google，谷歌有免费的 python API 的开源库 <a href="https://pypi.org/project/googletrans/">googletrans</a>，看看介绍</p>
<blockquote>
<p>Googletrans is a free and unlimited python library that implemented Google Translate API. This uses the Google Translate Ajax API to make calls to such methods as detect and translate.<br>Compatible with Python 2.7+ and 3.4+. (Note: Python 2 support will be dropped in the next major release.)<br>For details refer to the API Documentation.</p>
</blockquote>
<p>太棒了，还无限制，两三行代码就能使用，关键代码：</p>
<pre class="line-numbers language-none"><code class="language-none">from googletrans import Translator

translator &#x3D; Translator()
print(translator.translate(&#39;មិចញុមវាយលេខចូលហើយមិចក៏មិនអោយ&#39;, dest&#x3D;&#39;zh-CN&#39;).text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>但数据量比较大，亲测使用该方式翻译速度较慢，于是找到 <a href="https://github.com/mouuff/mtranslate">mtranslate</a> ，其是对 <code>googletrans </code>的一个封装，可以稍微加快翻译速度，最后使用该库完成翻译，代码就几行：</p>
<pre class="line-numbers language-none"><code class="language-none">from mtranslate.mtranslate import translate

print(translate(&#39;មិចញុមវាយលេខចូលហើយមិចក៏មិនអោយ&#39;, &#39;zh-CN&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>PS：翻译库 JavaScript 版本的可以使用 <a href="https://github.com/matheuss/google-translate-api">google-translate-api</a></p>
<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><img src="/images/app_comments/example.jpg"/>
<img src="/images/app_comments/google_play.jpg"/>

<h1 id="完整-Demo-地址"><a href="#完整-Demo-地址" class="headerlink" title="完整 Demo 地址"></a>完整 Demo 地址</h1><p>附上 <a href="https://github.com/wangwanjie/fetch-appstore-comments">github 完整项目地址</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>JavaScript</tag>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>彻底解决 iOS 导航栏样式控制问题</title>
    <url>/2019/07/01/%E5%BD%BB%E5%BA%95%E8%A7%A3%E5%86%B3-iOS-%E5%AF%BC%E8%88%AA%E6%A0%8F%E6%A0%B7%E5%BC%8F%E6%8E%A7%E5%88%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>做 iOS 开发应该都知道，App 内导航栏样式控制一直是个问题，当 App 复杂起来后，每个界面的导航栏样式可能都不统一，包括背景颜色、是否隐藏导航栏、是否隐藏导航栏底部黑线等，如果前后两个界面样式不一致时，手势返回时（点击返回也会，只是太快不容易注意到），导航栏处就会出现明显的“断层”，极其丑陋，本文就是记录解决该问题，包含 Objective-C 和 Swift 5 的代码。</p>
<span id="more"></span>

<h1 id="先看看效果对比"><a href="#先看看效果对比" class="headerlink" title="先看看效果对比"></a>先看看效果对比</h1><ul>
<li><p>优化前</p>
  <img src="/images/navigation/before.gif"/></li>
<li><p>优化后</p>
  <img src="/images/navigation/after.gif"/></li>
</ul>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>解决问题的核心是自定义导航控制器转场动画，每次 push 新界面时会对上一个界面“截图”，并维护这个存储的“截图”队列，覆写常用的 navigate 界面方法进行对应的维护处理，与系统一样对滑动速度做了处理，不一定是划过的临界值触发。</p>
<h1 id="Show-me-the-code"><a href="#Show-me-the-code" class="headerlink" title="Show me the code"></a>Show me the code</h1><h2 id="Objective-C，两个类，四个文件，包括头文件"><a href="#Objective-C，两个类，四个文件，包括头文件" class="headerlink" title="Objective-C，两个类，四个文件，包括头文件"></a>Objective-C，两个类，四个文件，包括头文件</h2><p>HDNavCAnimationController.h</p>
<pre class="line-numbers language-Objective-C" data-language="Objective-C"><code class="language-Objective-C">&#x2F;&#x2F;
&#x2F;&#x2F;  HDNavCAnimationController.h
&#x2F;&#x2F;  customer
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2019&#x2F;6&#x2F;6.
&#x2F;&#x2F;  Copyright © 2018年 chaos network technology. All rights reserved.
&#x2F;&#x2F;

#import &lt;UIKit&#x2F;UIKit.h&gt;
&#x2F;**
 导航栏操作类型
 *&#x2F;
#define ScreenWidth [UIScreen mainScreen].bounds.size.width
#define ScreenHeight [UIScreen mainScreen].bounds.size.height

@interface HDNavCAnimationController : NSObject &lt;UIViewControllerAnimatedTransitioning&gt;

+ (instancetype)animationControllerWithOperation:(UINavigationControllerOperation)operation;
+ (instancetype)animationControllerWithOperation:(UINavigationControllerOperation)operation navigationController:(UINavigationController *)navigationController;

@property (nonatomic, assign) UINavigationControllerOperation navigationOperation;
@property (nonatomic, weak) UINavigationController *navigationController;

&#x2F;**
 导航栏Pop时删除了多少张截图（调用PopToViewController时，计算要删除的截图的数量）
 *&#x2F;
@property (nonatomic, assign) NSInteger removeCount;

&#x2F;**
 调用此方法删除数组最后一张截图 (调用pop手势或一次pop多个控制器时使用)
 *&#x2F;
- (void)removeLastScreenShot;
&#x2F;**
 移除全部屏幕截图
 *&#x2F;
- (void)removeAllScreenShot;
&#x2F;**
 从截屏数组尾部移除指定数量的截图
 *&#x2F;
- (void)removeLastScreenShotWithNumber:(NSInteger)number;

&#x2F;**
 移除指定索引的截图
 *&#x2F;
- (void)removeScreenShotAtIndex:(NSInteger)index;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>HDNavCAnimationController.m</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;
&#x2F;&#x2F;  HDNavCAnimationController.m
&#x2F;&#x2F;  customer
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2019&#x2F;6&#x2F;6.
&#x2F;&#x2F;  Copyright © 2018年 chaos network technology. All rights reserved.
&#x2F;&#x2F;

#import &quot;HDNavCAnimationController.h&quot;

@interface HDNavCAnimationController ()

@property (nonatomic, strong) NSMutableArray *screenShotArray;
&#x2F;**
 所属的导航栏有没有TabBarController
 *&#x2F;
@property (nonatomic, assign) BOOL isTabbarExist;

@end

@implementation HDNavCAnimationController

+ (instancetype)animationControllerWithOperation:(UINavigationControllerOperation)operation navigationController:(UINavigationController *)navigationController &#123;
    HDNavCAnimationController *ac &#x3D; [[HDNavCAnimationController alloc] init];
    ac.navigationController &#x3D; navigationController;
    ac.navigationOperation &#x3D; operation;
    return ac;
&#125;

+ (instancetype)animationControllerWithOperation:(UINavigationControllerOperation)operation &#123;
    HDNavCAnimationController *ac &#x3D; [[HDNavCAnimationController alloc] init];
    ac.navigationOperation &#x3D; operation;
    return ac;
&#125;

- (void)setNavigationController:(UINavigationController *)navigationController &#123;
    _navigationController &#x3D; navigationController;

    UIViewController *beyondVC &#x3D; self.navigationController.view.window.rootViewController;
    &#x2F;&#x2F;判断该导航栏是否有TabBarController
    if (self.navigationController.tabBarController &#x3D;&#x3D; beyondVC) &#123;
        _isTabbarExist &#x3D; YES;
    &#125; else &#123;
        _isTabbarExist &#x3D; NO;
    &#125;
&#125;

- (NSMutableArray *)screenShotArray &#123;
    if (!_screenShotArray) &#123;
        _screenShotArray &#x3D; [[NSMutableArray alloc] init];
    &#125;
    return _screenShotArray;
&#125;

- (NSTimeInterval)transitionDuration:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;
    return .25f;
&#125;

- (void)animateTransition:(id&lt;UIViewControllerContextTransitioning&gt;)transitionContext &#123;

    UIImageView *screentImgView &#x3D; [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, ScreenWidth, ScreenHeight)];
    UIImage *screenImg &#x3D; [self screenShot];
    screentImgView.image &#x3D; screenImg;

    &#x2F;&#x2F; 取出fromViewController,fromView和toViewController，toView
    UIViewController *fromViewController &#x3D; [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];
    UIViewController *toViewController &#x3D; [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];
    UIView *toView &#x3D; [transitionContext viewForKey:UITransitionContextToViewKey];

    CGRect fromViewEndFrame &#x3D; [transitionContext finalFrameForViewController:fromViewController];
    fromViewEndFrame.origin.x &#x3D; ScreenWidth;
    CGRect fromViewStartFrame &#x3D; fromViewEndFrame;
    CGRect toViewEndFrame &#x3D; [transitionContext finalFrameForViewController:toViewController];
    CGRect toViewStartFrame &#x3D; toViewEndFrame;

    UIView *containerView &#x3D; [transitionContext containerView];

    if (self.navigationOperation &#x3D;&#x3D; UINavigationControllerOperationPush) &#123;

        [self.screenShotArray addObject:screenImg];

        [containerView addSubview:toView];

        toView.frame &#x3D; toViewStartFrame;

        UIView *nextVC &#x3D; [[UIView alloc] initWithFrame:CGRectMake(ScreenWidth, 0, ScreenWidth, ScreenHeight)];

        &#x2F;&#x2F;将截图添加到导航栏的View所属的window上
        [self.navigationController.view.window insertSubview:screentImgView atIndex:0];

        nextVC.layer.shadowColor &#x3D; [UIColor blackColor].CGColor;
        nextVC.layer.shadowOffset &#x3D; CGSizeMake(-0.8, 0);
        nextVC.layer.shadowOpacity &#x3D; 0.6;

        self.navigationController.view.transform &#x3D; CGAffineTransformMakeTranslation(ScreenWidth, 0);

        [UIView animateWithDuration:[self transitionDuration:transitionContext]
            animations:^&#123;
                self.navigationController.view.transform &#x3D; CGAffineTransformMakeTranslation(0, 0);
                screentImgView.center &#x3D; CGPointMake(-ScreenWidth * 0.5, ScreenHeight * 0.5);
            &#125;
            completion:^(BOOL finished) &#123;
                [nextVC removeFromSuperview];
                [screentImgView removeFromSuperview];
                [transitionContext completeTransition:YES];
            &#125;];
    &#125; else if (self.navigationOperation &#x3D;&#x3D; UINavigationControllerOperationPop) &#123;
        fromViewStartFrame.origin.x &#x3D; 0;
        [containerView addSubview:toView];

        UIImageView *lastVcImgView &#x3D; [[UIImageView alloc] initWithFrame:CGRectMake(-ScreenWidth, 0, ScreenWidth, ScreenHeight)];
        &#x2F;&#x2F;若removeCount大于0  则说明Pop了不止一个控制器
        if (_removeCount &gt; 0) &#123;
            for (NSInteger i &#x3D; 0; i &lt; _removeCount; i++) &#123;
                if (i &#x3D;&#x3D; _removeCount - 1) &#123;
                    &#x2F;&#x2F;当删除到要跳转页面的截图时，不再删除，并将该截图作为ToVC的截图展示
                    lastVcImgView.image &#x3D; [self.screenShotArray lastObject];
                    _removeCount &#x3D; 0;
                    break;
                &#125; else &#123;
                    [self.screenShotArray removeLastObject];
                &#125;
            &#125;
        &#125; else &#123;
            lastVcImgView.image &#x3D; [self.screenShotArray lastObject];
        &#125;
        screentImgView.layer.shadowColor &#x3D; [UIColor blackColor].CGColor;
        screentImgView.layer.shadowOffset &#x3D; CGSizeMake(-0.8, 0);
        screentImgView.layer.shadowOpacity &#x3D; 0.6;
        [self.navigationController.view.window addSubview:lastVcImgView];
        [self.navigationController.view addSubview:screentImgView];

        [UIView animateWithDuration:[self transitionDuration:transitionContext]
            animations:^&#123;
                screentImgView.center &#x3D; CGPointMake(ScreenWidth * 3 * 0.5, ScreenHeight * 0.5);
                lastVcImgView.center &#x3D; CGPointMake(ScreenWidth * 0.5, ScreenHeight * 0.5);
            &#125;
            completion:^(BOOL finished) &#123;
                &#x2F;&#x2F;[self.navigationController setNavigationBarHidden:NO];
                [lastVcImgView removeFromSuperview];
                [screentImgView removeFromSuperview];
                [self.screenShotArray removeLastObject];
                [transitionContext completeTransition:YES];
            &#125;];
    &#125;
&#125;

- (void)removeLastScreenShot &#123;
    [self.screenShotArray removeLastObject];
&#125;

- (void)removeAllScreenShot &#123;
    [self.screenShotArray removeAllObjects];
&#125;

- (void)removeLastScreenShotWithNumber:(NSInteger)number &#123;
    for (NSInteger i &#x3D; 0; i &lt; number; i++) &#123;
        [self.screenShotArray removeLastObject];
    &#125;
&#125;

- (void)removeScreenShotAtIndex:(NSInteger)index &#123;
    if (self.screenShotArray.count - 1 &gt;&#x3D; index) &#123;
        [self.screenShotArray removeObjectAtIndex:index];
    &#125;
&#125;

- (UIImage *)screenShot &#123;
    &#x2F;&#x2F; 将要被截图的view,即窗口的根控制器的view(必须不含状态栏,默认ios7中控制器是包含了状态栏的)
    UIViewController *beyondVC &#x3D; self.navigationController.view.window.rootViewController;
    &#x2F;&#x2F; 背景图片 总的大小
    CGSize size &#x3D; beyondVC.view.frame.size;
    &#x2F;&#x2F; 开启上下文,使用参数之后,截出来的是原图（YES  0.0 质量高）
    UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);
    &#x2F;&#x2F; 要裁剪的矩形范围
    CGRect rect &#x3D; CGRectMake(0, 0, ScreenWidth, ScreenHeight);
    &#x2F;&#x2F;注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代

    &#x2F;&#x2F;判读是导航栏是否有上层的Tabbar  决定截图的对象
    if (_isTabbarExist) &#123;
        [beyondVC.view drawViewHierarchyInRect:rect afterScreenUpdates:NO];
    &#125; else &#123;
        [self.navigationController.view drawViewHierarchyInRect:rect afterScreenUpdates:NO];
    &#125;
    &#x2F;&#x2F; 从上下文中,取出UIImage
    UIImage *snapshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();

    &#x2F;&#x2F; 结束上下文(移除栈顶的基于当前位图的图形上下文)
    UIGraphicsEndImageContext();

    &#x2F;&#x2F; 返回截取好的图片
    return snapshot;
&#125;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>HDNavigationController.h</p>
<pre class="line-numbers language-none"><code class="language-none">
&#x2F;&#x2F;
&#x2F;&#x2F;  HDNavigationController.h
&#x2F;&#x2F;  customer
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2019&#x2F;6&#x2F;6.
&#x2F;&#x2F;  Copyright © 2018年 chaos network technology. All rights reserved.
&#x2F;&#x2F;

#import &lt;UIKit&#x2F;UIKit.h&gt;

@interface HDNavigationController : UINavigationController

@property (nonatomic, strong) UIScreenEdgePanGestureRecognizer *panGestureRec;

@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>HDNavigationController.m</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;
&#x2F;&#x2F;  HDNavigationController.m
&#x2F;&#x2F;  customer
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2019&#x2F;6&#x2F;6.
&#x2F;&#x2F;  Copyright © 2018年 chaos network technology. All rights reserved.
&#x2F;&#x2F;

#import &quot;HDNavigationController.h&quot;
#import &quot;HDNavCAnimationController.h&quot;
#import &quot;UtilMacro.h&quot;

&#x2F;&#x2F; 临界滚动速度
static float const limitDraggingSpeed &#x3D; 800.f;

#define ColorFromRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) &gt;&gt; 16)) &#x2F; 255.0 green:((float)((rgbValue &amp; 0xFF00) &gt;&gt; 8)) &#x2F; 255.0 blue:((float)(rgbValue &amp; 0xFF)) &#x2F; 255.0 alpha:1.0]

&#x2F;&#x2F; 默认的将要变透明的遮罩的初始透明度(全黑)
#define kDefaultAlpha 0.6

&#x2F;&#x2F; 当拖动的距离,占了屏幕的总宽高的3&#x2F;4时, 就让imageview完全显示，遮盖完全消失
#define kTargetTranslateScale 0.75

@interface HDNavigationController () &lt;UIGestureRecognizerDelegate, UINavigationControllerDelegate&gt;

@property (nonatomic, strong) UIImageView *screenshotImgView;
@property (nonatomic, strong) UIView *coverView;
@property (nonatomic, strong) NSMutableArray *screenshotImgs;
@property (nonatomic, strong) UIImage *nextVCScreenShotImg;
@property (nonatomic, strong) HDNavCAnimationController *animationController;

@property (nonatomic, assign) CFAbsoluteTime beginDraggingTime;  &#x2F;&#x2F;&#x2F;&lt; 记录用户开始拖动的时间
@property (nonatomic, assign) CFAbsoluteTime endDraggingTime;    &#x2F;&#x2F;&#x2F;&lt; 记录用户结束拖动的时间
@property (nonatomic, assign) CGFloat beginDraggingOffsetX;      &#x2F;&#x2F;&#x2F;&lt; 记录用户开始拖动的偏移量X值
@property (nonatomic, assign) CGFloat endDraggingOffsetX;        &#x2F;&#x2F;&#x2F;&lt; 记录用户结束拖动的偏移量X值

@end

@implementation HDNavigationController

- (void)viewDidLoad &#123;
    [super viewDidLoad];

    self.delegate &#x3D; self;

    self.navigationBar.tintColor &#x3D; ColorFromRGB(0x6F7179);

    self.view.layer.shadowColor &#x3D; [UIColor blackColor].CGColor;
    self.view.layer.shadowOffset &#x3D; CGSizeMake(-0.8, 0);
    self.view.layer.shadowOpacity &#x3D; 0.6;

    &#x2F;&#x2F; 1,创建Pan手势识别器,并绑定监听方法

    _panGestureRec &#x3D; [[UIScreenEdgePanGestureRecognizer alloc] initWithTarget:self action:@selector(panGestureRec:)];
    _panGestureRec.edges &#x3D; UIRectEdgeLeft;
    &#x2F;&#x2F; 为导航控制器的view添加Pan手势识别器
    [self.view addGestureRecognizer:_panGestureRec];

    &#x2F;&#x2F; 2.创建截图的ImageView
    _screenshotImgView &#x3D; [[UIImageView alloc] init];
    &#x2F;&#x2F; app的frame是包括了状态栏高度的frame
    _screenshotImgView.frame &#x3D; CGRectMake(0, 0, ScreenWidth, ScreenHeight);

    &#x2F;&#x2F; 3.创建截图上面的黑色半透明遮罩
    _coverView &#x3D; [[UIView alloc] init];
    &#x2F;&#x2F; 遮罩的frame就是截图的frame
    _coverView.frame &#x3D; _screenshotImgView.frame;
    &#x2F;&#x2F; 遮罩为黑色
    _coverView.backgroundColor &#x3D; [UIColor blackColor];

    &#x2F;&#x2F; 4.存放所有的截图数组初始化
    _screenshotImgs &#x3D; [NSMutableArray array];
&#125;

- (nullable id&lt;UIViewControllerAnimatedTransitioning&gt;)navigationController:(UINavigationController *)navigationController
                                           animationControllerForOperation:(UINavigationControllerOperation)operation
                                                        fromViewController:(UIViewController *)fromVC
                                                          toViewController:(UIViewController *)toVC NS_AVAILABLE_IOS(7_0) &#123;
    self.animationController.navigationOperation &#x3D; operation;
    self.animationController.navigationController &#x3D; self;
    return self.animationController;
&#125;

- (HDNavCAnimationController *)animationController &#123;
    if (!_animationController) &#123;
        _animationController &#x3D; [[HDNavCAnimationController alloc] init];
    &#125;
    return _animationController;
&#125;

- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated &#123;

    &#x2F;&#x2F; 只有在导航控制器里面有子控制器的时候才需要截图
    if (self.viewControllers.count &gt;&#x3D; 1) &#123;
        &#x2F;&#x2F; 调用自定义方法,使用上下文截图
        [self screenShot];
    &#125;

    [super pushViewController:viewController animated:animated];
&#125;

- (UIViewController *)popViewControllerAnimated:(BOOL)animated &#123;
    NSInteger index &#x3D; self.viewControllers.count;
    NSString *className &#x3D; nil;
    if (index &gt;&#x3D; 2) &#123;
        className &#x3D; NSStringFromClass(self.viewControllers[index - 2].class);
    &#125;

    if (_screenshotImgs.count &gt;&#x3D; index - 1) &#123;
        [_screenshotImgs removeLastObject];
    &#125;

    return [super popViewControllerAnimated:animated];
&#125;

- (NSArray&lt;UIViewController *&gt; *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated &#123;

    NSInteger removeCount &#x3D; 0;
    for (NSInteger i &#x3D; self.viewControllers.count - 1; i &gt; 0; i--) &#123;
        if (viewController &#x3D;&#x3D; self.viewControllers[i]) &#123;
            break;
        &#125;

        [_screenshotImgs removeLastObject];
        removeCount++;
    &#125;
    _animationController.removeCount &#x3D; removeCount;
    return [super popToViewController:viewController animated:animated];
&#125;

- (NSArray&lt;UIViewController *&gt; *)popToRootViewControllerAnimated:(BOOL)animated &#123;
    [_screenshotImgs removeAllObjects];
    [_animationController removeAllScreenShot];
    return [super popToRootViewControllerAnimated:animated];
&#125;

- (void)setViewControllers:(NSArray&lt;__kindof UIViewController *&gt; *)viewControllers &#123;
    &#x2F;&#x2F; 获取当前 viewControllers
    NSArray&lt;__kindof UIViewController *&gt; *currentViewControllers &#x3D; self.viewControllers;
    if (viewControllers.count !&#x3D; currentViewControllers.count) &#123;  &#x2F;&#x2F; 数量不一致，获取差异控制器，得到索引，移除截图
        for (UIViewController *oldVC in currentViewControllers) &#123;
            if (![viewControllers containsObject:oldVC]) &#123;
                NSInteger index &#x3D; [currentViewControllers indexOfObject:oldVC];
                if (_screenshotImgs.count - 1 &gt;&#x3D; index) &#123;
                    [_screenshotImgs removeObjectAtIndex:index];
                &#125;
                [_animationController removeScreenShotAtIndex:index];
            &#125;
        &#125;
    &#125;
    [super setViewControllers:viewControllers];
&#125;

&#x2F;&#x2F; 使用上下文截图,并使用指定的区域裁剪,模板代码
- (void)screenShot &#123;
    &#x2F;&#x2F; 将要被截图的view,即窗口的根控制器的view(必须不含状态栏,默认ios7中控制器是包含了状态栏的)
    UIViewController *beyondVC &#x3D; self.view.window.rootViewController;
    &#x2F;&#x2F; 背景图片 总的大小
    CGSize size &#x3D; beyondVC.view.frame.size;
    &#x2F;&#x2F; 开启上下文,使用参数之后,截出来的是原图（YES  0.0 质量高）
    UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);
    &#x2F;&#x2F; 要裁剪的矩形范围
    CGRect rect &#x3D; CGRectMake(0, 0, ScreenWidth, ScreenHeight);
    &#x2F;&#x2F;注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代
    &#x2F;&#x2F;判读是导航栏是否有上层的Tabbar  决定截图的对象
    if (self.tabBarController &#x3D;&#x3D; beyondVC) &#123;
        [beyondVC.view drawViewHierarchyInRect:rect afterScreenUpdates:NO];
    &#125; else &#123;
        [self.view drawViewHierarchyInRect:rect afterScreenUpdates:NO];
    &#125;
    &#x2F;&#x2F; 从上下文中,取出UIImage
    UIImage *snapshot &#x3D; UIGraphicsGetImageFromCurrentImageContext();
    &#x2F;&#x2F; 添加截取好的图片到图片数组
    if (snapshot) &#123;
        [_screenshotImgs addObject:snapshot];
    &#125;

    &#x2F;&#x2F; 结束上下文(移除栈顶的基于当前位图的图形上下文)
    UIGraphicsEndImageContext();
&#125;

&#x2F;&#x2F; 监听手势的方法,只要是有手势就会执行
- (void)panGestureRec:(UIScreenEdgePanGestureRecognizer *)panGestureRec &#123;

    &#x2F;&#x2F; 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回
    if (self.visibleViewController &#x3D;&#x3D; self.viewControllers[0]) return;

    &#x2F;&#x2F; 判断pan手势的各个阶段
    switch (panGestureRec.state) &#123;
        case UIGestureRecognizerStateBegan:
            &#x2F;&#x2F; 开始拖拽阶段
            [self dragBegin];
            break;
        case UIGestureRecognizerStateCancelled:
        case UIGestureRecognizerStateFailed:
        case UIGestureRecognizerStateEnded:
            &#x2F;&#x2F; 结束拖拽阶段
            [self dragEnd];
            break;

        default:
            &#x2F;&#x2F; 正在拖拽阶段
            [self dragging:panGestureRec];
            break;
    &#125;
&#125;

#pragma mark 开始拖动,添加图片和遮罩
- (void)dragBegin &#123;
    &#x2F;&#x2F; 重点,每次开始Pan手势时,都要添加截图imageview 和 遮盖cover到window中
    [self.view.window insertSubview:_screenshotImgView atIndex:0];
    [self.view.window insertSubview:_coverView aboveSubview:_screenshotImgView];

    &#x2F;&#x2F; 并且,让imgView显示截图数组中的最后(最新)一张截图
    _screenshotImgView.image &#x3D; [_screenshotImgs lastObject];

    UIViewController *lastVC &#x3D; self.viewControllers.lastObject;
    if (lastVC) &#123;
        &#x2F;&#x2F; 隐藏键盘
        [lastVC.view endEditing:YES];
    &#125;

    &#x2F;&#x2F; 记录用户开始拖动的时间
    self.beginDraggingTime &#x3D; CFDateGetAbsoluteTime((CFDateRef)[NSDate date]);

    &#x2F;&#x2F; 记录用户开始拖动的偏移量Y值
    self.beginDraggingOffsetX &#x3D; 0;
&#125;

#pragma mark 正在拖动,动画效果的精髓,进行位移和透明度变化
- (void)dragging:(UIPanGestureRecognizer *)pan &#123;

    &#x2F;&#x2F; 得到手指拖动的位移
    CGFloat offsetX &#x3D; [pan translationInView:self.view].x;

    &#x2F;&#x2F; 让整个view都平移     &#x2F;&#x2F; 挪动整个导航view
    if (offsetX &gt; 0) &#123;
        self.view.transform &#x3D; CGAffineTransformMakeTranslation(offsetX, 0);
    &#125;

    &#x2F;&#x2F; 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3&#x2F;4时, 就让imageview完全显示，遮盖完全消失
    double currentTranslateScaleX &#x3D; offsetX &#x2F; self.view.frame.size.width;

    if (offsetX &lt; ScreenWidth) &#123;

        _screenshotImgView.transform &#x3D; CGAffineTransformMakeTranslation((offsetX - ScreenWidth) * 0.6, 0);
    &#125;

    &#x2F;&#x2F; 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例&#x2F;目标平衡比例)*默认的比例
    double alpha &#x3D; kDefaultAlpha - (currentTranslateScaleX &#x2F; kTargetTranslateScale) * kDefaultAlpha;
    _coverView.alpha &#x3D; alpha;
&#125;

#pragma mark 结束拖动,判断结束时拖动的距离作相应的处理,并将图片和遮罩从父控件上移除
- (void)dragEnd &#123;
    &#x2F;&#x2F; 取出挪动的距离
    CGFloat translateX &#x3D; self.view.transform.tx;
    &#x2F;&#x2F; 取出宽度
    CGFloat width &#x3D; self.view.frame.size.width;

    &#x2F;&#x2F; 记录用户结束拖动的时间
    self.endDraggingTime &#x3D; CFDateGetAbsoluteTime((CFDateRef)[NSDate date]);

    &#x2F;&#x2F; 记录用户结束拖动的偏移量Y值
    self.endDraggingOffsetX &#x3D; translateX;

    &#x2F;&#x2F; 计算得到间隔时间
    CFAbsoluteTime minusTime &#x3D; self.endDraggingTime - self.beginDraggingTime;
    &#x2F;&#x2F; 间隔offset
    CGFloat minusOffset &#x3D; self.endDraggingOffsetX - self.beginDraggingOffsetX;

    float draggingSpeed &#x3D; ABS(minusOffset) &#x2F; minusTime;

    HDLog(@&quot;滑动速度：%.0f&quot;, draggingSpeed);

    if (draggingSpeed &gt; limitDraggingSpeed || translateX &gt; ScreenWidth * 0.5) &#123;
        &#x2F;&#x2F; 如果手指移动的距离超过了屏幕的一半，或者滑动速度达到临界值，往右边挪
        [UIView animateWithDuration:0.25
            animations:^&#123;
                &#x2F;&#x2F; 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform
                self.view.transform &#x3D; CGAffineTransformMakeTranslation(width, 0);
                &#x2F;&#x2F; 让imageView位移还原
                self.screenshotImgView.transform &#x3D; CGAffineTransformMakeTranslation(0, 0);
                &#x2F;&#x2F; 让遮盖alpha变为0,变得完全透明
                self.coverView.alpha &#x3D; 0;
            &#125;
            completion:^(BOOL finished) &#123;
                &#x2F;&#x2F; 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零
                self.view.transform &#x3D; CGAffineTransformIdentity;
                &#x2F;&#x2F; 移除两个view,下次开始拖动时,再加回来
                [self.screenshotImgView removeFromSuperview];
                [self.coverView removeFromSuperview];

                &#x2F;&#x2F; 执行正常的Pop操作:移除栈顶控制器,让真正的前一个控制器成为导航控制器的栈顶控制器
                [self popViewControllerAnimated:NO];

                &#x2F;&#x2F; 重要~记得这时候,可以移除截图数组里面最后一张没用的截图了
                [self.animationController removeLastScreenShot];
            &#125;];
    &#125; else &#123;
        &#x2F;&#x2F; 如果手指移动的距离还不到屏幕的一半, 或者滑动速度未达到临界值，恢复原样
        [UIView animateWithDuration:0.25
            animations:^&#123;
                &#x2F;&#x2F; 重要~~让被右移的view弹回归位,只要清空transform即可办到
                self.view.transform &#x3D; CGAffineTransformIdentity;
                &#x2F;&#x2F; 让imageView大小恢复默认的translation
                self.screenshotImgView.transform &#x3D; CGAffineTransformMakeTranslation(-ScreenWidth, 0);
                &#x2F;&#x2F; 让遮盖的透明度恢复默认的alpha 1.0
                self.coverView.alpha &#x3D; kDefaultAlpha;
            &#125;
            completion:^(BOOL finished) &#123;
                &#x2F;&#x2F; 重要,动画完成之后,每次都要记得 移除两个view,下次开始拖动时,再添加进来
                [self.screenshotImgView removeFromSuperview];
                [self.coverView removeFromSuperview];
            &#125;];
    &#125;
&#125;
@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Swift-5，两个文件"><a href="#Swift-5，两个文件" class="headerlink" title="Swift 5，两个文件"></a>Swift 5，两个文件</h2><p>NavigationTransition.swift</p>
<pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span>
<span class="token comment">//  NavigationTransition.swift</span>
<span class="token comment">//  ViPay</span>
<span class="token comment">//</span>
<span class="token comment">//  Created by VanJay on 2019/6/30.</span>
<span class="token comment">//  Copyright © 2019 VanJay. All rights reserved.</span>
<span class="token comment">//</span>

<span class="token keyword">import</span> <span class="token class-name">UIKit</span>

<span class="token keyword">class</span> <span class="token class-name">NavigationTransition</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> navigationOperation<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token operator">!</span>
    <span class="token keyword">weak</span> <span class="token keyword">var</span> navigationController<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token operator">?</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">willSet</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> rootViewController <span class="token operator">=</span> navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span>rootViewController

            <span class="token keyword">if</span> rootViewController <span class="token operator">==</span> navigationController<span class="token operator">?</span><span class="token punctuation">.</span>tabBarController <span class="token punctuation">&#123;</span>
                isTabbarExist <span class="token operator">=</span> <span class="token boolean">true</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                isTabbarExist <span class="token operator">=</span> <span class="token boolean">false</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 导航栏Pop时删除了多少张截图（调用PopToViewController时，计算要删除的截图的数量）</span>
    <span class="token keyword">var</span> removeCount <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">private</span> <span class="token keyword">lazy</span> <span class="token keyword">var</span> screenShotArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">UIImage</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">/// 所属的导航栏有没有TabBarController</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> isTabbarExist<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>

    <span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token punctuation">(</span>operation<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        navigationOperation <span class="token operator">=</span> operation
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">convenience</span> <span class="token keyword">init</span><span class="token punctuation">(</span>operation<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">,</span> navigationController<span class="token punctuation">:</span> <span class="token class-name">UINavigationController</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        navigationOperation <span class="token operator">=</span> operation
        <span class="token keyword">self</span><span class="token punctuation">.</span>navigationController <span class="token operator">=</span> navigationController
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// MARK: - public methods</span>

    <span class="token comment">/// 调用此方法删除数组最后一张截图 (调用pop手势或一次pop多个控制器时使用)</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeLastScreenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        screenShotArray<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 移除全部屏幕截图</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeAllScreenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        screenShotArray<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 从截屏数组尾部移除指定数量的截图</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeLastScreenShot</span><span class="token punctuation">(</span>withNumber number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> number <span class="token punctuation">&#123;</span>
            screenShotArray<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/// 移除指定索引的截图</span>
    <span class="token keyword">func</span> <span class="token function-definition function">removeScreenShot</span><span class="token punctuation">(</span>at index<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">guard</span> screenShotArray<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> index <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">&#125;</span>
        screenShotArray<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">extension</span> <span class="token class-name">NavigationTransition</span><span class="token punctuation">:</span> <span class="token class-name">UIViewControllerAnimatedTransitioning</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// MARK: - UIViewControllerAnimatedTransitioning</span>

    <span class="token keyword">func</span> <span class="token function-definition function">transitionDuration</span><span class="token punctuation">(</span>using <span class="token omit keyword">_</span><span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">TimeInterval</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">0.25</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">func</span> <span class="token function-definition function">animateTransition</span><span class="token punctuation">(</span>using transitionContext<span class="token punctuation">:</span> <span class="token class-name">UIViewControllerContextTransitioning</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> screentImgView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> screenImg <span class="token operator">=</span> <span class="token function">screenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        screentImgView<span class="token punctuation">.</span>image <span class="token operator">=</span> screenImg

        <span class="token comment">// 取出fromViewController,fromView和toViewController，toView</span>
        <span class="token keyword">let</span> fromViewController <span class="token operator">=</span> <span class="token punctuation">(</span>transitionContext<span class="token punctuation">.</span><span class="token function">viewController</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UITransitionContextViewControllerKey</span><span class="token punctuation">.</span>from<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!</span>

        <span class="token keyword">let</span> toViewController <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">viewController</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UITransitionContextViewControllerKey</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span>
        <span class="token keyword">let</span> toView <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token class-name">UITransitionContextViewKey</span><span class="token punctuation">.</span>to<span class="token punctuation">)</span>

        <span class="token keyword">var</span> fromViewEndFrame <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">finalFrame</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> fromViewController<span class="token punctuation">)</span>
        fromViewEndFrame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width
        <span class="token keyword">var</span> fromViewStartFrame <span class="token operator">=</span> fromViewEndFrame
        <span class="token keyword">let</span> toViewEndFrame <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span><span class="token function">finalFrame</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> toViewController<span class="token operator">!</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> toViewStartFrame <span class="token operator">=</span> toViewEndFrame

        <span class="token keyword">let</span> containerView <span class="token operator">=</span> transitionContext<span class="token punctuation">.</span>containerView

        <span class="token keyword">if</span> navigationOperation <span class="token operator">==</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">.</span>push <span class="token punctuation">&#123;</span>
            screenShotArray<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>screenImg<span class="token punctuation">)</span>
            containerView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>toView<span class="token operator">!</span><span class="token punctuation">)</span>

            toView<span class="token operator">?</span><span class="token punctuation">.</span>frame <span class="token operator">=</span> toViewStartFrame

            <span class="token keyword">let</span> nextVC <span class="token operator">=</span> <span class="token class-name">UIView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>

            <span class="token comment">// 将截图添加到导航栏的View所属的window上</span>
            navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">insertSubview</span><span class="token punctuation">(</span>screentImgView<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
            nextVC<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span>cgColor
            nextVC<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOffset <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
            nextVC<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOpacity <span class="token operator">=</span> <span class="token number">0.6</span>
            navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>

            <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token function">transitionDuration</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> transitionContext<span class="token punctuation">)</span><span class="token punctuation">,</span> animations<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
                screentImgView<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>
                nextVC<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                screentImgView<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> navigationOperation <span class="token operator">==</span> <span class="token class-name">UINavigationController</span><span class="token punctuation">.</span><span class="token class-name">Operation</span><span class="token punctuation">.</span>pop <span class="token punctuation">&#123;</span>
            fromViewStartFrame<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span>
            containerView<span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>toView<span class="token operator">!</span><span class="token punctuation">)</span>

            <span class="token keyword">let</span> lastVcImgView <span class="token operator">=</span> <span class="token class-name">UIImageView</span><span class="token punctuation">(</span>frame<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">// 若removeCount大于0  则说明Pop了不止一个控制器</span>
            <span class="token keyword">if</span> removeCount <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> removeCount <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> i <span class="token operator">==</span> removeCount <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">// 当删除到要跳转页面的截图时，不再删除，并将该截图作为ToVC的截图展示</span>
                        lastVcImgView<span class="token punctuation">.</span>image <span class="token operator">=</span> screenShotArray<span class="token punctuation">.</span>last
                        removeCount <span class="token operator">=</span> <span class="token number">0</span>
                        <span class="token keyword">break</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                        screenShotArray<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                lastVcImgView<span class="token punctuation">.</span>image <span class="token operator">=</span> screenShotArray<span class="token punctuation">.</span>last
            <span class="token punctuation">&#125;</span>
            screentImgView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>black<span class="token punctuation">.</span>cgColor
            screentImgView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOffset <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">0.8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
            screentImgView<span class="token punctuation">.</span>layer<span class="token punctuation">.</span>shadowOpacity <span class="token operator">=</span> <span class="token number">0.6</span>
            navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>lastVcImgView<span class="token punctuation">)</span>
            navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">addSubview</span><span class="token punctuation">(</span>screentImgView<span class="token punctuation">)</span>

            <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token function">transitionDuration</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> transitionContext<span class="token punctuation">)</span><span class="token punctuation">,</span> animations<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
                screentImgView<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
                lastVcImgView<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span>
                lastVcImgView<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                screentImgView<span class="token punctuation">.</span><span class="token function">removeFromSuperview</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">self</span><span class="token punctuation">.</span>screenShotArray<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                transitionContext<span class="token punctuation">.</span><span class="token function">completeTransition</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">func</span> <span class="token function-definition function">screenShot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">UIImage</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 将要被截图的view,即窗口的根控制器的view(必须不含状态栏,默认ios7中控制器是包含了状态栏的)</span>
        <span class="token keyword">let</span> rootViewController <span class="token operator">=</span> navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token operator">?</span><span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span>rootViewController
        <span class="token comment">// 背景图片 总的大小</span>
        <span class="token keyword">let</span> size <span class="token operator">=</span> rootViewController<span class="token operator">!</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>size
        <span class="token comment">// 开启上下文,使用参数之后,截出来的是原图（YES  0.0 质量高）</span>
        <span class="token class-name">UIGraphicsBeginImageContextWithOptions</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span>
        <span class="token comment">// 要裁剪的矩形范围</span>
        <span class="token keyword">let</span> rect <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token class-name">UIScreen</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span>
        <span class="token comment">// 注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代</span>

        <span class="token comment">// 判读是导航栏是否有上层的Tabbar  决定截图的对象</span>
        <span class="token keyword">if</span> isTabbarExist <span class="token punctuation">&#123;</span>
            rootViewController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">drawHierarchy</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">,</span> afterScreenUpdates<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            navigationController<span class="token operator">?</span><span class="token punctuation">.</span>view<span class="token punctuation">.</span><span class="token function">drawHierarchy</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rect<span class="token punctuation">,</span> afterScreenUpdates<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 从上下文中,取出UIImage</span>
        <span class="token keyword">let</span> snapshot <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 结束上下文(移除栈顶的基于当前位图的图形上下文)</span>
        <span class="token class-name">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// 返回截取好的图片</span>
        <span class="token keyword">return</span> snapshot<span class="token operator">!</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>NavigationController.swift</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;
&#x2F;&#x2F;  NavigationController.swift
&#x2F;&#x2F;  ViPay
&#x2F;&#x2F;
&#x2F;&#x2F;  Created by VanJay on 2019&#x2F;6&#x2F;30.
&#x2F;&#x2F;  Copyright © 2019 VanJay. All rights reserved.
&#x2F;&#x2F;

import UIKit

class NavigationController: UINavigationController &#123;
    &#x2F;&#x2F;&#x2F; 临界滚动速度
    private let limitDraggingSpeed: CGFloat &#x3D; 800.0
    &#x2F;&#x2F;&#x2F; 默认的将要变透明的遮罩的初始透明度(全黑)
    private let kDefaultAlpha: CGFloat &#x3D; 0.6
    &#x2F;&#x2F;&#x2F; 当拖动的距离,占了屏幕的总宽高的 3&#x2F;4 时, 就让imageview完全显示，遮盖完全消失
    private let kTargetTranslateScale: CGFloat &#x3D; 0.75
    private var panGestureRec: UIScreenEdgePanGestureRecognizer!
    private var screenshotImgView: UIImageView!
    private var coverView: UIView!
    private var screenshotImgs: [UIImage]!
    private var nextVCScreenShotImg: UIImage?
    private lazy var animationController: NavigationTransition &#x3D; &#123;
        NavigationTransition()
    &#125;()

    &#x2F;&#x2F;&#x2F; 记录用户开始拖动的时间
    private var beginDraggingTime: TimeInterval &#x3D; 0.0
    &#x2F;&#x2F;&#x2F; 记录用户结束拖动的时间
    private var endDraggingTime: TimeInterval &#x3D; 0.0
    &#x2F;&#x2F;&#x2F; 记录用户开始拖动的偏移量X值
    private var beginDraggingOffsetX: CGFloat &#x3D; 0.0
    &#x2F;&#x2F;&#x2F; 记录用户结束拖动的偏移量X值
    private var endDraggingOffsetX: CGFloat &#x3D; 0.0

    override func viewDidLoad() &#123;
        super.viewDidLoad()

        delegate &#x3D; self

        navigationBar.tintColor &#x3D; UIColor(hexString: &quot;#6F7179&quot;)

        view.layer.shadowColor &#x3D; UIColor.black.cgColor
        view.layer.shadowOffset &#x3D; CGSize(width: -0.8, height: 0)
        view.layer.shadowOpacity &#x3D; 0.6

        &#x2F;&#x2F; 1,创建Pan手势识别器,并绑定监听方法
        let panGestureRec &#x3D; UIScreenEdgePanGestureRecognizer(target: self, action: #selector(screenEdgeSwiped))
        panGestureRec.edges &#x3D; .left
        &#x2F;&#x2F; 为导航控制器的view添加Pan手势识别器
        view.addGestureRecognizer(panGestureRec)
        self.panGestureRec &#x3D; panGestureRec

        &#x2F;&#x2F; 2.创建截图的ImageView
        screenshotImgView &#x3D; UIImageView()
        &#x2F;&#x2F; app的frame是包括了状态栏高度的frame
        screenshotImgView.frame &#x3D; CGRect(x: 0, y: 0, width: UIScreen.width, height: UIScreen.height)

        &#x2F;&#x2F; 3.创建截图上面的黑色半透明遮罩
        coverView &#x3D; UIView()
        &#x2F;&#x2F; 遮罩的frame就是截图的frame
        coverView.frame &#x3D; screenshotImgView.frame
        &#x2F;&#x2F; 遮罩为黑色
        coverView.backgroundColor &#x3D; .black

        &#x2F;&#x2F; 4.存放所有的截图数组初始化
        screenshotImgs &#x3D; [UIImage]()
    &#125;

    &#x2F;&#x2F; MARK: - event

    @objc func screenEdgeSwiped(_ recognizer: UIScreenEdgePanGestureRecognizer) &#123;
        &#x2F;&#x2F; 如果当前显示的控制器已经是根控制器了，不需要做任何切换动画,直接返回
        guard visibleViewController !&#x3D; viewControllers[0]
        else &#123;
            return
        &#125;

        &#x2F;&#x2F; 判断pan手势的各个阶段
        switch panGestureRec.state &#123;
        case .began:
            &#x2F;&#x2F; 开始拖拽阶段
            dragBegin()
        case .cancelled, .failed, .ended:
            &#x2F;&#x2F; 结束拖拽阶段
            dragEnd()

        default:
            &#x2F;&#x2F; 正在拖拽阶段
            dragging(recognizer: recognizer)
        &#125;
    &#125;

    &#x2F;&#x2F; MARK: - override

    override func pushViewController(_ viewController: UIViewController, animated: Bool) &#123;
        &#x2F;&#x2F; 只有在导航控制器里面有子控制器的时候才需要截图
        if viewControllers.count &gt;&#x3D; 1 &#123;
            &#x2F;&#x2F; 调用自定义方法,使用上下文截图
            screenShot()
        &#125;
        super.pushViewController(viewController, animated: animated)
    &#125;

    override func popViewController(animated: Bool) -&gt; UIViewController? &#123;
        let index &#x3D; viewControllers.count

        if screenshotImgs.count &gt;&#x3D; index - 1 &#123;
            screenshotImgs.removeLast()
        &#125;

        return super.popViewController(animated: animated)
    &#125;

    override func popToViewController(_ viewController: UIViewController, animated: Bool) -&gt; [UIViewController]? &#123;
        var removeCount &#x3D; 0
        var count &#x3D; viewControllers.count - 1
        while count &gt; 0 &#123;
            if viewController &#x3D;&#x3D; viewControllers[count] &#123;
                break
            &#125;

            count &#x3D; count - 1
            removeCount &#x3D; removeCount + 1
        &#125;
        animationController.removeCount &#x3D; removeCount
        return super.popToViewController(viewController, animated: animated)
    &#125;

    override func popToRootViewController(animated: Bool) -&gt; [UIViewController]? &#123;
        screenshotImgs.removeAll()
        animationController.removeAllScreenShot()
        return super.popToRootViewController(animated: animated)
    &#125;

    override func setViewControllers(_ viewControllers: [UIViewController], animated: Bool) &#123;
        &#x2F;&#x2F; 获取当前 viewControllers
        let currentViewControllers &#x3D; self.viewControllers
        if viewControllers.count !&#x3D; currentViewControllers.count &#123; &#x2F;&#x2F; 数量不一致，获取差异控制器，得到索引，移除截图
            for case let oldVC in currentViewControllers as [UIViewController] &#123;
                if !viewControllers.contains(oldVC) &#123;
                    if let index &#x3D; currentViewControllers.firstIndex(of: oldVC) &#123;
                        if screenshotImgs.count - 1 &gt;&#x3D; index &#123;
                            screenshotImgs.remove(at: index)
                        &#125;
                        animationController.removeScreenShot(at: index)
                    &#125;
                &#125;
            &#125;
        &#125;
        super.setViewControllers(viewControllers, animated: animated)
    &#125;

    &#x2F;&#x2F; MARK: - provate methods

    &#x2F;&#x2F;&#x2F; 拖动开始
    private func dragBegin() &#123;
        &#x2F;&#x2F; 重点,每次开始Pan手势时,都要添加截图imageview 和 遮盖cover到window中
        view.window?.insertSubview(screenshotImgView, at: 0)
        view.window?.insertSubview(coverView, aboveSubview: screenshotImgView)

        &#x2F;&#x2F; 并且,让imgView显示截图数组中的最后(最新)一张截图
        screenshotImgView.image &#x3D; screenshotImgs.last

        if let lastVC &#x3D; self.viewControllers.last &#123;
            &#x2F;&#x2F; 隐藏键盘
            lastVC.view.endEditing(true)
        &#125;

        &#x2F;&#x2F; 记录用户开始拖动的时间
        beginDraggingTime &#x3D; Date().timeIntervalSince1970

        &#x2F;&#x2F; 记录用户开始拖动的偏移量Y值
        beginDraggingOffsetX &#x3D; 0
    &#125;

    &#x2F;&#x2F;&#x2F; 拖动结束
    private func dragEnd() &#123;
        &#x2F;&#x2F; 取出挪动的距离
        let translateX &#x3D; view.transform.tx
        &#x2F;&#x2F; 取出宽度
        let width &#x3D; view.frame.size.width

        &#x2F;&#x2F; 记录用户结束拖动的时间
        endDraggingTime &#x3D; Date().timeIntervalSince1970

        &#x2F;&#x2F; 记录用户结束拖动的偏移量Y值
        endDraggingOffsetX &#x3D; translateX

        &#x2F;&#x2F; 计算得到间隔时间
        let minusTime &#x3D; endDraggingTime - beginDraggingTime
        &#x2F;&#x2F; 间隔offset
        let minusOffset &#x3D; endDraggingOffsetX - beginDraggingOffsetX

        let draggingSpeed &#x3D; abs(CGFloat(minusOffset)) &#x2F; CGFloat(minusTime)

        printLog(&quot;滑动速度:\(draggingSpeed)&quot;)

        if draggingSpeed &gt; limitDraggingSpeed || translateX &gt; UIScreen.width * 0.5 &#123;
            &#x2F;&#x2F; 如果手指移动的距离超过了屏幕的一半，或者滑动速度达到临界值，往右边挪
            UIView.animate(withDuration: 0.25, animations: &#123;
                &#x2F;&#x2F; 让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform
                self.view.transform &#x3D; CGAffineTransform(translationX: width, y: 0)
                &#x2F;&#x2F; 让imageView位移还原
                self.screenshotImgView.transform &#x3D; CGAffineTransform(translationX: 0, y: 0)
                &#x2F;&#x2F; 让遮盖alpha变为0,变得完全透明
                self.coverView.alpha &#x3D; 0
            &#125;) &#123; _ in
                &#x2F;&#x2F; 重要~~让被右移的view完全挪到屏幕的最右边,结束之后,还要记得清空view的transform,不然下次再次开始drag时会出问题,因为view的transform没有归零
                self.view.transform &#x3D; CGAffineTransform.identity
                &#x2F;&#x2F; 移除两个view,下次开始拖动时,再加回来
                self.screenshotImgView.removeFromSuperview()
                self.coverView.removeFromSuperview()

                &#x2F;&#x2F; 执行正常的Pop操作:移除栈顶控制器,让真正的前一个控制器成为导航控制器的栈顶控制器
                _ &#x3D; self.popViewController(animated: false)

                &#x2F;&#x2F; 重要~记得这时候,可以移除截图数组里面最后一张没用的截图了
                self.animationController.removeLastScreenShot()
            &#125;
        &#125; else &#123;
            &#x2F;&#x2F; 如果手指移动的距离还不到屏幕的一半, 或者滑动速度未达到临界值，恢复原样
            UIView.animate(withDuration: 0.25, animations: &#123;
                &#x2F;&#x2F; 重要~~让被右移的view弹回归位,只要清空transform即可办到
                self.view.transform &#x3D; CGAffineTransform.identity
                &#x2F;&#x2F; 让imageView大小恢复默认的translation
                self.screenshotImgView.transform &#x3D; CGAffineTransform(translationX: -UIScreen.width, y: 0)
                &#x2F;&#x2F; 让遮盖的透明度恢复默认的alpha 1.0
                self.coverView.alpha &#x3D; self.kDefaultAlpha
            &#125;) &#123; _ in
                &#x2F;&#x2F; 重要,动画完成之后,每次都要记得 移除两个view,下次开始拖动时,再添加进来
                self.screenshotImgView.removeFromSuperview()
                self.coverView.removeFromSuperview()
            &#125;
        &#125;
    &#125;

    &#x2F;&#x2F;&#x2F; 正在拖动
    private func dragging(recognizer: UIScreenEdgePanGestureRecognizer) &#123;
        &#x2F;&#x2F; 得到手指拖动的位移
        let offsetX &#x3D; recognizer.translation(in: view).x

        &#x2F;&#x2F; 让整个view都平移
        &#x2F;&#x2F; 挪动整个导航view
        if offsetX &gt; 0 &#123;
            view.transform &#x3D; CGAffineTransform(translationX: offsetX, y: 0)
        &#125;

        &#x2F;&#x2F; 计算目前手指拖动位移占屏幕总的宽高的比例,当这个比例达到3&#x2F;4时, 就让imageview完全显示，遮盖完全消失
        let currentTranslateScaleX &#x3D; offsetX &#x2F; view.frame.size.width

        if offsetX &lt; UIScreen.width &#123;
            screenshotImgView.transform &#x3D; CGAffineTransform(translationX: (offsetX - UIScreen.width) * 0.6, y: 0)
        &#125;

        &#x2F;&#x2F; 让遮盖透明度改变,直到减为0,让遮罩完全透明,默认的比例-(当前平衡比例&#x2F;目标平衡比例)*默认的比例
        let alpha &#x3D; kDefaultAlpha - currentTranslateScaleX &#x2F; kTargetTranslateScale * kDefaultAlpha
        coverView.alpha &#x3D; alpha
    &#125;

    private func screenShot() &#123;
        &#x2F;&#x2F; 将要被截图的view,即窗口的根控制器的view(必须不含状态栏,默认ios7中控制器是包含了状态栏的)
        let rootViewController &#x3D; view.window?.rootViewController
        &#x2F;&#x2F; 背景图片 总的大小
        let size &#x3D; rootViewController?.view.frame.size
        &#x2F;&#x2F; 开启上下文,使用参数之后,截出来的是原图（YES  0.0 质量高）
        UIGraphicsBeginImageContextWithOptions(size!, true, 0.0)
        &#x2F;&#x2F; 要裁剪的矩形范围
        let rect &#x3D; CGRect(x: 0, y: 0, width: UIScreen.width, height: UIScreen.height)
        &#x2F;&#x2F; 注：iOS7以后renderInContext：由drawViewHierarchyInRect：afterScreenUpdates：替代
        &#x2F;&#x2F; 判读是导航栏是否有上层的Tabbar  决定截图的对象
        if tabBarController &#x3D;&#x3D; rootViewController &#123;
            rootViewController?.view.drawHierarchy(in: rect, afterScreenUpdates: false)
        &#125; else &#123;
            view.drawHierarchy(in: rect, afterScreenUpdates: false)
        &#125;
        &#x2F;&#x2F; 从上下文中,取出UIImage
        let snapshot &#x3D; UIGraphicsGetImageFromCurrentImageContext()
        &#x2F;&#x2F; 添加截取好的图片到图片数组
        if snapshot !&#x3D; nil &#123;
            screenshotImgs.append(snapshot!)
        &#125;

        &#x2F;&#x2F; 结束上下文(移除栈顶的基于当前位图的图形上下文)
        UIGraphicsEndImageContext()
    &#125;
&#125;

extension NavigationController: UINavigationControllerDelegate &#123;
    &#x2F;&#x2F; MARK: - UINavigationControllerDelegate

    func navigationController(_: UINavigationController, animationControllerFor operation: UINavigationController.Operation, from _: UIViewController, to _: UIViewController) -&gt; UIViewControllerAnimatedTransitioning? &#123;
        animationController.navigationOperation &#x3D; operation
        animationController.navigationController &#x3D; self
        return animationController
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>继承自导航控制器即可。可用 runtime 实现这套需求，但个人觉得没必要，对于开发，能正向常规完成的 ，尽量不使用逆向或者 hook 等方式，避免一些怪异 bug 的产生（一般不会）。</p>
]]></content>
      <categories>
        <category>iOS 开发</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>iOS</tag>
        <tag>Swift</tag>
        <tag>导航栏</tag>
      </tags>
  </entry>
  <entry>
    <title>更改 React Native 默认 ios、android 项目文件夹</title>
    <url>/2018/09/10/%E6%9B%B4%E6%94%B9-React-Native-%E9%BB%98%E8%AE%A4-ios%E3%80%81android-%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>来到新公司也有一个月了，完成 iOS 端洞客项目<code>V1.3.0-V1.4.0</code>的升级，虽然只是一个小版本的升级，但我在熟悉项目过程当中发现项目垃圾代码实在太多了，别说我了，一般的接锅人看了也难以忍受，在痛苦了几天之后我默默拉了一个新 git 分支改起来，使用 <code>clang format</code>规范化了整个项目的代码，后面结合<code>git hook</code>在<code>git commit</code>前自动<code>reformat</code>代码，这一步可以说是非常爽了。直到今天，我之前简单看了一下，<code>check out</code>到我改之前和改之后的代码，少了有5000+行代码，删除了几十个类文件，但里面还是充斥着大量的垃圾或者不合理的代码。开发完<code>1.4.0</code>，稍微看起来闲了一两天，被个喜欢行使小权利的前端小组长安装研习 <code>React Native</code>，准备接入原生项目，暂时用于替换一个改动比较频繁的详情页，之前就有自己学习过，但是都忘光了，又复习一遍，趁热记录一些小 tip。</p>
<span id="more"></span>

<h1 id="接入原生-OC-项目"><a href="#接入原生-OC-项目" class="headerlink" title="接入原生 OC 项目"></a>接入原生 OC 项目</h1><p>这一步我会专门写一篇 blog 来记录，因为还是有踩几个坑的。</p>
<h1 id="更改-iOS-和-Android-项目名"><a href="#更改-iOS-和-Android-项目名" class="headerlink" title="更改 iOS 和 Android 项目名"></a>更改 iOS 和 Android 项目名</h1><p>本来原生开发的好好的，顶层文件夹用的是项目名，要接入 RN，用的方案也是 RN 顶层文件夹包含安卓和 iOS 项目，但 RN 默认只认 ios 和 android 两个文件夹作为项目路径，google 了一番找了找<a href="https://reactnative.cn/">官方文档</a>没看到有关于这里的自定义，看看 cli 里有没有相关 help，看了下，确实有，如下：</p>
<h2 id="查看react-native-cli帮助"><a href="#查看react-native-cli帮助" class="headerlink" title="查看react-native cli帮助"></a>查看<code>react-native cli</code>帮助</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  mobile-dongke-RN [RN-integration] ⚡ react-native run-ios --help

  react-native run-ios [options]
  builds your app and starts it on iOS simulator

  Options:

    --simulator [string]      Explicitly set simulator to use (default: iPhone 6)
    --configuration [string]  Explicitly set the scheme configuration to use
    --scheme [string]         Explicitly set Xcode scheme to use
    --project-path [string]   Path relative to project root where the Xcode project (.xcodeproj) lives. The default is &#39;ios&#39;. (default: ios)
    --device [string]         Explicitly set device to use by name.  The value is not required if you have a single device connected.
    --udid [string]           Explicitly set device to use by udid
    --no-packager             Do not launch packager while building
    --verbose                 Do not use xcpretty even if installed
    --port [number]            (default: 8081)
    --config [string]         Path to the CLI configuration file
    -h, --help                output usage information<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看到可以通过设置<code>--project-path</code>参数来设置关联 XCode 项目的根文件夹，可以看到这里还可以指定模拟器类型，默认使用的是<code>iPhone 6</code>，挺不喜欢的，这里也改了，我们可以通过运行如下命令查看本机有哪些模拟器可以使用：</p>
<h2 id="查看本机可用模拟器"><a href="#查看本机可用模拟器" class="headerlink" title="查看本机可用模拟器"></a>查看本机可用模拟器</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  ~  xcrun simctl list devices
&#x3D;&#x3D; Devices &#x3D;&#x3D;
-- iOS 8.1 --
    iPhone 4s (E62E0A29-BCEE-4BB1-B27C-1D5CC225C6B0) (Shutdown)
    iPhone 5 (2D4FE14B-E33D-491C-B919-3352FA32B03A) (Shutdown)
    iPhone 5s (A90FF130-CDE8-4D60-AEFE-9DAA4ACA8F9A) (Shutdown)
    iPhone 6 (518A2EFE-1AD8-47AD-B5AC-F2424D55444D) (Shutdown)
    iPhone 6 Plus (4BFB145F-1D34-4BE9-9A1B-2EBED4F11DEC) (Shutdown)
    iPad 2 (83D02E68-7184-4ABF-B6D6-33A9CA056BF0) (Shutdown)
    iPad Retina (5D2B27ED-87F1-4ADD-8333-31FE4B239EDA) (Shutdown)
    iPad Air (07AC87B1-9C9B-4645-975E-861CFFB323A3) (Shutdown)
-- iOS 10.0 --
    iPhone 5 (43372734-B0C6-4C7B-85C0-DFC41F9B9883) (Shutdown)
    iPhone 5s (5D88D6F2-4683-4DC2-8FBA-7F762683E22C) (Shutdown)
    iPhone 6 (CFFB2105-C2A6-4EEC-91F2-2F805F0F94DF) (Shutdown)
    iPhone 6 Plus (C4B1BC99-AF7B-4F11-8752-DA5C18676428) (Shutdown)
    iPhone 6s (2D4D0793-6794-4AAF-BC82-BC7313D749D1) (Shutdown)
    iPhone 6s Plus (BBA3565D-3705-419F-9ABE-994C218B27B0) (Shutdown)
    iPhone SE (4DB18D89-DA99-4D66-9B18-7ED30A0D9491) (Shutdown)
    iPad Air (50E6ADA1-B589-43D1-A3A9-B653EC43D298) (Shutdown)
    iPad Air 2 (15331EA9-7F84-4D63-B36E-FE15C5F89E96) (Shutdown)
    iPad Pro (9.7 inch) (6A23335C-9A5A-4B84-B671-1F60E5A0E1D0) (Shutdown)
    iPad Pro (12.9 inch) (451FBDD2-AD2D-4E53-8025-DEA420376618) (Shutdown)
-- iOS 12.0 --
    iPhone 5s (89879C1B-D07C-4D4E-BC62-6525A9BB4B7B) (Shutdown)
    iPhone 6 (D437284B-3464-4F81-9AA7-A19690B80892) (Shutdown)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="编写简单的-Shell，省去每次敲烦恼"><a href="#编写简单的-Shell，省去每次敲烦恼" class="headerlink" title="编写简单的 Shell，省去每次敲烦恼"></a>编写简单的 Shell，省去每次敲烦恼</h2><p>这样我们选自己想使用的模拟器、自定义项目路径这两件都 OK 了，最后我们可以编写一个 Shell 脚本，就不用每次都要手敲了，在 RN 项目根路径下运行：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  mobile-dongke-RN [RN-integration] ⚡ touch run-ios-iPhone_8.sh
☁  mobile-dongke-RN [RN-integration] ⚡ echo -e &quot;#\!&#x2F;bin&#x2F;bash\n\nreact-native run-ios --project-path &quot;.&#x2F;puma&quot; --simulator &quot;iPhone 8&quot;&quot; &gt;&gt; run-ios-iPhone_8.sh
☁  mobile-dongke-RN [RN-integration] ⚡ chmod +x run-ios-iPhone_8.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="使用Shell脚本启动iOS项目"><a href="#使用Shell脚本启动iOS项目" class="headerlink" title="使用Shell脚本启动iOS项目"></a>使用<code>Shell</code>脚本启动<code>iOS</code>项目</h1><p>下次运行直接运行<code>run-ios-iPhone_8.sh</code>就好了，当然你也可以直接从 XCode 启动项目。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  mobile-dongke-RN [RN-integration] ⚡ .&#x2F;run-ios-iPhone_8.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="安卓端项目路径自定义"><a href="#安卓端项目路径自定义" class="headerlink" title="安卓端项目路径自定义"></a>安卓端项目路径自定义</h1><p>同理我们可以运行<code>react-native run-android --help</code>查看帮助，可以看到可以通过指定<code>--root</code>参数来设置，读者可以根据帮助自行设置。</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">☁  mobile-dongke-RN [RN-integration] ⚡ react-native run-android --help

  react-native run-android [options]
  builds your app and starts it on a connected Android emulator or device

  Options:

    --install-debug
    --root [string]           Override the root directory for the android build (which contains the android directory) (default: )
    --flavor [string]         --flavor has been deprecated. Use --variant instead
    --variant [string]
    --appFolder [string]      Specify a different application folder name for the android source. (default: app)
    --appId [string]          Specify an applicationId to launch after build. (default: )
    --appIdSuffix [string]    Specify an applicationIdSuffix to launch after build. (default: )
    --main-activity [string]  Name of the activity to start (default: MainActivity)
    --deviceId [string]       builds your app and starts it on a specific device&#x2F;simulator with the given device id (listed by running &quot;adb devices&quot; on the command line).
    --no-packager             Do not launch packager while building
    --port [number]            (default: 8081)
    --terminal [string]       Launches the Metro Bundler in a new window using the specified terminal path. (default: )
    --config [string]         Path to the CLI configuration file
    -h, --help                output usage information<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
  </entry>
  <entry>
    <title>现有工程 Xcode 16 适配指南</title>
    <url>/2024/09/25/%E7%8E%B0%E6%9C%89%E5%B7%A5%E7%A8%8B-Xcode-16-%E9%80%82%E9%85%8D%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>现有工程 Xcode 16 适配，备忘</p>
<span id="more"></span>

<h2 id="头文件-import-处理"><a href="#头文件-import-处理" class="headerlink" title="头文件  import 处理"></a>头文件  import 处理</h2><p>报错的位置直接根据报错信息导入对应头文件</p>
<h2 id="maskView-替换"><a href="#maskView-替换" class="headerlink" title="maskView 替换"></a>maskView 替换</h2><p>Xcode 正则搜索：</p>
<pre class="line-numbers language-none"><code class="language-none">@property\s*\((.*?)\)\s*(\w+)\s*\*\s*maskView;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>替换为</p>
<pre class="line-numbers language-none"><code class="language-none">@property ($1) $2 *kgMaskView;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>该操作会将类似 </p>
<pre class="line-numbers language-none"><code class="language-none">@property (nonatomic, strong) UIImageView  *maskView;
@property (nonatomic, strong) UIButton  *maskView;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>替换为</p>
<pre class="line-numbers language-none"><code class="language-none">@property (nonatomic, strong) UIImageView  *kgMaskView;
@property (nonatomic, strong) UIButton  *kgMaskView;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>再搜索 <code>_maskView</code> 替换为 <code> _kgMaskView</code></p>
<p>注意，再使用 <code>git</code> 查看替换到的地方，手动鉴别 <code>.maskView</code> 需要的是自定义的还是系统定义的，酌情修改替换.</p>
<h2 id="UIApplication-openURL-替换"><a href="#UIApplication-openURL-替换" class="headerlink" title="-[UIApplication openURL:] 替换"></a>-[UIApplication openURL:] 替换</h2><p>正则搜索 </p>
<pre class="line-numbers language-none"><code class="language-none">\[\s*\[?\s*\w+\s+sharedApplication\s*\]?\s*openURL:\s*\w+\s*\]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在调用处后面添加</p>
<pre class="line-numbers language-none"><code class="language-none">options:@&#123;&#125; completionHandler:nil<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意，有些需要同步拿返回值的需要改为在 <code>completionHandler</code> 中处理。</p>
]]></content>
  </entry>
  <entry>
    <title>航母iOS启动优化实践小记</title>
    <url>/2023/10/24/%E8%88%AA%E6%AF%8DiOS%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着应用的不断迭代和功能的增加，我可能会发现应用的启动时间变得更长。特别是在iOS平台上，启动速度是用户体验的一个非常关键的指标。如果应用启动时间过长，可能会导致用户流失，因为他们不愿意等待这么长的时间。为此，本文将介绍我针对航母的iOS启动时长优化实践。</p>
<span id="more"></span>

<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="启动相关概念及优化方向确定"><a href="#启动相关概念及优化方向确定" class="headerlink" title="启动相关概念及优化方向确定"></a>启动相关概念及优化方向确定</h2><h3 id="启动的定义"><a href="#启动的定义" class="headerlink" title="启动的定义"></a>启动的定义</h3><p>启动通常被定义为两种：</p>
<ul>
<li>广义：从用户点击应用图标到应用的首页数据完全加载完成。</li>
<li>狭义：从用户点击应用图标到Launch Image完全消失的那一刻。</li>
</ul>
<p>对于“航母”来说，其首页数据加载完毕的标志是视频的第一帧开始播放。而对于其他首页主要展示静态内容的App来说，当Launch Image消失时，就可以认为首页数据已经加载完成。由于不同App的启动标准难以统一，我通常采用狭义的定义：<strong>启动的终点是当启动图完全消失后的首帧</strong>。</p>
<blockquote>
<p>Tips：理想的启动时间应该控制在400ms以内，因为标准的启动动画时长为400ms。</p>
</blockquote>
<h3 id="启动的种类"><a href="#启动的种类" class="headerlink" title="启动的种类"></a>启动的种类</h3><p>根据不同的启动场景，启动可以划分为三大类：冷启动、热启动和回到前台。</p>
<ul>
<li>冷启动：App在系统中没有任何进程缓存信息的情况下启动，如重启手机后首次打开App。</li>
<li>热启动：当App进程被终止，但随后很快再次启动，这种启动被称为热启动，因为进程的缓存信息仍然存在。</li>
<li>回前台：这通常不被定义为启动，因为此时App进程仍然存在，只是从suspended状态转到了active状态。</li>
</ul>
<p>实际上，针对线上用户的启动类型，到底是冷启动占比较大还是热启动占比较大，这与产品的使用频次密切相关。如果一个App的使用频次非常高，则热启动的比例相对较大。航母作为一款头部音乐类应用，打开频次较高，故热启动比例高。</p>
<h3 id="启动流程-引用自-抖音品质建设-iOS启动优化《原理篇》"><a href="#启动流程-引用自-抖音品质建设-iOS启动优化《原理篇》" class="headerlink" title="启动流程 引用自 抖音品质建设 - iOS启动优化《原理篇》"></a>启动流程 引用自 <a href="https://juejin.cn/post/6887741815529832456#heading-7">抖音品质建设 - iOS启动优化《原理篇》</a></h3><ul>
<li>点击图标，创建进程：用户点击App图标后，系统开始为App分配进程资源。</li>
<li>mmap 主二进制，找到 dyld 的路径：系统映射应用的主二进制到内存，并查找动态链接编辑器的路径。</li>
<li>mmap dyld，把入口地址设为_dyld_start：系统将dyld加载到内存，并设置其入口地址。</li>
<li>重启手机&#x2F;更新&#x2F;下载 App 的第一次启动，会创建启动闭包：在特定条件下，系统会为应用创建启动闭包，用于加速之后的启动。</li>
<li>把没有加载的动态库 mmap 进来，动态库的数量会影响这个阶段：应用需要的所有未加载的动态库被映射到内存。</li>
<li>对每个二进制做 bind 和 rebase，主要耗时在 Page In，影响 Page In 数量的是 objc 的元数据：进行地址绑定和基址重定位，其中Page In的数量受到Objective-C元数据的影响。</li>
<li>初始化 objc 的 runtime，由于闭包已经初始化了大部分，这里只会注册 sel 和装载 category：Objective-C运行时进行初始化，包括注册选择器和加载类别。</li>
<li>+load 和静态初始化被调用，除了方法本身耗时，这里还会引起大量 Page In：调用类的+load方法和进行其他静态初始化。</li>
<li>初始化 UIApplication，启动 Main Runloop：UIApplication对象被初始化，并启动主RunLoop。</li>
<li>执行 will&#x2F;didFinishLaunch，这里主要是业务代码耗时：调用应用代理的启动相关方法，此时主要的耗时是由业务代码导致的。</li>
<li>Layout，viewDidLoad 和 Layoutsubviews 会在这里调用，Autolayout 太多会影响这部分时间：界面布局开始，相关的界面生命周期方法被调用。</li>
<li>Display，drawRect 会调用：界面进行渲染，视图的drawRect方法被调用。</li>
<li>Prepare，图片解码发生在这一步：图片资源进行解码。</li>
<li>Commit，首帧渲染数据打包发给 RenderServer，启动结束：界面的首帧渲染数据被发送给RenderServer，此时应用启动完成。</li>
</ul>
<h3 id="启动阶段及确定优化方向"><a href="#启动阶段及确定优化方向" class="headerlink" title="启动阶段及确定优化方向"></a>启动阶段及确定优化方向</h3><p>iOS应用的启动过程可以大致分为两个阶段：pre-main阶段和main函数之后到didFinishLaunchingWithOptions阶段，所以优化方向可以基本确定在这两个阶段。</p>
<h4 id="1-pre-main-阶段"><a href="#1-pre-main-阶段" class="headerlink" title="1. pre-main 阶段:"></a>1. pre-main 阶段:</h4><p>这一阶段是从应用启动到main函数被调用之前的时间段。在这个阶段，大部分时间被用于动态链接器加载和初始化应用的动态库，解析Objective-C的runtime数据结构，以及调用类和分类的+load方法。</p>
<p>优化方向：</p>
<ul>
<li><p>减少动态库数量: 每一个动态库的加载都会增加启动时间。考虑合并多个小的动态库，或者将动态库转化为静态库。</p>
<blockquote>
<p>这一步航母动态库数量有限，且影响较大的是Flutter和Zego
  </p>
</blockquote>
</li>
<li><p>避免过多的类和分类加载: 减少使用+load方法，或者将这些初始化工作延迟到应用启动后。</p>
<blockquote>
<p>除安全函数的hook外，其他耗时的已延后放到 initialize（这个被证实无用，因为操作的类initialize时间还是在启动阶段内，只是换了个时机），且已尝试将40多个安全函数的load换到同一个地方调用（即使用一个load），仅仅节约了4ms，考虑到收益比，故而还原了此修改。</p>
</blockquote>
</li>
<li><p>启动闭包: 因为使用了dyld3\dyld4，会创建启动闭包来加速启动，但这需要确保应用的动态库和数据结构在每次更新后都没有太大变化。</p>
<blockquote>
<p>尝试了启动阶段二进制重排，实测缺页次数大大减少，但是总体启动时间并没有多大变换（热启动下）。</p>
</blockquote>
</li>
<li><p>优化Objective-C的runtime数据结构: 减少C++静态初始化、减少Objective-C类和分类的数量。</p>
<blockquote>
<p>工作量太大，要减少大量的类和分类才有收益，有业内测试，20000个类，800ms左右，故而没尝试。</p>
</blockquote>
</li>
</ul>
<h4 id="2-main-函数之后到-didFinishLaunchingWithOptions-阶段"><a href="#2-main-函数之后到-didFinishLaunchingWithOptions-阶段" class="headerlink" title="2. main 函数之后到 didFinishLaunchingWithOptions 阶段:"></a>2. main 函数之后到 didFinishLaunchingWithOptions 阶段:</h4><p>这一阶段是从main函数被调用到application:didFinishLaunchingWithOptions:方法返回之前的时间段。在这个阶段，主要是应用框架和业务代码的初始化工作。</p>
<p>优化方向：</p>
<ul>
<li><p>延迟初始化: 不是所有的初始化工作都需要在应用启动时完成。考虑使用dispatch_once, dispatch_after或其他技术延迟初始化。</p>
</li>
<li><p>并行初始化: 对于不依赖其他模块的初始化工作，可以考虑在后台线程并行初始化。</p>
<blockquote>
<p>这两点KGStartUpTaskManager已经做得比较好了，任务分发这里，耗时不长，优化空间不大。</p>
</blockquote>
</li>
<li><p>优化UI渲染: 减少首屏UI元素的数量，使用轻量级的视图和图形，避免在启动时做复杂的布局计算。</p>
<blockquote>
<p>首页显示耗时任务已让对应业务修改</p>
</blockquote>
</li>
<li><p>缓存策略: 对于一些重复的、耗时的计算，考虑使用缓存策略。</p>
<blockquote>
<p>优化了部分代码实现，已单元测试对比性能，如图片resize，文字绘图方法等。</p>
</blockquote>
</li>
<li><p>利用RunLoop: 可以利用RunLoop在首屏渲染完成后再进行一些非关键的初始化工作。</p>
<blockquote>
<p>KGStartUpTaskManager 采用的便是此策略</p>
</blockquote>
</li>
</ul>
<p>总的来说，iOS应用的启动优化需要从多个方面入手。航母作为一个千万级DAU的产品，已经历多次启动优化迭代，pre-main阶段的优化收益目前来看比较有限，而main函数之后的优化主要是从应用业务逻辑和UI渲染的角度考虑，KGStartUpTaskManager分发目前来看，尚还合理，需要在这个方向上细细抠出启动时长，需要时间和各个业务配合修改，在通用技术层面，能进行修改的，是一些耗时的通用方法优化，比如图片着色、高斯模糊等。</p>
<h2 id="dyld2、dyld3、dyld4-iOS的动态链接器进化史"><a href="#dyld2、dyld3、dyld4-iOS的动态链接器进化史" class="headerlink" title="dyld2、dyld3、dyld4: iOS的动态链接器进化史"></a>dyld2、dyld3、dyld4: iOS的动态链接器进化史</h2><p>iOS的启动流程是一个复杂且关键的过程，而在其中，dyld即链接扮演着至关重要的角色。作为Apple的动态链接器，dyld负责管理应用程序和它所依赖的库之间的链接。我来看一下，从dyld2到dyld4，这个组件是如何发展的。</p>
<h3 id="dyld2"><a href="#dyld2" class="headerlink" title="dyld2"></a>dyld2</h3><p>dyld2在iOS 3.1中首次亮相，它支持到iOS 12。这个版本的主要亮点是：</p>
<ul>
<li>dyld shared cache：为了提高库的加载速度，dyld2引入了一个技术，将系统的核心库（如UIKit）合并为一个大的缓存文件。</li>
<li>初步的优化：在这个阶段，Apple开始关注启动时间，并通过预加载和其他技术，尝试减少启动延迟。</li>
</ul>
<h3 id="dyld3"><a href="#dyld3" class="headerlink" title="dyld3"></a>dyld3</h3><p>从iOS 13开始，Apple为第三方应用启用了dyld3。这个版本引入了许多关键的改进：</p>
<ul>
<li>启动闭包：与之前版本不同，dyld3为每个应用程序创建一个“启动闭包”。这个闭包包含了应用程序启动所需的所有信息，大大减少了启动时的IO操作和磁盘访问。</li>
<li>更智能的优化：通过对启动过程进行详细的分析，dyld3能够更智能地决定哪些库应该预加载，从而进一步提高启动速度。</li>
<li>更紧凑的内存布局：dyld3优化了应用程序和库在内存中的布局，减少了页面错误，提高了性能。</li>
</ul>
<h3 id="dyld4"><a href="#dyld4" class="headerlink" title="dyld4"></a>dyld4</h3><p><a href="https://github.com/apple-oss-distributions/dyld/blob/main/doc/dyld4.md">dyld4</a> 在保持相同的 mach-o 解析器的基础上改进 dyld3，并在 non-customer 情况下通过支持不需要预构建闭包的即时加载来做得更好。</p>
<p>主要特点与改进：</p>
<ul>
<li>代码组织结构：dyld4 的代码组织包括 dyld、libdyld、缓存构建工具、其他工具、常用代码、公共头文件、测试、文档等部分。</li>
<li>启动流程：内核通过将所有的 argc、argv、envp 和 apple 参数推到堆栈并跳到 dyld 的入口点来启动进程。在 dyld4 中，有几行汇编代码来对齐堆栈，并跳入C++代码。</li>
<li>全局状态管理：所有的 dyld 状态都存储在 dyld 中（而不是在 libdyld 中），并分为两个类进行管理：DyldProcessConfig 和 DyldRuntimeState。</li>
<li>Loader 对象：每个加载的 mach-o 文件都由一个 dyld4::Loader 对象跟踪。在 dyld4 中，加载的图像列表是 DyldRuntimeState 中的一个 <code>Array&lt;dyld4::Loader*&gt;</code>。</li>
<li>MachOAnalyzer：dyld4::Loader 对象不直接解析&#x2F;处理 mach-o 文件，而是建立在 dyld3::MachOAnalyzer 层上的薄对象。</li>
<li>统一的 Prebuilt 和 JustInTime 模型：dyld4 为每个在进程中加载的 mach-o 文件实例化了一个新的抽象基类 Loader。它有两个具体的子类：PrebuiltLoader 和 JustInTimeLoader。</li>
<li>libdyld.dylib 的变化：libdyld.dylib 是很小的，几乎所有的代码都在 dyld 中。但它还有一个特别之处，那就是 </li>
<li>_dyld_process_info 例程，它不使用任何当前的 dyld 状态，而是检查另一个进程的 dyld 状态。</li>
</ul>
<h4 id="启动闭包介绍"><a href="#启动闭包介绍" class="headerlink" title="启动闭包介绍"></a>启动闭包介绍</h4><p>启动闭包优化是在dyld3和之后的版本中引入的一种策略，它的目标是减少应用启动时间。启动闭包，简而言之，是一个预先计算的数据结构，其中包含了应用启动时所需的所有信息，如需要加载的动态库、链接信息、初始化顺序等。闭包的引入减少了启动时的I&#x2F;O操作和不必要的计算，从而大大加速了应用的启动速度。</p>
<p>以下是启动闭包优化的主要内容和过程：</p>
<ol>
<li><p>依赖的动态库列表<br>在传统的动态链接过程中，dyld需要解析Mach-O文件头，查找它所依赖的所有动态库。在启动闭包中，这个列表是预先计算好的，所以dyld可以立即知道需要加载哪些库，而不用再次解析二进制文件。</p>
</li>
<li><p>Bind和Rebase信息<br>在传统启动流程中，dyld会执行两个主要任务：binding和rebasing。binding是解析并链接外部符号的过程，而rebasing是更新程序内部地址引用的过程。启动闭包中预先计算了这些操作的结果，因此dyld可以直接应用这些操作，而无需再次计算。</p>
</li>
<li><p>初始化顺序<br>不同的库和模块可能有不同的初始化代码，它们需要在特定的顺序中执行。启动闭包预先计算了这个顺序，确保每个初始化函数都按正确的顺序执行。</p>
</li>
<li><p>元数据和其他信息<br>除了上述关键信息，启动闭包还可能包含其他优化数据，例如Objective-C的类、选择器、协议等的元数据，以及其他与特定应用或库相关的优化数据。</p>
</li>
</ol>
<h5 id="创建和使用启动闭包的过程："><a href="#创建和使用启动闭包的过程：" class="headerlink" title="创建和使用启动闭包的过程："></a>创建和使用启动闭包的过程：</h5><ul>
<li>创建：启动闭包是在应用编译和链接时创建的。在这个过程中，链接器收集所有必要的信息，如依赖关系、bind&#x2F;rebase操作等，并将它们存储在闭包中。</li>
<li>存储：闭包存储在App的沙盒目录下，通常在tmp&#x2F;com.apple.dyld路径下。这确保了闭包在应用更新或设备重启时都可以轻松地被重新创建。</li>
<li>加载：当用户启动应用时，dyld首先检查是否有可用的启动闭包。如果找到闭包，dyld会使用它来加速启动过程。如果没有找到，dyld会回退到传统的启动流程。</li>
<li>更新：如果应用更新或其依赖发生变化，启动闭包需要被重新创建。dyld会自动检测这些更改并在必要时重新生成闭包。</li>
</ul>
<p>总的来说，启动闭包优化是dyld在iOS应用启动过程中引入的一种重要优化。通过预先计算和存储关键启动信息，它大大减少了启动时间，为用户提供了更流畅的体验。</p>
<h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>从dyld2到dyld4，Apple一直在努力优化iOS的启动流程。每个新版本都引入了新的技术和特性，旨在为用户提供更快、更流畅的体验。这也再次证明了Apple对用户体验的执着追求。</p>
<h2 id="MachO介绍"><a href="#MachO介绍" class="headerlink" title="MachO介绍"></a>MachO介绍</h2><p>当我谈论iOS中的Mach-O（Mach Object），我实际上是在讨论macOS和iOS上用于表示可执行文件、目标代码、共享库和动态加载代码的文件格式。Mach-O是macOS和iOS的原生二进制文件格式。</p>
<h3 id="Mach-O结构"><a href="#Mach-O结构" class="headerlink" title="Mach-O结构"></a>Mach-O结构</h3><p>Mach-O文件由三部分组成：</p>
<ul>
<li>Header：描述文件的总体属性，例如其目标架构（如 arm64、x86_64）和文件类型（如可执行文件、共享库或目标代码）。</li>
<li>Load Commands：告诉操作系统如何加载和运行该文件。这些命令提供了有关文件中段和节的信息、需要的动态链接共享库和初始化例程的信息等。例如，LC_SEGMENT是一个加载命令，描述了内存中的段的位置和大小。</li>
<li>Data：实际的数据，这可能是代码、常量、符号等。</li>
</ul>
<h3 id="Segments-和-Sections"><a href="#Segments-和-Sections" class="headerlink" title="Segments 和 Sections"></a>Segments 和 Sections</h3><p>Mach-O文件进一步被划分为段（Segments）和节（Sections）：</p>
<ul>
<li>Segments：是文件中的连续字节块，它们在内存中作为一个单元被加载。每个段可以包含零个或多个节。</li>
<li>Sections：定义了段内的具体内容和目的。例如，一个段可以有一个文本节来存储可执行代码，和一个数据节来存储常量。</li>
</ul>
<p>常见的段和节有：</p>
<ul>
<li>__TEXT段：包含代码和常量。这个段的常见节有：</li>
<li>__text：实际的机器代码。</li>
<li>__cstring：C-风格的字符串。</li>
<li>__DATA段：包含数据变量。常见节有：</li>
<li>__data：包含初始化的全局变量。</li>
<li>__bss：包含未初始化的全局变量（在内存中，但不占用磁盘空间）。</li>
</ul>
<h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Mach-O文件包含一个符号表，列出了所有的函数和变量的名字。这对于调试和动态链接非常有用。</p>
<h3 id="Mach-O的作用"><a href="#Mach-O的作用" class="headerlink" title="Mach-O的作用"></a>Mach-O的作用</h3><ul>
<li>执行：Mach-O文件定义了如何在一个特定的架构（如arm64）上执行代码。</li>
<li>链接：编译器和链接器使用Mach-O文件格式来生成和链接代码。动态链接器dyld使用Mach-O文件的信息来动态加载和链接共享库。</li>
<li>调试：Mach-O文件中的信息（例如符号表）使得调试工具能够理解和操作代码。</li>
<li>二进制分析：安全研究员和其他利益相关者可以使用Mach-O文件格式进行二进制分析，了解代码的工作方式、查找漏洞或进行逆向工程。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Mach-O是macOS和iOS的核心文件格式，用于表示各种类型的二进制文件。它的结构和信息使得操作系统能够加载、执行、链接和调试代码，同时也为二进制分析提供了有价值的信息。</p>
<h2 id="RunLoop介绍"><a href="#RunLoop介绍" class="headerlink" title="RunLoop介绍"></a>RunLoop介绍</h2><p>iOS的RunLoop是一个核心组件，负责管理应用中的事件循环，如触摸事件、定时器事件、I&#x2F;O事件等。理解RunLoop的工作原理有助于我编写出更高效、更流畅的应用程序。此外，RunLoop与应用启动优化也有关联。</p>
<h3 id="1-RunLoop的结构："><a href="#1-RunLoop的结构：" class="headerlink" title="1. RunLoop的结构："></a>1. RunLoop的结构：</h3><ul>
<li>Modes: RunLoop可以在不同的模式下运行。每种模式定义了一组输入源和计时器。例如，NSDefaultRunLoopMode、UITrackingRunLoopMode等。</li>
<li>Sources: 输入源是与外部事件对应的对象。有两种类型：Source0 和 Source1。Source0 通常用于应用内部事件，如UIEvent或自定义事件。Source1 用于与其他线程或Mach端口的通信。</li>
<li>Timers: 计时器用于在指定的时间或间隔执行代码。例如，使用NSTimer。</li>
<li>Observers: 观察者可以在RunLoop的不同阶段得到通知，如进入、退出、睡眠等。</li>
</ul>
<h3 id="2-RunLoop的工作流程："><a href="#2-RunLoop的工作流程：" class="headerlink" title="2. RunLoop的工作流程："></a>2. RunLoop的工作流程：</h3><p>以下是RunLoop的简化工作流程：</p>
<ul>
<li>通知Observers：即将进入RunLoop。</li>
<li>通知Observers：即将处理Timers。</li>
<li>通知Observers：即将处理Sources。</li>
<li>处理未处理的消息。</li>
<li>如果没有消息，进入休眠，等待消息。</li>
<li>通知Observers：即将退出RunLoop。</li>
</ul>
<p>这个循环会一直进行，直到应用退出。</p>
<h3 id="3-使用RunLoop进行启动优化："><a href="#3-使用RunLoop进行启动优化：" class="headerlink" title="3. 使用RunLoop进行启动优化："></a>3. 使用RunLoop进行启动优化：</h3><p>应用启动优化的目的是减少首次启动时用户需要等待的时间。以下是使用RunLoop进行启动优化的方法：</p>
<ul>
<li><p>延迟初始化: 可以利用RunLoop在首屏渲染完成后，再进行一些非关键的初始化工作。例如，某些SDK的初始化、某些功能模块的预加载等。</p>
<blockquote>
<p>KGStartUpTaskManager 实现了这部分逻辑</p>
</blockquote>
</li>
<li><p>利用Observer：使用CFRunLoopObserver在RunLoop的特定时机执行任务，如在首次RunLoop循环结束后。</p>
</li>
<li><p>分散开销：将一些耗时的操作，如大量的数据计算或I&#x2F;O操作，分散到多个RunLoop循环中，以避免阻塞UI。</p>
</li>
<li><p>优先处理UI事件：确保UI事件，如用户的触摸、动画等，总是在其他任务之前得到处理，以确保流畅的用户体验。</p>
</li>
<li><p>后台预加载：可以创建一个后台线程，利用其RunLoop预加载一些资源或进行预计算。</p>
</li>
</ul>
<p>为了使您对RunLoop有更直观的理解，以下是一个简单的图示：</p>
<pre class="line-numbers language-none"><code class="language-none">+--------------------------+
|     RunLoop开始          |
+--------------------------+
          |
          V
+--------------------------+
|  处理所有Source0类型源   |
+--------------------------+
          |
          V
+--------------------------+
|  处理所有Source1类型源   |
+--------------------------+
          |
          V
+--------------------------+
|   处理所有的计时器事件   |
+--------------------------+
          |
          V
+--------------------------+
|   处理消息，如UI事件     |
+--------------------------+
          |
          V
+--------------------------+
|     RunLoop结束          |
+--------------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>总的来说，通过理解和合理利用RunLoop，我不仅可以优化应用的启动时间，还可以更好地管理应用的事件处理和资源分配，从而提供更好的用户体验。</p>
<h1 id="航母问题处理"><a href="#航母问题处理" class="headerlink" title="航母问题处理"></a>航母问题处理</h1><p>使用 Instruments 的 App Launch 和 Time Profiler，查看不同阶段的耗时占用及某个阶段的耗时明细</p>
<h2 id="动态库加载时长"><a href="#动态库加载时长" class="headerlink" title="动态库加载时长"></a>动态库加载时长</h2><p>这部分时长，主要耗时在 Flutter.framework 和 ZegoLiveRoom，这两个库都不好转静态库，所以这部分时长没有尝试优化<br><img src="/images/iOS/launch/framework_pr.png"/></p>
<h2 id="load-阶段耗时"><a href="#load-阶段耗时" class="headerlink" title="load 阶段耗时"></a>load 阶段耗时</h2><h3 id="优化前（依赖CPU繁忙度，卡顿概率高）"><a href="#优化前（依赖CPU繁忙度，卡顿概率高）" class="headerlink" title="优化前（依赖CPU繁忙度，卡顿概率高）"></a>优化前（依赖CPU繁忙度，卡顿概率高）</h3><img src="/images/iOS/launch/load_pr.png"/>

<pre class="line-numbers language-none"><code class="language-none">85.00 ms    0.2%	85.00 ms	 	  +[_AFURLSessionTaskSwizzling load]
90.00 ms    1.3%	0 s	 	  			+[GDTCCTUploader load]
75.00 ms    0.2%	70.00 ms	 	  +[UIActionSheet(kgSafe) load]
105.00 ms    0.9%	105.00 ms	 	  +[UIAlertView(kgSafe) load]
75.00 ms    0.2%	70.00 ms	 	  +[UIActionSheet(kgSafe) load]
75.00 ms    0.2%	70.00 ms	 	  +[AppDelegate(UIScene) load]
75.00 ms    0.2%	70.00 ms	 	  +[UIWindow(UIScene) load]
75.00 ms    0.2%	70.00 ms	 	  +[UIApplication(UIScene) load]
50.00 ms    0.7%	0 s	 	  		+[KGTrackingNotificationManager load]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h3><p>这些已在开发阶段处理，Initializing Time 减少了60ms左右</p>
<pre class="line-numbers language-none"><code class="language-none">+[UIActionSheet(kgSafe) load]
+[UIAlertView(kgSafe) load]
+[UIActionSheet(kgSafe) load]
+[AppDelegate(UIScene) load]
+[UIWindow(UIScene) load]
+[UIApplication(UIScene) load]
+[KGTrackingNotificationManager load]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>另外几个延后到initialize，pre-main 时间减少，APM上报的启动时长不变（延后）<br><img src="/images/iOS/launch/load_after.png"/></p>
<h2 id="耗时方法（依赖CPU繁忙度，卡顿概率高）"><a href="#耗时方法（依赖CPU繁忙度，卡顿概率高）" class="headerlink" title="耗时方法（依赖CPU繁忙度，卡顿概率高）"></a>耗时方法（依赖CPU繁忙度，卡顿概率高）</h2><pre class="line-numbers language-none"><code class="language-none">20.00 ms    0.2%	7.00 ms	 	       +[UIImage(KGAssetsExtension) kg_imageNamed:moduleName:] 已优化，查找bundle内存缓存
14.00 ms    0.1%	4.00 ms	 	      -[KGHomeTabItem drawTextImageWithText:color:font:] 已优化，2倍
195.00 ms    0.6%	20.00 ms	 	   -[LOTLayerContainer display] 已优化，启动播放最后一帧
30.00 ms    0.0%		30.00 ms	 	   -[KGCarPlayManage configureTabItems] 已找对应负责开发处理
120.00 ms    0.4%	110.00 ms	 	   -[FXBlurView snapshotOfUnderlyingView] 已找对应负责开发处理
15.00 ms    0.0%	15.00 ms	 	      +[NSData(DES) DESDecrypt:WithKey:] 不修改，试了 openssl 版本，收益不高风险高
50.00 ms    0.0%	50.00 ms	 	      +[LOTAnimationView animationFromJSON:] 已找对应负责开发处理
65.00 ms    0.4%	65.00 ms	 			Flutter  _GLOBAL__sub_I_timeline.cc Flutter 内部调用，不可避免
20.00 ms								+[KGNetworkTools kgRequestOrginCall] 已优化，DEBUG 阶段4倍
40.00 ms  100.0%	40.00 ms	 	 	+[UIImageTools colorizeImage:withColor:forBlendModel:] 待优化，尝试一天多，达不到效果
20.00 ms  100.0%	20.00 ms	 	 	-[UIImage(YYAdd) imageByResizeToSize:] 已优化，1.5倍
20.00 ms  100.0%	20.00 ms	 	 	+[KGPublicCommonTools connectedToNetwork] 风险高，不修改
&gt;  BOOL didRetrieveFlags &#x3D; SCNetworkReachabilityGetFlags(defaultRouteReachability, &amp;flags);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>已优化的方法部分在耗时占用上，用例测试内测试执行效率提高了一些，减少启动阶段因这些方法导致卡顿耗时的可能。具体数据因本地测试样本太小，数据波动较大，得线上数据验证。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>经过对这轮启动优化的研究和实践，我得出了以下几点关键发现：</p>
<ul>
<li>在pre-main阶段，我成功地移除了部分耗时的加载操作，并将这些时间转移到了initialize阶段，但值得注意的是，这并没有对APM的启动时长造成实质性的变化</li>
<li>在main之后，KGStartUpTaskManager在启动执行任务划分方面已经比较大程度减少启动阶段主线程的卡顿，且有些任务需要通过与业务部门的协作来推动修改，所以这一阶段只能尝试去优化一些捕获的较大概率容易导致卡顿的方法。</li>
<li>由于本地测试的样本量有限，要获取更准确的数据，还需进一步在线上环境进行验证。我期待在实际线上环境中进一步确认这些优化措施的效果，并继续完善启动优化的策略。</li>
</ul>
<h1 id="参考链接或相关工具"><a href="#参考链接或相关工具" class="headerlink" title="参考链接或相关工具"></a>参考链接或相关工具</h1><p><a href="https://developer.apple.com/documentation/xcode/reducing-your-app-s-launch-time">reducing-your-app-s-launch-time</a><br><a href="https://opensource.apple.com/source/CF/">Apple Core Foundation</a><br><a href="https://opensource.apple.com/source/dyld/">Apple dyld</a><br><a href="https://developer.apple.com/library/archive/documentation/Performance/Conceptual/CodeFootprint/Articles/MachOOverview.html">Apple MachO</a><br><a href="https://www.emergetools.com/app">emergetools</a><br><a href="https://github.com/maniackk/TimeProfiler">https://github.com/maniackk/TimeProfiler</a><br><a href="https://juejin.cn/post/6887741815529832456">抖音品质建设 - iOS启动优化《原理篇》</a></p>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>解决公司运维网络限制的两种办法</title>
    <url>/2024/04/14/%E8%A7%A3%E5%86%B3%E5%85%AC%E5%8F%B8%E8%BF%90%E7%BB%B4%E7%BD%91%E7%BB%9C%E9%99%90%E5%88%B6%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>在当今的企业环境中，出于安全和管理的考虑，很多公司的IT部门对内网进行了严格的限制。这些限制通常包括禁止直接从公司网络访问外部的SSH连接、封锁常用的远程桌面协议如RDP和VNC流量，以及禁用了如TeamViewer、AnyDesk、ToDesk等流行的远程控制软件。这种做法虽然能有效防止潜在的安全威胁，但同时也给需要远程访问工作资源的员工带来了不便。本文将介绍几种绕过这些限制的方法，以便在不影响公司网络安全的前提下，提高工作效率和灵活性。</p>
<span id="more"></span>

<h2 id="方案一：使用Ocserv或AnyLink部署远程网关"><a href="#方案一：使用Ocserv或AnyLink部署远程网关" class="headerlink" title="方案一：使用Ocserv或AnyLink部署远程网关"></a>方案一：使用Ocserv或AnyLink部署远程网关</h2><h3 id="方案介绍"><a href="#方案介绍" class="headerlink" title="方案介绍"></a>方案介绍</h3><p>Ocserv（OpenConnect Server）和AnyLink都是可以部署在服务器上的软件，它们能够创建一个VPN服务，让用户能够通过VPN安全地连接到公司的内网。这种方式需要为特定IP配置路由，以确保只有访问公司资源时才通过VPN，不影响正常的互联网访问。</p>
<ul>
<li>官方地址:<ul>
<li>Ocserv: <a href="https://ocserv.gitlab.io/www/">https://ocserv.gitlab.io/www/</a></li>
<li>AnyLink: <a href="https://github.com/bjdgyc/anylink">https://github.com/bjdgyc/anylink</a></li>
</ul>
</li>
</ul>
<h3 id="部署文档地址"><a href="#部署文档地址" class="headerlink" title="部署文档地址"></a>部署文档地址</h3><ul>
<li>Ocserv部署文档: <a href="https://ocserv.gitlab.io/www/installation.html">https://ocserv.gitlab.io/www/installation.html</a></li>
<li>AnyLink部署文档: <a href="https://github.com/bjdgyc/anylink/wiki">https://github.com/bjdgyc/anylink/wiki</a></li>
</ul>
<h3 id="好处和缺点"><a href="#好处和缺点" class="headerlink" title="好处和缺点"></a>好处和缺点</h3><p><strong>好处:</strong></p>
<ul>
<li>提供安全的远程访问内网资源的能力。</li>
<li>可以细粒度控制访问权限，增强安全性。</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>配置和维护相对复杂，需要一定的网络知识。</li>
<li>可能与其他会修改路由的软件冲突，如公司内网会推送路由也可能会引起问题。</li>
<li>在macOS上，如果连接了Cisco AnyConnect，通过数据线连接的iPhone 15可能会断开连接，导致调试工作受阻。iPhone 13和iPhone X未发现此现象。</li>
</ul>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><img src="/images/server/guacamole/4.png"/>
<img src="/images/server/guacamole/5.png"/>

<h2 id="方案二：使用Guacamole部署Web服务作为跳板机"><a href="#方案二：使用Guacamole部署Web服务作为跳板机" class="headerlink" title="方案二：使用Guacamole部署Web服务作为跳板机"></a>方案二：使用Guacamole部署Web服务作为跳板机</h2><h3 id="方案介绍-1"><a href="#方案介绍-1" class="headerlink" title="方案介绍"></a>方案介绍</h3><p>Apache Guacamole是一个客户端无需安装任何插件或软件即可运行的远程桌面网关。用户通过Web浏览器就能访问远程的桌面环境，它支持标准的协议如VNC、RDP和SSH。</p>
<ul>
<li>官方地址: <a href="https://guacamole.apache.org/">https://guacamole.apache.org/</a></li>
</ul>
<h3 id="部署文档地址-1"><a href="#部署文档地址-1" class="headerlink" title="部署文档地址"></a>部署文档地址</h3><ul>
<li>Guacamole部署文档: <a href="https://guacamole.apache.org/doc/gug/">https://guacamole.apache.org/doc/gug/</a></li>
</ul>
<h3 id="好处和缺点-1"><a href="#好处和缺点-1" class="headerlink" title="好处和缺点"></a>好处和缺点</h3><p><strong>好处:</strong></p>
<ul>
<li>无需在客户端安装额外软件，通过浏览器即可访问远程桌面，方便快捷。</li>
<li>支持多种远程协议，灵活性高。</li>
<li>部署有OTP二次验证，增强安全性。</li>
</ul>
<p><strong>缺点:</strong></p>
<ul>
<li>需要额外的服务器资源来部署和运行Guacamole服务。</li>
<li>对于网络延迟较高的环境，用户体验可能受到影响。</li>
</ul>
<h3 id="推荐-docker-部署"><a href="#推荐-docker-部署" class="headerlink" title="推荐 docker 部署"></a>推荐 docker 部署</h3><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-<span class="token operator">></span> <span class="token comment"># cat /data/guacamole/docker-compose.yml</span>
services:
  guacamole:
    image: jwetzell/guacamole:latest
    container_name: guacamole
    volumes:
      - ./postgres:/config
    environment:
      - <span class="token assign-left variable">EXTENSIONS</span><span class="token operator">=</span>auth-totp
    ports:
      - <span class="token number">8181</span>:8080
volumes:
  postgres:
    driver: <span class="token builtin class-name">local</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h4><pre class="line-numbers language-none"><code class="language-none">&gt; # cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;guacamole.vanjay.cn.conf
server &#123;
    listen 127.0.0.2:80;
    server_name guacamole.ddns.vanjay.cn;
    return 301 https:&#x2F;&#x2F;$host$request_uri;
&#125;

server &#123;
    listen 127.0.0.2:443 ssl;
    server_name guacamole.ddns.vanjay.cn;

    ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;guacamole.ddns.vanjay.cn_ecc&#x2F;guacamole.ddns.vanjay.cn.cer;
    ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;ssl&#x2F;guacamole.ddns.vanjay.cn_ecc&#x2F;guacamole.ddns.vanjay.cn.key;

    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;ssl_common.conf;
    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;add_header_fileserver.conf;
    include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;fileserver.conf;

    location &#x2F; &#123;
        # 不缓存，支持流式输出
        proxy_cache off;  # 关闭缓存
        proxy_buffering off;  # 关闭代理缓冲
        chunked_transfer_encoding on;  # 开启分块传输编码
        tcp_nopush on;  # 开启TCP NOPUSH选项，禁止Nagle算法
        tcp_nodelay on;  # 开启TCP NODELAY选项，禁止延迟ACK算法
        keepalive_timeout 300;  # 设定keep-alive超时时间为65秒

        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8181&#x2F;;
        include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;proxy_http.conf;
    &#125;
&#125;#
root@pve-ubuntu [04:43:08 PM] [~]
-&gt; # cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;ssl_common.conf
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384&#39;;
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1d;
ssl_session_tickets off;
root@pve-ubuntu [04:43:50 PM] [~]
-&gt; # cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;add_header_fileserver.conf
add_header Referrer-Policy                      &quot;no-referrer&quot;   always;
add_header X-Content-Type-Options               &quot;nosniff&quot;       always;
add_header X-Download-Options                   &quot;noopen&quot;        always;
add_header X-Frame-Options                      &quot;SAMEORIGIN&quot;    always;
add_header X-Permitted-Cross-Domain-Policies    &quot;none&quot;          always;
add_header X-Robots-Tag                         &quot;none&quot;          always;
add_header X-XSS-Protection                     &quot;1; mode&#x3D;block&quot; always;
add_header Strict-Transport-Security &quot;max-age&#x3D;63072000; includeSubDomains; preload&quot; always;
add_header Content-Security-Policy &quot;frame-ancestors &#39;self&#39; *.vanjay.cn&quot;;
charset utf-8;
root@pve-ubuntu [04:43:53 PM] [~]
-&gt; # cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;fileserver.conf
include       mime.types;
default_type  application&#x2F;octet-stream;

client_header_buffer_size 32k;
large_client_header_buffers 4 32k;
client_max_body_size 10240M;
client_body_timeout 3600s;
client_body_buffer_size 512k;

sendfile on;
tcp_nopush on;
tcp_nodelay on;

fastcgi_send_timeout 3600;
fastcgi_read_timeout 3600;
fastcgi_buffer_size 64k;
fastcgi_buffers 4 64k;
fastcgi_busy_buffers_size 128k;
fastcgi_temp_file_write_size 256k;
fastcgi_intercept_errors on;
fastcgi_hide_header X-Powered-By;

gzip on;
gzip_vary on;
gzip_comp_level 4;
gzip_min_length  256;
gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript application&#x2F;json application&#x2F;ld+json application&#x2F;manifest+json application&#x2F;rss+xml text&#x2F;javascript text&#x2F;css application&#x2F;xml;
gzip_proxied expired no-cache no-store private no_last_modified no_etag  auth;
gzip_disable &quot;MSIE [1-6]\.&quot;;
server_tokens off;
root@pve-ubuntu [04:43:59 PM] [~]
-&gt; # cat &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;common&#x2F;proxy_http.conf
proxy_http_version 1.1;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection &quot;upgrade&quot;;
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $scheme;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="效果展示-1"><a href="#效果展示-1" class="headerlink" title="效果展示"></a>效果展示</h3><img src="/images/server/guacamole/2.png"/>
<img src="/images/server/guacamole/1.png"/>
<img src="/images/server/guacamole/3.png"/>

<p>以上是两种常见的绕过公司运维网络限制的方法。当然，选择哪种方案，需要根据具体的工作需求和网络环境来决定。重要的是，在不违反公司政策和法律法规的前提下，寻找最适合自己的工作方式。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>购买BanwagonHOST VPS自建Shadowsocks记录</title>
    <url>/2017/07/28/%E8%B4%AD%E4%B9%B0BanwagonHOST-VPS%E8%87%AA%E5%BB%BAShadowsocks%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>不能畅游墙外没法好好生活和工作</p>
</blockquote>
<p>本来手里有着五六个 <code>Shadowsocks</code> 帐号，但体验都不佳，一直也没怎么用，是因为一直使用公司搭建的 <code>Cisco Anyconnect</code>，科学上网后百兆带宽可以满速使用，速度虽快，但是客户端软件默认是全局代理的，虽然可以走<code>IP route list</code>达到和<code>Shadowsocks </code>的<code>PAC</code>同样的作用，但效果慎微，而且<code>IP</code>要自己去填，所以公司<code>IT</code>直接没搞这个<code>route list</code>，因为我们大部分电脑和手机<code>APP</code>都在墙内，这就导致在使用了<code>Cisco Anyconnect</code>后大部分电脑或者手机上的<code>APP</code>网络访问困难，常开<code>VPN</code>还是需要<code>Shadowsocks </code>等可根据 <strong>PAC清单自动代理</strong> 或者 <strong>分应用代理</strong> 的一类软件。</p>
<span id="more"></span>

<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>废话有点多，进入主题。前几日群里的前辈在群里说道自搭的<code>Shadowsocks</code>在使用了<code>Google</code>提出的<code>TCP</code>拥塞控制新算法——<code>BBR</code>之后，解决了以下两个问题：</p>
<pre><code> 1. 在有一定丢包率的网络链路上充分利用带宽；
 2. 降低网络链路上的 buffer 占用率，从而降低延迟。
</code></pre>
<p> 正好有时间，大佬说的又激发了我的兴趣，我决定自己也搭一个玩玩，也以备不时之需，经历这一天，也总结了个人认为最省事的路线，以下是步骤记录。</p>
<h2 id="购买VPS"><a href="#购买VPS" class="headerlink" title="购买VPS"></a>购买<code>VPS</code></h2><p>在请教了群里的前辈购买何档次的<code>BanwagonHOST VPN</code>之后，购买了19.99$&#x2F;年的方案，这是购买地址：<a href="https://bandwagonhost.com/index.php">BanwagonHOST</a>，这里注意两点，第一点：购买时注意买基于<code>KVM</code>的，而不是<code>OpenVZ</code>，<code>KVM</code>是新推出的，只了解了大体不同，想知道具体差异自行<a href="https://www.google.com/">Google</a>，一般来说，买新架构就没错了；第二点：在选择<code>Location</code>时，最好选择美国洛杉矶节点<code>Los Angeles</code>，别问为什么，前人经验，至于是<code>QNET</code>还是<code>MCOM</code>，自行谷歌这二者差异，有人汇总对比了这两种方案，不同城市的<code>ping</code>值有高有低，总体来说<code>QNET</code>稍好，所以我购买的是它。</p>
<h2 id="重装系统"><a href="#重装系统" class="headerlink" title="重装系统"></a>重装系统</h2><p>付款购买成功后，进入当前页面的<code>Services-My Services</code>菜单下，找到你新购买的<code>Product/Service</code>，进入控制面板<code>KiviVM Control Panel</code>，界面很简单，每个功能浏览一下之后开始吧，预装的貌似是<code>Cent OS 6</code>，重装成你想要的系统吧，根据提示来，很<code>easy</code>。我个人比较习惯<code>Ubuntu</code>，所以安装了面板上支持的最新版本的<code>Ubuntu 16.04 x86_64</code>，面板里有一键安装<code>Shadowsocks Server</code>和<code>ShadowsocksR Server</code>功能，但个人不推荐，没啥别的原因，因为感觉不受我控制。装好后会提示你生成了一个随机的ROOT密码，记下来。执行以下步骤：</p>
<pre><code>1.回到你的电脑，用你自己的方式`SSH`登陆到你的`VPS`，我用的`iTerm`，输入`ssh root@your_vps_ip_address -p your_vps_port`（本地要配置好`RSA`），默认密码是前面保存的随机密码。
2.默认ROOT密码不好记，登陆成功后输入`passwd`输入两次新的`ROOT`密码更改密码。
3.`Ubuntu`的话更新下系统，分别执行`apt-get update`和`apt-get upgrade`（不必须但建议）
</code></pre>
<h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks "></a>安装<code>Shadowsocks </code></h2><p>安装的方式有很多，我独爱个人认为最优的那种，执行以下命令：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">wget --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocksR.sh
chmod +x shadowsocksR.sh
.&#x2F;shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>你也可以用<code>&amp;&amp;</code>连接一次性执行，按提示完成即可。</p>
<h2 id="安装Google-bbr"><a href="#安装Google-bbr" class="headerlink" title="安装Google bbr"></a>安装<code>Google bbr</code></h2><p>一、如果你的VPS是基于KVM的，运行以下命令：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh
chmod +x bbr.sh
.&#x2F;bbr.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>按照提示安装完成，安装完成后，检测是否成功安装：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">sysctl net.ipv4.tcp_available_congestion_control<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出的信息包含<code>bbr</code>就<code>Ok</code>了，一般为<code>net.ipv4.tcp_available_congestion_control = bbr cubic reno</code></p>
<p>二、如果你不小心购买了基于<code>OpenVZ</code>的<code>VPS</code>，运行这个：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kuoruan&#x2F;shell-scripts&#x2F;master&#x2F;ovz-bbr&#x2F;ovz-bbr-installer.sh
chmod +x ovz-bbr-installer.sh
.&#x2F;ovz-bbr-installer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个连提示都是中文的，按照提示安装完成即可，安装完成使用看说明，检测是否安装成功：</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ping 10.0.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果能通，说明 bbr 已经启动,然后检查 iptables 规则:</p>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">iptables -t nat -nL
Chain PREROUTING (policy ACCEPT)
target     prot opt source               destination
LKL_IN     all  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0
 
Chain POSTROUTING (policy ACCEPT)
target     prot opt source               destination
 
Chain OUTPUT (policy ACCEPT)
target     prot opt source               destination
 
Chain LKL_IN (1 references)
target     prot opt source               destination
DNAT       tcp  --  0.0.0.0&#x2F;0            0.0.0.0&#x2F;0            tcp dpt:8989 to:10.0.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>里面有相应的端口规则。</p>
<h2 id="使用Shadowsocks"><a href="#使用Shadowsocks" class="headerlink" title="使用Shadowsocks"></a>使用<code>Shadowsocks</code></h2><p>使用对应的客户端使用的你的<code>Shadowsocks</code>吧，怎么使用自行搜索。想着就那么几个步骤，还是写了这么多。。。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我购买时不小心买成了<code>OpenVZ</code>的，请教了群里的一位前辈之后告诉我联系客服，我便邮件联系官方退款了，购买了新的基于<code>KVM</code>，服务态度非常好，值得点赞。供参考，希望能帮到有需要的朋友。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.kuoruan.com/48.html">搬瓦工(Bandwagonhost)搭建Shadowsocks并优化速度</a></p>
<p><a href="https://blog.kuoruan.com/116.html">OpenVZ 平台 Google BBR 一键安装脚本</a></p>
]]></content>
      <categories>
        <category>VPN</category>
      </categories>
      <tags>
        <tag>Mac使用</tag>
        <tag>BanwagonHOST</tag>
        <tag>Shadowsocks</tag>
        <tag>科学上网</tag>
      </tags>
  </entry>
</search>
